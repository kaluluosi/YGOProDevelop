//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace YGOProDevelop.Model
{
    using GalaSoft.MvvmLight;
    using System;
    using System.Collections.Generic;
    using YGOProDevelop.CardEditor.Config;
    using System.Linq;
    using System.Collections;

    public partial class datas : ObservableObject
    {
        public long id { get; set; }
        public Nullable<long> ot { get; set; }
        public Nullable<long> alias { get; set; }
        public Nullable<long> setcode { get; set; }
        public Nullable<long> type { get; set; }
        public Nullable<long> atk { get; set; }
        public Nullable<long> def { get; set; }
        public Nullable<long> level { get; set; }
        public Nullable<long> race { get; set; }
        public Nullable<long> attribute { get; set; }
        public Nullable<long> category { get; set; }

        public virtual texts texts { get; set; }


        //为了支持灵摆，要重写level
        public short Left {
            get {
                byte[] bytes = BitConverter.GetBytes(level ?? 0);
                short l = bytes[2];
                return l;
            }
            set {
                byte[] bytes = BitConverter.GetBytes(level ?? 0);
                bytes[2] = (byte)value;
                level = BitConverter.ToInt32(bytes, 0);
            }
        }

        public short Right {
            get {
                byte[] bytes = BitConverter.GetBytes(level ?? 0);
                short r = bytes[3];
                return r;
            }
            set {
                byte[] bytes = BitConverter.GetBytes(level ?? 0);
                bytes[3] = (byte)value;
                level = BitConverter.ToInt32(bytes, 0);
            }
        }

        public short Level {
            get {
                byte[] bytes = BitConverter.GetBytes(level ?? 0);
                short lv = BitConverter.ToInt16(bytes, 0);
                return lv;
            }
            set {
                byte[] bytes = BitConverter.GetBytes(level ?? 0);
                byte[] vbs = BitConverter.GetBytes(value);
                bytes[0] = vbs[0];
                bytes[1] = vbs[1];
                level = BitConverter.ToInt32(bytes, 0);
            }
        }

        public VarItem SetCode1 {
            get {
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                var setcode1 = BitConverter.ToInt16(bytes, 0);
                return SettingConfig.SetCodes.FirstOrDefault(v=>v.Value==setcode1);
            }
            set {
                var setcode1 = (short)value.Value;
                byte[] sbs = BitConverter.GetBytes(setcode1);
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                bytes[0] = sbs[0];
                bytes[1] = sbs[1];
                setcode = BitConverter.ToInt64(bytes.ToArray(),0);
            }

        }

        public VarItem SetCode2 {
            get {
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                var setcode2 = BitConverter.ToInt16(bytes, 2);
                return SettingConfig.SetCodes.FirstOrDefault(v => v.Value == setcode2);
            }
            set {
                var setcode2 = (short)value.Value;
                byte[] sbs = BitConverter.GetBytes(setcode2);
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                bytes[2] = sbs[0];
                bytes[3] = sbs[1];
                setcode = BitConverter.ToInt64(bytes.ToArray(), 0);
            }
        }



        public VarItem SetCode3 {
            get {
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                var setcode3 = BitConverter.ToInt16(bytes, 4);
                return SettingConfig.SetCodes.FirstOrDefault(v => v.Value == setcode3);
            }
            set {
                var setcode3 = (short)value.Value;
                byte[] sbs = BitConverter.GetBytes(setcode3);
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                bytes[4] = sbs[0];
                bytes[5] = sbs[1];
                setcode = BitConverter.ToInt64(bytes.ToArray(), 0);
            }

        }


        public VarItem SetCode4 {
            get {
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                var setcode4 = BitConverter.ToInt16(bytes, 6);
                return SettingConfig.SetCodes.FirstOrDefault(v => v.Value == setcode4);
            }
            set {
                var setcode4 = (short)value.Value;
                byte[] sbs = BitConverter.GetBytes(setcode4);
                byte[] bytes = BitConverter.GetBytes(setcode ?? 0);
                bytes[6] = sbs[0];
                bytes[7] = sbs[1];
                setcode = BitConverter.ToInt64(bytes.ToArray(), 0);
            }
        }


        public VarItem Ot {
            get {
                var item = SettingConfig.Ots.FirstOrDefault(v => v.Value == (ot ?? 0));
                return item;
            }
            set {
                ot = value.Value;
            }
        }



        public VarItem Attribute {
            get {
                return SettingConfig.Attributes.FirstOrDefault(v => v.Value == (attribute ?? 0));
            }
            set {
                attribute = value.Value;
            }
        }


        public List<VarItem> Type {
            get {
                return SettingConfig.Types.FindAll(v => v.BeContainedIn(type ?? 0));
            }

            set {
                type = VarItem.MergeValue(value);
            }
        }

        public VarItem SubType {
            get {
                List<VarItem> types = new List<VarItem>(Type);
                types.RemoveAll(v => v.BeContainedIn(7));
                return types.Count != 0 ? types[0] : VarItem.Default;
            }
        }

        public List<VarItem> Category {
            get {
                return SettingConfig.Categorys.FindAll(v => v.BeContainedIn(category ?? 0));
            }
            set {
                category = VarItem.MergeValue(value);
            }
        }

        public VarItem Race {
            get {
                return SettingConfig.Races.FirstOrDefault(v => v.Value == (race ?? 0)) ?? VarItem.Default;
            }
            set {
                race = value.Value;
            }
        }

        public CardType CardType {
            get {
                if(type != null) {
                    if(((int)type & 1) == 1)
                        return CardType.Monster;
                    else
                        return CardType.Spell;
                }
                return CardType.Monster;
            }
        }

        public datas Copy() {
            var copy = MemberwiseClone() as datas;
            copy.texts = texts.Copy();
            return copy;
        }
    }
}
