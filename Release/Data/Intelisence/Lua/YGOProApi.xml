<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ArrayOfCompletionItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<CompletionItem>
		<Content>aux.AddFusionProcCode2</Content>
		<Description>●void aux.AddFusionProcCode2(Card c, int code1, int code2, bool sub, bool insf)
为c指定卡号为code1和code2的怪兽为融合素材
sub表示能否使用融合代替素材，insf表示能否用简易融合召唤</Description>
		<Priority>0</Priority>
		<Text>aux.AddFusionProcCode2</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddFusionProcCode3</Content>
		<Description>●void aux.AddFusionProcCode3(Card c, int code1, int code2, int code3, bool sub, bool insf)
为c指定卡号为code1,code2,code3的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>aux.AddFusionProcCode3</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddFusionProcCode4</Content>
		<Description>●void aux.AddFusionProcCode4(Card c, int code1, int code2, int code3, int code4, bool sub, bool insf)
为c指定卡号为code1,code2,code3,code4的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>aux.AddFusionProcCode4</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddFusionProcCodeFun</Content>
		<Description>●void aux.AddFusionProcCodeFun(Card c, int code, function f, int cc, bool sub, bool insf)
为c指定卡号号为code和cc个满足条件f的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>aux.AddFusionProcCodeFun</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddFusionProcCodeRep</Content>
		<Description>●void aux.AddFusionProcCodeRep(Card c, int code, int cc, bool sub, bool insf)
为c指定cc个相同的怪兽为融合素材，code为卡号</Description>
		<Priority>0</Priority>
		<Text>aux.AddFusionProcCodeRep</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddFusionProcFun2</Content>
		<Description>●void aux.AddFusionProcFun2(Card c, function f1, function f2, bool insf)
为c指定满足条件f1与f2的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>aux.AddFusionProcFun2</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddFusionProcFunRep</Content>
		<Description>●void aux.AddFusionProcFunRep(Card c, function f, int cc, bool insf)
为c指定cc个满足相同条件f的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>aux.AddFusionProcFunRep</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddPendulumProcedure</Content>
		<Description>●void aux.AddPendulumProcedure(Card c)
为灵摆怪兽c添加灵摆召唤手续</Description>
		<Priority>0</Priority>
		<Text>aux.AddPendulumProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddRitualProcEqual</Content>
		<Description>●void aux.AddRitualProcEqual(Card c, function filter)
为c添加仪式召唤效果
filter为仪式怪兽满足的条件，素材的等级之和必须等于仪式怪兽的等级</Description>
		<Priority>0</Priority>
		<Text>aux.AddRitualProcEqual</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddRitualProcGreater</Content>
		<Description>●void aux.AddRitualProcGreater(Card c, function filter)
为c添加仪式召唤效果
filter为仪式怪兽满足的条件，素材的等级之和可以超过仪式怪兽的等级</Description>
		<Priority>0</Priority>
		<Text>aux.AddRitualProcGreater</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddSynchroProcedure</Content>
		<Description>●void aux.AddSynchroProcedure(Card c, function f1, function f2, int ct)
为c添加同调召唤手续
f1为调整满足的过滤条件，f2为调整以外满足的过滤条件（通常用aux.NonTuner）
调整以外的怪兽至少需要ct只</Description>
		<Priority>0</Priority>
		<Text>aux.AddSynchroProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddSynchroProcedure2</Content>
		<Description>●void aux.AddSynchroProcedure2(Card c, function f1, function f2)
为c添加同调召唤手续
f1为调整满足的过滤条件，f2为调整以外满足的过滤条件（通常用aux.NonTuner）
只能用1只调整以外的怪兽</Description>
		<Priority>0</Priority>
		<Text>aux.AddSynchroProcedure2</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.AddXyzProcedure</Content>
		<Description>●void aux.AddXyzProcedure(Card c, function f, int lv, int ct[, function alterf|nil, int desc|nil, int maxct=ct, function op|nil])
为c添加超量召唤手续
用满足条件f的等级为lv的ct-maxct只怪兽进行叠放
其余的参数用于在单个怪兽（通常是超量怪兽）上叠放
alterf为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（希望皇龙）</Description>
		<Priority>0</Priority>
		<Text>aux.AddXyzProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.BeginPuzzle</Content>
		<Description>●void aux.BeginPuzzle()
开始残局</Description>
		<Priority>0</Priority>
		<Text>aux.BeginPuzzle</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.DualNormalCondition</Content>
		<Description>●bool aux.DualNormalCondition(Effect e)
检查二重怪兽e:GetHandler()是否为被视为通常怪兽的状态</Description>
		<Priority>0</Priority>
		<Text>aux.DualNormalCondition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.EnableDualAttribute</Content>
		<Description>●void aux.EnableDualAttribute(Card c)
为c添加二重怪兽属性</Description>
		<Priority>0</Priority>
		<Text>aux.EnableDualAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.FilterBoolFunction</Content>
		<Description>●function aux.FilterBoolFunction(function f, a, b, c)
return	function(target)
			return f(target,a,b,c)
		end</Description>
		<Priority>0</Priority>
		<Text>aux.FilterBoolFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.FilterEqualFunction</Content>
		<Description>●function aux.FilterEqualFunction(function f, value, a, b, c)
return	function(target)
			return f(target,a,b,c)==value
		end</Description>
		<Priority>0</Priority>
		<Text>aux.FilterEqualFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.IsDualState</Content>
		<Description>●bool aux.IsDualState(Effect e)
检查二重怪兽e:GetHandler()是否是再度召唤状态
常用于二重怪兽再度召唤获得的效果e的Condition属性</Description>
		<Priority>0</Priority>
		<Text>aux.IsDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.IsNotDualState</Content>
		<Description>●bool aux.IsNotDualState(Effect e)
aux.IsDualState的反义</Description>
		<Priority>0</Priority>
		<Text>aux.IsNotDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.NonTuner</Content>
		<Description>●function aux.NonTuner(function f, a, b, c)
return	function(target)
			return target:IsNotTuner() and (not f or f(target,a,b,c))
		end</Description>
		<Priority>0</Priority>
		<Text>aux.NonTuner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.Stringid</Content>
		<Description>●int aux.Stringid(int code, int id)
用于索引卡号为code的卡片第id个（从0开始）效果提示</Description>
		<Priority>0</Priority>
		<Text>aux.Stringid</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.TargetBoolFunction</Content>
		<Description>●function aux.TargetBoolFunction(function f, a, b, c)
return	function(effect,target)
			return f(target,a,b,c)
		end</Description>
		<Priority>0</Priority>
		<Text>aux.TargetBoolFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>aux.TargetEqualFunction</Content>
		<Description>●function aux.TargetEqualFunction(function f, value, a, b, c)
return	function(effect,target)
			return f(target,a,b,c)==value
		end</Description>
		<Priority>0</Priority>
		<Text>aux.TargetEqualFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>bit.band</Content>
		<Description>●int bit.band(int a, int b)
a与b的位与</Description>
		<Priority>0</Priority>
		<Text>bit.band</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>bit.bor</Content>
		<Description>●int bit.bor(int a, int b)
a与b的位或</Description>
		<Priority>0</Priority>
		<Text>bit.bor</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>bit.bxor</Content>
		<Description>●int bit.bxor(int a, int b)
a与b的位异或</Description>
		<Priority>0</Priority>
		<Text>bit.bxor</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>bit.lshift</Content>
		<Description>●int bit.lshift(int a, int b)
a左移b</Description>
		<Priority>0</Priority>
		<Text>bit.lshift</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>bit.rshift</Content>
		<Description>●int bit.rshift(int a, int b)
a右移b</Description>
		<Priority>0</Priority>
		<Text>bit.rshift</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.AddCounter</Content>
		<Description>●bool Card.AddCounter(Card c, int countertype, int count)
为c放置count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>Card.AddCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.AddTrapMonsterAttribute</Content>
		<Description>●void Card.AddTrapMonsterAttribute(Card c, int extra_type, int attribute, int race, int level, int atk, int def)
为c添加陷阱怪兽属性，extra_type为额外的卡片类型
注：陷阱怪兽属性指的是同时作为怪兽和陷阱，并且额外使一个魔法陷阱的格子不能使用</Description>
		<Priority>0</Priority>
		<Text>Card.AddTrapMonsterAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.AssumeProperty</Content>
		<Description>●void Card.AssumeProperty(Card c,int assume_type, int assume_value)
把c的assume_type的数值当作assume_value使用（基因组斗士）
assume_type为以下类型
ASSUME_CODE         卡号
ASSUME_TYPE         类型
ASSUME_LEVEL        等级
ASSUME_RANK         阶级
ASSUME_ATTRIBUTE    属性
ASSUME_RACE         种族
ASSUME_ATTACK       攻击力
ASSUME_DEFENCE      守备力</Description>
		<Priority>0</Priority>
		<Text>Card.AssumeProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CancelCardTarget</Content>
		<Description>●void Card.CancelCardTarget(Card c1, Card c2)
取消c2为c1的永续对象</Description>
		<Priority>0</Priority>
		<Text>Card.CancelCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CancelToGrave</Content>
		<Description>●void Card.CancelToGrave(Card c[, bool cancel=true])
取消送墓确定状态，cancel=false则重新设置送墓确定状态
注：送墓确定状态指的是在场上发动的不留场的魔法和陷阱后，这些卡片的状态
送墓确定状态中的卡无法返回手牌和卡组，并且连锁结束时送去墓地
此函数的作用是取消此状态使其留场，用于光之护封剑和废铁稻草人等卡</Description>
		<Priority>0</Priority>
		<Text>Card.CancelToGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CheckActivateEffect</Content>
		<Description>●Effect[,Group,int,int,Effect,int,int] Card.CheckActivateEffect(Card c, bool neglect_con, bool neglect_cost, bool copy_info)
返回c的可以发动时机正确的“卡的发动”的效果，neglect_con=true则无视发动条件，neglect_cost=true则无视发动cost
copy_info=false或者自由时点的效果则只返回这个效果
否则还返回这个效果的时点为code的触发时点的信息 eg,ep,ev,re,r,rp</Description>
		<Priority>0</Priority>
		<Text>Card.CheckActivateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CheckEquipTarget</Content>
		<Description>●bool Card.CheckEquipTarget(Card c1, Card c2)
检查c2是否是c1的正确的装备对象</Description>
		<Priority>0</Priority>
		<Text>Card.CheckEquipTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CheckFusionMaterial</Content>
		<Description>●bool Card.CheckFusionMaterial(Card c[, Group g, Card gc|nil, int chkf=PLAYER_NONE])
检查g是否包含了c需要[必须包含gc在内]的一组融合素材</Description>
		<Priority>0</Priority>
		<Text>Card.CheckFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CheckRemoveOverlayCard</Content>
		<Description>●bool Card.CheckRemoveOverlayCard(Card c, int player, int count, int reason)
检查玩家player能否以reason为原因，至少移除c叠放的count张卡</Description>
		<Priority>0</Priority>
		<Text>Card.CheckRemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CheckUniqueOnField</Content>
		<Description>●bool Card.CheckUniqueOnField(Card c,int check_player)
检查c在check_player场上的唯一性</Description>
		<Priority>0</Priority>
		<Text>Card.CheckUniqueOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.ClearEffectRelation</Content>
		<Description>●void Card.ClearEffectRelation(Card c)
清空c所有联系的效果</Description>
		<Priority>0</Priority>
		<Text>Card.ClearEffectRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CompleteProcedure</Content>
		<Description>●void Card.CompleteProcedure(Card c)
使c完成正规的召唤手续</Description>
		<Priority>0</Priority>
		<Text>Card.CompleteProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CopyEffect</Content>
		<Description>●int Card.CopyEffect(Card c, int code, int reset_flag[, int reset_count])
为c添加卡号是code的卡的可复制的效果，并且添加额外的reset条件
返回值是表示复制效果的代号id</Description>
		<Priority>0</Priority>
		<Text>Card.CopyEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CreateEffectRelation</Content>
		<Description>●void Card.CreateEffectRelation(Card c, Effect e)
为卡片c和效果e建立联系</Description>
		<Priority>0</Priority>
		<Text>Card.CreateEffectRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.CreateRelation</Content>
		<Description>●void Card.CreateRelation(Card c1, Card c2, int reset_flag)
为c1建立于c2的联系此联系仅会由于RESET_EVENT的事件reset</Description>
		<Priority>0</Priority>
		<Text>Card.CreateRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.EnableCounterPermit</Content>
		<Description>●void Card.EnableCounterPermit(Card c, int countertype[, int location])
允许c[在位置location]放置那个需要“可以放置”才能放置的指示物countertype</Description>
		<Priority>0</Priority>
		<Text>Card.EnableCounterPermit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.EnableDualState</Content>
		<Description>●void Card.EnableDualState(Card c)
把c设置成再召唤状态</Description>
		<Priority>0</Priority>
		<Text>Card.EnableDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.EnableReviveLimit</Content>
		<Description>●void Card.EnableReviveLimit(Card c)
为c添加苏生限制</Description>
		<Priority>0</Priority>
		<Text>Card.EnableReviveLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetActivateEffect</Content>
		<Description>●Effect Card.GetActivateEffect(Card c)
返回c的“卡片发动”的效果，即类型为EFFECT_TYPE_ACTIVATE的效果
仅对魔法和陷阱有效</Description>
		<Priority>0</Priority>
		<Text>Card.GetActivateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetAttack</Content>
		<Description>●int Card.GetAttack(Card c)
返回c的当前攻击力，返回值是负数表示是"?"</Description>
		<Priority>0</Priority>
		<Text>Card.GetAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetAttackableTarget</Content>
		<Description>●Group,bool Card.GetAttackableTarget(Card c)
返回c可攻击的卡片组以及能否直接攻击</Description>
		<Priority>0</Priority>
		<Text>Card.GetAttackableTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetAttackAnnouncedCount</Content>
		<Description>●int Card.GetAttackAnnouncedCount(Card c)
返回c本回合攻击宣言的次数
注：攻击被无效不会被计入攻击过的次数，但是会计入攻击宣言的次数</Description>
		<Priority>0</Priority>
		<Text>Card.GetAttackAnnouncedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetAttackedCount</Content>
		<Description>●int Card.GetAttackedCount(Card c)
返回c本回合攻击过的次数
注：如果此值与上一个函数的返回值不同，那么说明此卡本回合进行过直接攻击</Description>
		<Priority>0</Priority>
		<Text>Card.GetAttackedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetAttackedGroup</Content>
		<Description>●Group Card.GetAttackedGroup(Card c)
返回c本回合攻击过的卡片组</Description>
		<Priority>0</Priority>
		<Text>Card.GetAttackedGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetAttackedGroupCount</Content>
		<Description>●int Card.GetAttackedGroupCount(Card c)
返回c本回合攻击过的卡片数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetAttackedGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetAttribute</Content>
		<Description>●int Card.GetAttribute(Card c)
返回c的当前属性
注：对某些多属性怪兽如光与暗之龙，此函数的返回值可能是几个属性的组合值</Description>
		<Priority>0</Priority>
		<Text>Card.GetAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetBaseAttack</Content>
		<Description>●int Card.GetBaseAttack(Card c)
返回c的原本攻击力</Description>
		<Priority>0</Priority>
		<Text>Card.GetBaseAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetBaseDefence</Content>
		<Description>●int Card.GetBaseDefence(Card c)
返回c的原本守备力</Description>
		<Priority>0</Priority>
		<Text>Card.GetBaseDefence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetBattledGroup</Content>
		<Description>●Group Card.GetBattledGroup(Card c)
返回与c本回合进行过战斗的卡片组
进行过战斗指发生过伤害的计算，用于剑斗兽等卡的判定</Description>
		<Priority>0</Priority>
		<Text>Card.GetBattledGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetBattledGroupCount</Content>
		<Description>●int Card.GetBattledGroupCount(Card c)
返回与c本回合进行过战斗的的卡片数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetBattledGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetBattlePosition</Content>
		<Description>●int Card.GetBattlePosition(Card c)
返回c在本次战斗发生之前的表示形式</Description>
		<Priority>0</Priority>
		<Text>Card.GetBattlePosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetBattleTarget</Content>
		<Description>●Card Card.GetBattleTarget(Card c)
返回与c进行战斗的卡</Description>
		<Priority>0</Priority>
		<Text>Card.GetBattleTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetCardTarget</Content>
		<Description>●Group Card.GetCardTarget(Card c)
返回c当前所有的永续对象</Description>
		<Priority>0</Priority>
		<Text>Card.GetCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetCardTargetCount</Content>
		<Description>●int Card.GetCardTargetCount(Card c)
返回c当前的永续对象的数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetCardTargetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetCode</Content>
		<Description>●int Card.GetCode(Card c)
返回c的当前代号（可能因为效果改变）</Description>
		<Priority>0</Priority>
		<Text>Card.GetCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetControler</Content>
		<Description>●int Card.GetControler(Card c)
返回c的当前控制者</Description>
		<Priority>0</Priority>
		<Text>Card.GetControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetCounter</Content>
		<Description>●int Card.GetCounter(Card c, int countertype)
返回c上的countertype类型的指示物的数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetDefence</Content>
		<Description>●int Card.GetDefence(Card c)
返回c的当前守备力，返回值是负数表示是"?"</Description>
		<Priority>0</Priority>
		<Text>Card.GetDefence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetDestination</Content>
		<Description>●int Card.GetDestination(Card c)
返回c位置变化的目的地
此函数仅在处理位置转移代替效果时有效</Description>
		<Priority>0</Priority>
		<Text>Card.GetDestination</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetEffectCount</Content>
		<Description>●int Card.GetEffectCount(Card c, int code)
返回c受到影响的种类是code的效果的数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetEffectCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetEquipCount</Content>
		<Description>●int Card.GetEquipCount(Card c)
返回c当前装备着的卡片数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetEquipCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetEquipGroup</Content>
		<Description>●Group Card.GetEquipGroup(Card c)
返回c当前装备着的卡片组</Description>
		<Priority>0</Priority>
		<Text>Card.GetEquipGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetEquipTarget</Content>
		<Description>●Card Card.GetEquipTarget(Card c)
返回c当前的装备对象</Description>
		<Priority>0</Priority>
		<Text>Card.GetEquipTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetFieldID</Content>
		<Description>●int Card.GetFieldID(Card c)
返回c转移到当前位置的时间标识
此数值唯一，越小表示c是越早出现在那个位置
卡片从里侧翻开也会改变此数值</Description>
		<Priority>0</Priority>
		<Text>Card.GetFieldID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetFirstCardTarget</Content>
		<Description>●Card Card.GetFirstCardTarget(Card c)
返回c当前第一个永续对象</Description>
		<Priority>0</Priority>
		<Text>Card.GetFirstCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetFlagEffect</Content>
		<Description>●int Card.GetFlagEffect(Card c, int code)
返回c的种类是code的标识效果的数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetFlagEffectLabel</Content>
		<Description>●int Card.GetFlagEffectLabel(Card c, int code)
返回c的种类为code的标识效果的Label，没有此效果则返回nil</Description>
		<Priority>0</Priority>
		<Text>Card.GetFlagEffectLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetLeaveFieldDest</Content>
		<Description>●int Card.GetLeaveFieldDest(Card c)
返回c离场时因改变去向的效果（如大宇宙）的目的地</Description>
		<Priority>0</Priority>
		<Text>Card.GetLeaveFieldDest</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetLeftScale</Content>
		<Description>●int Card.GetLeftScale(Card c)
返回c的左灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>Card.GetLeftScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetLevel</Content>
		<Description>●int Card.GetLevel(Card c)
返回c的当前等级</Description>
		<Priority>0</Priority>
		<Text>Card.GetLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetLocation</Content>
		<Description>●int Card.GetLocation(Card c)
返回c当前的所在位置</Description>
		<Priority>0</Priority>
		<Text>Card.GetLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetMaterial</Content>
		<Description>●Group Card.GetMaterial(Card c)
返回c出场使用的素材</Description>
		<Priority>0</Priority>
		<Text>Card.GetMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetMaterialCount</Content>
		<Description>●int Card.GetMaterialCount(Card c)
返回c出场使用的素材数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetMaterialCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalAttribute</Content>
		<Description>●int Card.GetOriginalAttribute(Card c)
返回c的卡片记载的属性</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalCode</Content>
		<Description>●int Card.GetOriginalCode(Card c)
返回c的卡片记载的代号</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalLeftScale</Content>
		<Description>●int Card.GetOriginalLeftScale(Card c)
返回c的原本的左灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalLeftScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalLevel</Content>
		<Description>●int Card.GetOriginalLevel(Card c)
返回c的卡片记载的等级</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalRace</Content>
		<Description>●int Card.GetOriginalRace(Card c)
返回c的卡片记载的种族</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalRank</Content>
		<Description>●int Card.GetOriginalRank(Card c)
返回c的卡片记载的阶级</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalRank</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalRightScale</Content>
		<Description>●int Card.GetOriginalRightScale(Card c)
返回c的原本的右灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalRightScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOriginalType</Content>
		<Description>●int Card.GetOriginalType(Card c)
返回c的卡片记载的类型</Description>
		<Priority>0</Priority>
		<Text>Card.GetOriginalType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOverlayCount</Content>
		<Description>●int Card.GetOverlayCount(Card c)
返回c当前叠放着的卡片数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetOverlayCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOverlayGroup</Content>
		<Description>●Group Card.GetOverlayGroup(Card c)
返回c当前叠放着的卡片组</Description>
		<Priority>0</Priority>
		<Text>Card.GetOverlayGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOverlayTarget</Content>
		<Description>●Card Card.GetOverlayTarget(Card c)
返回以c为超量素材的卡</Description>
		<Priority>0</Priority>
		<Text>Card.GetOverlayTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOwner</Content>
		<Description>●int Card.GetOwner(Card c)
返回c的持有者</Description>
		<Priority>0</Priority>
		<Text>Card.GetOwner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOwnerTarget</Content>
		<Description>●Group Card.GetOwnerTarget(Card c)
返回取c作为永续对象的所有卡</Description>
		<Priority>0</Priority>
		<Text>Card.GetOwnerTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetOwnerTargetCount</Content>
		<Description>●int Card.GetOwnerTargetCount(Card c)
返回取c作为永续对象的卡的数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetOwnerTargetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPosition</Content>
		<Description>●int Card.GetPosition(Card c)
返回c当前的表示形式</Description>
		<Priority>0</Priority>
		<Text>Card.GetPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousAttackOnField</Content>
		<Description>●int Card.GetPreviousAttackOnField(Card c)
返回c位置变化之前的攻击力</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousAttackOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousAttributeOnField</Content>
		<Description>●int Card.GetPreviousAttributeOnField(Card c)
返回c位置变化之前的属性</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousAttributeOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousCodeOnField</Content>
		<Description>●int Card.GetPreviousCodeOnField(Card c)
返回c位置变化之前的卡号</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousCodeOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousControler</Content>
		<Description>●int Card.GetPreviousControler(Card c)
返回c的位置变化之前的控制者</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousDefenceOnField</Content>
		<Description>●int Card.GetPreviousDefenceOnField(Card c)
返回c位置变化之前的守备力</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousDefenceOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousEquipTarget</Content>
		<Description>●Card Card.GetPreviousEquipTarget(Card c)
返回c之前的装备对象</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousEquipTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousLevelOnField</Content>
		<Description>●int Card.GetPreviousLevelOnField(Card c)
返回c位置变化之前的等级</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousLevelOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousLocation</Content>
		<Description>●int Card.GetPreviousLocation(Card c)
返回c位置变化前的所在的位置</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousPosition</Content>
		<Description>●int Card.GetPreviousPosition(Card c)
返回c位置变化前的表示形式</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousRaceOnField</Content>
		<Description>●int Card.GetPreviousRaceOnField(Card c)
返回c位置变化之前的种族</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousRaceOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousRankOnField</Content>
		<Description>●int Card.GetPreviousRankOnField(Card c)
返回c位置变化之前的阶级</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousRankOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousSequence</Content>
		<Description>●int Card.GetPreviousSequence(Card c)
返回c位置变化前的序号</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousSequence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetPreviousTypeOnField</Content>
		<Description>●int Card.GetPreviousTypeOnField(Card c)
返回c位置变化之前的类型</Description>
		<Priority>0</Priority>
		<Text>Card.GetPreviousTypeOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetRace</Content>
		<Description>●int Card.GetRace(Card c)
返回c的当前种族
注：对某些多种族怪兽如动画效果的魔术猿，此函数的返回值可能是几个种族的组合值</Description>
		<Priority>0</Priority>
		<Text>Card.GetRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetRank</Content>
		<Description>●int Card.GetRank(Card c)
返回c的当前阶级</Description>
		<Priority>0</Priority>
		<Text>Card.GetRank</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetRealFieldID</Content>
		<Description>●int Card.GetRealFieldID(Card c)
返回c转移到当前位置的真实的时间标识
卡片从里侧翻开不会改变此数值</Description>
		<Priority>0</Priority>
		<Text>Card.GetRealFieldID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetReason</Content>
		<Description>●int Card.GetReason(Card c)
返回c的位置变化原因</Description>
		<Priority>0</Priority>
		<Text>Card.GetReason</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetReasonCard</Content>
		<Description>●Card Card.GetReasonCard(Card c)
返回导致c的位置变化的卡
此函数仅在某卡被战斗破坏时，因为上级召唤被解放，或者成为特殊召唤使用的素材时有效</Description>
		<Priority>0</Priority>
		<Text>Card.GetReasonCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetReasonEffect</Content>
		<Description>●Effect Card.GetReasonEffect(Card c)
返回导致c的位置变化的效果</Description>
		<Priority>0</Priority>
		<Text>Card.GetReasonEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetReasonPlayer</Content>
		<Description>●int Card.GetReasonPlayer(Card c)
返回导致c的位置变化的玩家</Description>
		<Priority>0</Priority>
		<Text>Card.GetReasonPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetRightScale</Content>
		<Description>●int Card.GetRightScale(Card c)
返回c的右灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>Card.GetRightScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetRitualLevel</Content>
		<Description>●int Card.GetRitualLevel(Card c, Card rc)
返回c的对于仪式怪兽rc仪式解放等级
此函数除了某些特定卡如仪式供物，返回值与Card.GetLevel(c)相同</Description>
		<Priority>0</Priority>
		<Text>Card.GetRitualLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetSequence</Content>
		<Description>●int Card.GetSequence(Card c)
返回c在当前位置的序号
在场上时，序号代表所在的格子，从左往右分别是0-4，场地魔法格的序号为5，左右灵摆区域为6-7
在其它地方时，序号表示的是第几张卡，最下面的卡的序号为0</Description>
		<Priority>0</Priority>
		<Text>Card.GetSequence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetSummonLocation</Content>
		<Description>●int Card.GetSummonLocation(Card c)
返回c的召唤位置</Description>
		<Priority>0</Priority>
		<Text>Card.GetSummonLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetSummonPlayer</Content>
		<Description>●int Card.GetSummonPlayer(Card c)
返回召唤/特殊召唤c上场的玩家</Description>
		<Priority>0</Priority>
		<Text>Card.GetSummonPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetSummonType</Content>
		<Description>●int Card.GetSummonType(Card c)
返回c的召唤/特殊召唤的方式</Description>
		<Priority>0</Priority>
		<Text>Card.GetSummonType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetSynchroLevel</Content>
		<Description>●int Card.GetSynchroLevel(Card c, Card sc)
返回c的对于同调怪兽sc的同调用等级
此函数除了某些特定卡如调节支援士，返回值与Card.GetLevel(c)相同</Description>
		<Priority>0</Priority>
		<Text>Card.GetSynchroLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetTextAttack</Content>
		<Description>●int Card.GetTextAttack(Card c)
返回c的卡片记载的攻击力</Description>
		<Priority>0</Priority>
		<Text>Card.GetTextAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetTextDefence</Content>
		<Description>●int Card.GetTextDefence(Card c)
返回c的卡片记载的守备力</Description>
		<Priority>0</Priority>
		<Text>Card.GetTextDefence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetTributeRequirement</Content>
		<Description>●int,int Card.GetTributeRequirement(Card c)
返回通常召唤c所需要的祭品的最小和最大数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetTributeRequirement</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetTurnCounter</Content>
		<Description>●int Card.GetTurnCounter(Card c)
返回c的回合计数器</Description>
		<Priority>0</Priority>
		<Text>Card.GetTurnCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetTurnID</Content>
		<Description>●int Card.GetTurnID(Card c)
返回c转移到当前位置的回合</Description>
		<Priority>0</Priority>
		<Text>Card.GetTurnID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetType</Content>
		<Description>●int Card.GetType(Card c)
返回c的当前类型</Description>
		<Priority>0</Priority>
		<Text>Card.GetType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.GetUnionCount</Content>
		<Description>●int Card.GetUnionCount(Card c)
返回c当前装备的同盟卡数量</Description>
		<Priority>0</Priority>
		<Text>Card.GetUnionCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToChangeControler</Content>
		<Description>●bool Card.IsAbleToChangeControler(Card c)
检查c是否可以改变控制权
注：仅当卡收到了“不能改变控制权”的效果的影响时，此函数返回false</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToChangeControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToDeck</Content>
		<Description>●bool Card.IsAbleToDeck(Card c)
检查c是否可以送去卡组</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToDeckAsCost</Content>
		<Description>●bool Card.IsAbleToDeckAsCost(Card c)
检查c是否可以作为cost送去卡组</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToDeckAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToDeckOrExtraAsCost</Content>
		<Description>●bool Card.IsAbleToDeckOrExtraAsCost(Card c)
检查c是否可以作为cost送去卡组或额外卡组（用于新宇侠、剑斗兽融合怪兽的召唤手续检测）</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToDeckOrExtraAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToExtra</Content>
		<Description>●bool Card.IsAbleToExtra(Card c)
检查c是否可以送去额外卡组
对于非融合，同调，超量卡此函数均返回false</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToExtra</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToExtraAsCost</Content>
		<Description>●bool Card.IsAbleToExtraAsCost(Card c)
检查c是否可以作为cost送去额外卡组</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToExtraAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToGrave</Content>
		<Description>●bool Card.IsAbleToGrave(Card c)
检查c是否可以送去墓地</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToGraveAsCost</Content>
		<Description>●bool Card.IsAbleToGraveAsCost(Card c)
检查c是否可以作为cost送去墓地</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToGraveAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToHand</Content>
		<Description>●bool Card.IsAbleToHand(Card c)
检查c是否可以送去手牌
注：仅当卡片或者玩家受到“不能加入手牌”的效果的影响时（如雷王）此函数才返回false</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToHandAsCost</Content>
		<Description>●bool Card.IsAbleToHandAsCost(Card c)
检查c是否可以作为cost送去手牌
注：此函数会在Card.IsAbleToHand的基础上追加检测c的实际目的地
当c送往手牌会被送去其它地方时（如缩退回路适用中，或者c是融合，同调和超量怪的一种），此函数返回false</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToHandAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToRemove</Content>
		<Description>●bool Card.IsAbleToRemove(Card c[, int player])
检查c是否可以被玩家player除外</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToRemove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAbleToRemoveAsCost</Content>
		<Description>●bool Card.IsAbleToRemoveAsCost(Card c)
检查c是否可以作为cost除外</Description>
		<Priority>0</Priority>
		<Text>Card.IsAbleToRemoveAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAttackable</Content>
		<Description>●bool Card.IsAttackable(Card c)
检查c是否可以攻击</Description>
		<Priority>0</Priority>
		<Text>Card.IsAttackable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAttackAbove</Content>
		<Description>●bool Card.IsAttackAbove(Card c, int atk)
检查c是否是攻击力atk以上</Description>
		<Priority>0</Priority>
		<Text>Card.IsAttackAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAttackBelow</Content>
		<Description>●bool Card.IsAttackBelow(Card c, int atk)
检查c是否是攻击力atk以下（至少为0）</Description>
		<Priority>0</Priority>
		<Text>Card.IsAttackBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAttackPos</Content>
		<Description>●bool Card.IsAttackPos(Card c)
检查c是否是攻击表示</Description>
		<Priority>0</Priority>
		<Text>Card.IsAttackPos</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsAttribute</Content>
		<Description>●bool Card.IsAttribute(Card c, int attribute)
检查c是否属于属性attribute</Description>
		<Priority>0</Priority>
		<Text>Card.IsAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanAddCounter</Content>
		<Description>●bool Card.IsCanAddCounter(Card c, int countertype, int count)
检查c是否可以放置count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanAddCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanBeBattleTarget</Content>
		<Description>●bool Card.IsCanBeBattleTarget(Card c1, Card c2)
检查c1是否可以成为c2的攻击目标</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanBeBattleTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanBeEffectTarget</Content>
		<Description>●bool Card.IsCanBeEffectTarget(Card c, Effect e)
检查c是否可以成为效果e的对象</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanBeEffectTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanBeFusionMaterial</Content>
		<Description>●bool Card.IsCanBeFusionMaterial(Card c[, bool ignore_mon=false])
检查c是否可以成为融合素材，ignore_mon=true则不检查c是否是怪兽</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanBeFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanBeSpecialSummoned</Content>
		<Description>●bool Card.IsCanBeSpecialSummoned(Card c, Effect e, int sumtype, int sumplayer, bool nocheck, bool nolimit[, int sumpos=POS_FACEUP, int target_player=sumplayer])
检查c是否可以被玩家sumplayer用效果e以sumtype方式和sumpos表示形式特殊召唤到target_player场上
如果nocheck是true则不检查c的召唤条件，如果nolimit是true则不检查c的苏生限制</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanBeSpecialSummoned</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanBeSynchroMaterial</Content>
		<Description>●bool Card.IsCanBeSynchroMaterial(Card c[, Card sc, Card tuner])
检查c是否可以成为同调怪兽sc的同调素材</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanBeSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanBeXyzMaterial</Content>
		<Description>●bool Card.IsCanBeXyzMaterial(Card c, Card sc|nil)
检查c是否可以成为超量怪兽sc的超量素材</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanBeXyzMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanRemoveCounter</Content>
		<Description>●bool Card.IsCanRemoveCounter(Card c, int player, int countertype, int count, int reason)
检查玩家player是否可以以原因reason移除c上的count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanRemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCanTurnSet</Content>
		<Description>●bool Card.IsCanTurnSet(Card c)
检查c是否可以转成里侧表示</Description>
		<Priority>0</Priority>
		<Text>Card.IsCanTurnSet</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsChainAttackable</Content>
		<Description>●bool Card.IsChainAttackable(Card c[, int ac = 2, bool monsteronly = false])
检查c是否可以连续攻击，c的攻击宣言次数&gt;=ac则返回false
注：当c因为闪光之双剑等效果进行过多次攻击之后此函数返回false</Description>
		<Priority>0</Priority>
		<Text>Card.IsChainAttackable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsCode</Content>
		<Description>●bool Card.IsCode(Card c, int code)
检查c的卡号是否是code</Description>
		<Priority>0</Priority>
		<Text>Card.IsCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsControler</Content>
		<Description>●bool Card.IsControler(Card c, int controler)
检查c的当前控制着是否是controler</Description>
		<Priority>0</Priority>
		<Text>Card.IsControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsControlerCanBeChanged</Content>
		<Description>●bool Card.IsControlerCanBeChanged(Card c)
检查c的控制权是否可以改变
注：此函数会在Card.IsAbleToChangeControler的基础上追加检测场上的空格位</Description>
		<Priority>0</Priority>
		<Text>Card.IsControlerCanBeChanged</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDefenceAbove</Content>
		<Description>●bool Card.IsDefenceAbove(Card c, int def)
检查c是否是守备力def以上</Description>
		<Priority>0</Priority>
		<Text>Card.IsDefenceAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDefenceBelow</Content>
		<Description>●bool Card.IsDefenceBelow(Card c, int def)
检查c是否是守备力def以下（至少为0）</Description>
		<Priority>0</Priority>
		<Text>Card.IsDefenceBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDefencePos</Content>
		<Description>●bool Card.IsDefencePos(Card c)
检查c是否是守备表示</Description>
		<Priority>0</Priority>
		<Text>Card.IsDefencePos</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDestructable</Content>
		<Description>●bool Card.IsDestructable(Card c[, Effect e])
检查c是否是可破坏的
注：不可破坏指的是类似场地护罩，宫廷的规矩等“破壊できない”的效果</Description>
		<Priority>0</Priority>
		<Text>Card.IsDestructable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDirectAttacked</Content>
		<Description>●bool Card.IsDirectAttacked(Card c)
检查c是否直接攻击过</Description>
		<Priority>0</Priority>
		<Text>Card.IsDirectAttacked</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDisabled</Content>
		<Description>●bool Card.IsDisabled(Card c)
检查c是否处于无效状态</Description>
		<Priority>0</Priority>
		<Text>Card.IsDisabled</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDiscardable</Content>
		<Description>●bool Card.IsDiscardable(Card[, int reason=REASON_COST])
检查c是否可以丢弃
注：此函数仅用于检测，
以REASON_DISCARD作为原因把一张手卡送墓并不会导致那张卡不能丢弃</Description>
		<Priority>0</Priority>
		<Text>Card.IsDiscardable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsDualState</Content>
		<Description>●bool Card.IsDualState(Card c)
检查c属否处于再召唤状态</Description>
		<Priority>0</Priority>
		<Text>Card.IsDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsFacedown</Content>
		<Description>●bool Card.IsFacedown(Card c)
检查c是否是里侧表示</Description>
		<Priority>0</Priority>
		<Text>Card.IsFacedown</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsFaceup</Content>
		<Description>●bool Card.IsFaceup(Card c)
检查c是否是表侧表示</Description>
		<Priority>0</Priority>
		<Text>Card.IsFaceup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsForbidden</Content>
		<Description>●bool Card.IsForbidden(Card c)
检查c是否处于被宣言禁止状态</Description>
		<Priority>0</Priority>
		<Text>Card.IsForbidden</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsHasCardTarget</Content>
		<Description>●bool Card.IsHasCardTarget(Card c1, Card c2)
检查c1是否取c2为永续对象</Description>
		<Priority>0</Priority>
		<Text>Card.IsHasCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsHasEffect</Content>
		<Description>●bool Card.IsHasEffect(Card c, int code)
检查c是否受到效果种类是code的效果的影响</Description>
		<Priority>0</Priority>
		<Text>Card.IsHasEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsImmuneToEffect</Content>
		<Description>●bool Card.IsImmuneToEffect(Card c, Effect e)
检查c是否免疫效果e（即不受效果e的影响）</Description>
		<Priority>0</Priority>
		<Text>Card.IsImmuneToEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsLevelAbove</Content>
		<Description>●bool Card.IsLevelAbove(Card c, int level)
检查c是否是等级level以上</Description>
		<Priority>0</Priority>
		<Text>Card.IsLevelAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsLevelBelow</Content>
		<Description>●bool Card.IsLevelBelow(Card c, int level)
检查c是否是等级level以下（至少为1）</Description>
		<Priority>0</Priority>
		<Text>Card.IsLevelBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsLocation</Content>
		<Description>●bool Card.IsLocation(Card c, int location)
检查c当前位置是否是location
注：当怪兽召唤，反转召唤，特殊召唤时召唤成功之前，
并且location=LOCATION_MZONE时，此函数返回false</Description>
		<Priority>0</Priority>
		<Text>Card.IsLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsMSetable</Content>
		<Description>●bool Card.IsMSetable(Card, bool ignore_count, Effect e|nil[, int minc=0])
检查c是否可进行通常召唤的set，ignore_count=true则不检查召唤次数限制
e~=nil则检查c是否可以以效果e进行通常召唤的set，minc表示至少需要的祭品数（用于区分妥协召唤set与上级召唤set）</Description>
		<Priority>0</Priority>
		<Text>Card.IsMSetable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsNotTuner</Content>
		<Description>●bool Card.IsNotTuner(Card c)
检查c是否可以当成非调整来使用</Description>
		<Priority>0</Priority>
		<Text>Card.IsNotTuner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsOnField</Content>
		<Description>●bool Card.IsOnField(Card c)
检查c是否在场
注：当怪兽召唤，反转召唤，特殊召唤时召唤成功之前，此函数返回false</Description>
		<Priority>0</Priority>
		<Text>Card.IsOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsPosition</Content>
		<Description>●bool Card.IsPosition(Card c, int pos)
检查c是否是表示形式pos</Description>
		<Priority>0</Priority>
		<Text>Card.IsPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsPreviousLocation</Content>
		<Description>●bool Card.IsPreviousLocation(Card c, int location)
检查c之前的位置是否是location</Description>
		<Priority>0</Priority>
		<Text>Card.IsPreviousLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsPreviousPosition</Content>
		<Description>●bool Card.IsPreviousPosition(Card c, int pos)
检查c位置变化之前是否是表示形式pos</Description>
		<Priority>0</Priority>
		<Text>Card.IsPreviousPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsPublic</Content>
		<Description>●bool Card.IsPublic(Card c)
检查c是否处于公开状态</Description>
		<Priority>0</Priority>
		<Text>Card.IsPublic</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsRace</Content>
		<Description>●bool Card.IsRace(Card c, int race)
检查c是否属于种族race</Description>
		<Priority>0</Priority>
		<Text>Card.IsRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsRankAbove</Content>
		<Description>●bool Card.IsRankAbove(Card c, int rank)
检查c是否是阶级rank以上</Description>
		<Priority>0</Priority>
		<Text>Card.IsRankAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsRankBelow</Content>
		<Description>●bool Card.IsRankBelow(Card c, int rank)
检查c是否是阶级rank以下（至少为1）</Description>
		<Priority>0</Priority>
		<Text>Card.IsRankBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsReason</Content>
		<Description>●bool Card.IsReason(Card c, int reason)
检查c是否包含原因reason</Description>
		<Priority>0</Priority>
		<Text>Card.IsReason</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsRelateToBattle</Content>
		<Description>●bool Card.IsRelateToBattle(Card c)
检查c是否和本次战斗关联
注：此效果通常用于伤害计算后伤害阶段结束前，用于检查战斗的卡是否离场过</Description>
		<Priority>0</Priority>
		<Text>Card.IsRelateToBattle</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsRelateToCard</Content>
		<Description>●bool Card.IsRelateToCard(Card c1, Card c2)
检查c1是否和c2有联系</Description>
		<Priority>0</Priority>
		<Text>Card.IsRelateToCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsRelateToEffect</Content>
		<Description>●bool Card.IsRelateToEffect(Card c, Effect e)
检查c是否和效果e有联系
注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象
（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）
会自动与那个效果建立联系，一旦离场，联系会重置</Description>
		<Priority>0</Priority>
		<Text>Card.IsRelateToEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsReleasable</Content>
		<Description>●bool Card.IsReleasable(Card c)
检查c是否可以被解放（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>Card.IsReleasable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsReleasableByEffect</Content>
		<Description>●bool Card.IsReleasableByEffect(Card c)
检查c是否可以被效果解放</Description>
		<Priority>0</Priority>
		<Text>Card.IsReleasableByEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsSetCard</Content>
		<Description>●bool Card.IsSetCard(Card c, int setname)
检查c是否是名字含有setname的卡</Description>
		<Priority>0</Priority>
		<Text>Card.IsSetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsSpecialSummonable</Content>
		<Description>●bool Card.IsSpecialSummonable(Card c)
检查是否可以对c进行特殊召唤手续</Description>
		<Priority>0</Priority>
		<Text>Card.IsSpecialSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsSSetable</Content>
		<Description>●bool Card.IsSSetable(Card c[, bool ignore_field=false])
检查c是否可以set到魔法陷阱区，ignore_field=true则无视魔陷区格子限制</Description>
		<Priority>0</Priority>
		<Text>Card.IsSSetable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsStatus</Content>
		<Description>●bool Card.IsStatus(Card c, int status)
检查c是否包含某个状态码</Description>
		<Priority>0</Priority>
		<Text>Card.IsStatus</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsSummonable</Content>
		<Description>●bool Card.IsSummonable(Card c, bool ignore_count, Effect e|nil[, int minc=0])
检查c是否进行通常召唤（不包含通常召唤的set)，ignore_count=true则不检查召唤次数限制
e~=nil则检查c是否可以以效果e进行通常召唤，minc表示至少需要的祭品数（用于区分妥协召唤与上级召唤）</Description>
		<Priority>0</Priority>
		<Text>Card.IsSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsSummonableCard</Content>
		<Description>●bool Card.IsSummonableCard(Card c)
检查c是否是可通常召唤的卡</Description>
		<Priority>0</Priority>
		<Text>Card.IsSummonableCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsSynchroSummonable</Content>
		<Description>●bool Card.IsSynchroSummonable(Card c ,Card tuner|nil[, Group mg])
检查是否可以以tuner作为调整，场上的卡[或mg]为同调素材对c进行同调召唤手续
如果tuner是nil，此函数与Card.IsSpecialSummonable作用相同</Description>
		<Priority>0</Priority>
		<Text>Card.IsSynchroSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsType</Content>
		<Description>●bool Card.IsType(Card c, int type)
检查c是否属于类型type</Description>
		<Priority>0</Priority>
		<Text>Card.IsType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsXyzLevel</Content>
		<Description>●bool Card.IsXyzLevel(Card c, Card xyzc, int lv)
检查c对于超量怪兽xyzc的超量用等级是否是lv</Description>
		<Priority>0</Priority>
		<Text>Card.IsXyzLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.IsXyzSummonable</Content>
		<Description>●bool Card.IsXyzSummonable(Card c, Group mg|nil)
检查是否可以以mg为超量素材对c进行超量召唤手续
如果mg为nil，此函数与Card.IsSpecialSummonable作用相同</Description>
		<Priority>0</Priority>
		<Text>Card.IsXyzSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.RegisterEffect</Content>
		<Description>●int Card.RegisterEffect(Card c, Effect e[, bool forced=false])
把效果e注册给c，返回效果的全局id，并设置e的Handler为c
默认情况下注册时如果c带有免疫e的效果那么注册会失败
如果forced为true则不会检查c对e的免疫效果</Description>
		<Priority>0</Priority>
		<Text>Card.RegisterEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.RegisterFlagEffect</Content>
		<Description>●Effect Card.RegisterFlagEffect(Card c, int code, int reset_flag, int property, int reset_count[, int label, int desc])
为c注册一个标识用效果
注：注册给卡的标识用效果不会用于系统，
即使code与内置效果code重合也不会影响，
并且类型总是EFFECT_TYPE_SINGLE，reset方法，property和一般的效果相同，
并且不会无效化，不受卡的免疫效果影响</Description>
		<Priority>0</Priority>
		<Text>Card.RegisterFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.ReleaseEffectRelation</Content>
		<Description>●void Card.ReleaseEffectRelation(Card c,Effect e)
手动释放c与效果e的联系</Description>
		<Priority>0</Priority>
		<Text>Card.ReleaseEffectRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.ReleaseRelation</Content>
		<Description>●void Card.ReleaseRelation(Card c1, Card c2)
手动释放c1对于c2的联系</Description>
		<Priority>0</Priority>
		<Text>Card.ReleaseRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.RemoveCounter</Content>
		<Description>●void Card.RemoveCounter(Card c, int player, int countertype, int count, int reason)
让玩家player以原因reason移除c上的count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>Card.RemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.RemoveOverlayCard</Content>
		<Description>●bool Card.RemoveOverlayCard(Card c, int player, int min, int max, int reason)
以reason为原因，让玩家player移除c叠放的min-max张卡，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>Card.RemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.ResetEffect</Content>
		<Description>●void Card.ResetEffect(Card c, int id, int reset_type)
以重置类型为reset_type、重置种类为id手动重置c受到的效果的影响
重置类型只能是以下类型，对应的重置种类为
RESET_EVENT       发生事件重置        id为事件
RESET_PHASE       阶段结束重置        id为阶段
RESET_CODE        重置指定code的效果  id为效果的种类code，只能重置EFFECT_TYPE_SINGLE的永续型效果
RESET_COPY        重置复制的效果      id为copy_id
RESET_CARD        重置卡片的效果      id为效果owner的卡号</Description>
		<Priority>0</Priority>
		<Text>Card.ResetEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.ResetFlagEffect</Content>
		<Description>●void Card.ResetFlagEffect(Card c, int code)
手动清除c的种类是code的标识效果</Description>
		<Priority>0</Priority>
		<Text>Card.ResetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.ResetNegateEffect</Content>
		<Description>●void Card.ResetNegateEffect(Card c[, int code1,...])
重置c受到的卡号为code1, code2...的卡片的效果的影响</Description>
		<Priority>0</Priority>
		<Text>Card.ResetNegateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.ReverseInDeck</Content>
		<Description>●void Card.ReverseInDeck(Card c)
设置c在卡组中正面表示</Description>
		<Priority>0</Priority>
		<Text>Card.ReverseInDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetCardTarget</Content>
		<Description>●void Card.SetCardTarget(Card c1, Card c2)
把c2作为c1的永续对象
c1和c2的联系会在c1或c2任意一卡离场或变成里侧表示时reset</Description>
		<Priority>0</Priority>
		<Text>Card.SetCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetCounterLimit</Content>
		<Description>●void Card.SetCounterLimit(Card c, int countertype, int count)
设定c放置countertype类型指示物的上限</Description>
		<Priority>0</Priority>
		<Text>Card.SetCounterLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetFlagEffectLabel</Content>
		<Description>●bool Card.SetFlagEffectLabel(Card c, int code, int label)
返回c是否存在种类为code的标识效果，并设置其Label属性为label</Description>
		<Priority>0</Priority>
		<Text>Card.SetFlagEffectLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetHint</Content>
		<Description>●void Card.SetHint(Card c, int type, int value)
为c设置类型为type的卡片提示信息
type只能为以下值，对应的value类型为
CHINT_TURN              回合数
CHINT_CARD              卡片id
CHINT_RACE              种族
CHINT_ATTRIBUTE         属性
CHINT_NUMBER            数字
CHINT_DESC              描述</Description>
		<Priority>0</Priority>
		<Text>Card.SetHint</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetMaterial</Content>
		<Description>●void Card.SetMaterial(Card c, Group g)
把g中的所有卡作为c的素材（上级召唤，特殊召唤）</Description>
		<Priority>0</Priority>
		<Text>Card.SetMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetSPSummonOnce</Content>
		<Description>●void Card.SetSPSummonOnce(Card c, int spsummon_code)
设置c一回合只能进行1次特殊召唤（灵兽，波动龙）
相同的spsummon_code共用1个次数</Description>
		<Priority>0</Priority>
		<Text>Card.SetSPSummonOnce</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetStatus</Content>
		<Description>●void Card.SetStatus(Card c, int state, bool enable)
给c设置或者取消状态码
除非妳清楚的了解每个状态码的含意，否则不要轻易使用此函数</Description>
		<Priority>0</Priority>
		<Text>Card.SetStatus</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetTurnCounter</Content>
		<Description>●void Card.SetTurnCounter(Card c, int counter)
设置c的回合计数器（光之护封剑等）</Description>
		<Priority>0</Priority>
		<Text>Card.SetTurnCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.SetUniqueOnField</Content>
		<Description>●void Card.SetUniqueOnField(Card c, int s, int o, int unique_code)
设置c以unique_code只能在场上只能存在1张
s不为0会检查自己场上的唯一性，o不为0则检查对方场上的唯一性</Description>
		<Priority>0</Priority>
		<Text>Card.SetUniqueOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Card.TrapMonsterBlock</Content>
		<Description>●void Card.TrapMonsterBlock(Card c)
使陷阱怪兽c占用一个魔法陷阱格子</Description>
		<Priority>0</Priority>
		<Text>Card.TrapMonsterBlock</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.AddCard</Content>
		<Description>●Card Debug.AddCard(int code, int owner, int player, int location, int seq, int pos[, bool proc=false])
添加卡片，将卡号为code的卡片的持有者设置为owner，以表示形式pos放置在player的场上位于location上序号为seq的格子处
proc=true则解除苏生限制</Description>
		<Priority>0</Priority>
		<Text>Debug.AddCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.Message</Content>
		<Description>●void Debug.Message(any msg)
显示消息</Description>
		<Priority>0</Priority>
		<Text>Debug.Message</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.PreAddCounter</Content>
		<Description>●void Debug.PreAddCounter(Card c, int counter_type, int count)
为c添加count个counter_type的指示物</Description>
		<Priority>0</Priority>
		<Text>Debug.PreAddCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.PreEquip</Content>
		<Description>●bool Debug.PreEquip(Card equip_card, Card target)
为target添加装备equip_card</Description>
		<Priority>0</Priority>
		<Text>Debug.PreEquip</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.PreSetTarget</Content>
		<Description>●void Debug.PreSetTarget(Card c, Card target)
把target选为c的永续对象</Description>
		<Priority>0</Priority>
		<Text>Debug.PreSetTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.ReloadFieldBegin</Content>
		<Description>●void Debug.ReloadFieldBegin(int flag)
以选项flag开始布局
	flag 残局：DUEL_ATTACK_FIRST_TURN+DUEL_SIMPLE_AI</Description>
		<Priority>0</Priority>
		<Text>Debug.ReloadFieldBegin</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.ReloadFieldEnd</Content>
		<Description>●void Debug.ReloadFieldEnd()
布局结束</Description>
		<Priority>0</Priority>
		<Text>Debug.ReloadFieldEnd</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.SetAIName</Content>
		<Description>●void Debug.SetAIName(string name)
设置AI的名字</Description>
		<Priority>0</Priority>
		<Text>Debug.SetAIName</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.SetPlayerInfo</Content>
		<Description>●void Debug.SetPlayerInfo(int playerid, int lp, int startcount, int drawcount)
设置玩家信息，基本分为lp，初始手卡为startcount张，每回合抽drawcount张
playerid 下方 0,上方 1</Description>
		<Priority>0</Priority>
		<Text>Debug.SetPlayerInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Debug.ShowHint</Content>
		<Description>●void Debug.ShowHint(string msg)
显示消息提示框</Description>
		<Priority>0</Priority>
		<Text>Debug.ShowHint</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AddCustomActivityCounter</Content>
		<Description>●void Duel.AddCustomActivityCounter(int counter_id, int activity_type, function f)
设置操作类型为activity_type、代号为counter_id的计数器，放在initial_effect函数内
f为过滤函数，以Card类型为参数，返回值为false的卡片进行以下类型的操作，计数器增加1（目前最多为1）
activity_type为以下类型
ACTIVITY_SUMMON         召唤（不包括通常召唤的set）
ACTIVITY_NORMALSUMMON   通常召唤（包括通常召唤的set）
ACTIVITY_SPSUMMON       特殊召唤
ACTIVITY_FLIPSUMMON     反转召唤
ACTIVITY_CHAIN          发动效果</Description>
		<Priority>0</Priority>
		<Text>Duel.AddCustomActivityCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AdjustInstantly</Content>
		<Description>●void Duel.AdjustInstantly([Card c])
手动刷新场上[受到卡片c影响]的卡的无效状态</Description>
		<Priority>0</Priority>
		<Text>Duel.AdjustInstantly</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AnnounceAttribute</Content>
		<Description>●int Duel.AnnounceAttribute(int player, int count, int available)
让玩家player从可选的属性中宣言count个属性
available是所有可选属性的组合值</Description>
		<Priority>0</Priority>
		<Text>Duel.AnnounceAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AnnounceCard</Content>
		<Description>●int Duel.AnnounceCard(int player)
让玩家player宣言一个卡片代号</Description>
		<Priority>0</Priority>
		<Text>Duel.AnnounceCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AnnounceCoin</Content>
		<Description>●int Duel.AnnounceCoin(int player)
让玩家player宣言硬币的正反面</Description>
		<Priority>0</Priority>
		<Text>Duel.AnnounceCoin</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AnnounceLevel</Content>
		<Description>●int Duel.AnnounceLevel(int player)
让玩家宣言一个等级</Description>
		<Priority>0</Priority>
		<Text>Duel.AnnounceLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AnnounceNumber</Content>
		<Description>●int Duel.AnnounceNumber(int player, int number, ...)
让玩家player宣言一个数字
从第二个参数开始，每一个参数代表一个可宣言的数字
返回选择的选项的序号</Description>
		<Priority>0</Priority>
		<Text>Duel.AnnounceNumber</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AnnounceRace</Content>
		<Description>●int Duel.AnnounceRace(int player, int count, int available)
让玩家player从可选的种族中宣言count个种族
available是所有可选种族的组合值</Description>
		<Priority>0</Priority>
		<Text>Duel.AnnounceRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.AnnounceType</Content>
		<Description>●int Duel.AnnounceType(int player)
让玩家player宣言一个卡片类型</Description>
		<Priority>0</Priority>
		<Text>Duel.AnnounceType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.BreakEffect</Content>
		<Description>●void Duel.BreakEffect()
中断当前效果，使之后的效果处理视为不同时处理，此函数会造成错时点</Description>
		<Priority>0</Priority>
		<Text>Duel.BreakEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CalculateDamage</Content>
		<Description>●void Duel.CalculateDamage(Card c1, Card c2)
令c1与c2进行战斗伤害计算</Description>
		<Priority>0</Priority>
		<Text>Duel.CalculateDamage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChainAttack</Content>
		<Description>●void Duel.ChainAttack([Card c])
使攻击卡[或卡片c]可以再进行1次攻击（开辟，破灭的女王）</Description>
		<Priority>0</Priority>
		<Text>Duel.ChainAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangeAttacker</Content>
		<Description>●void Duel.ChangeAttacker(Card c)
将攻击怪兽变为c
注：此函数会使原来的攻击怪兽视为攻击过</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangeAttacker</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangeAttackTarget</Content>
		<Description>●void Duel.ChangeAttackTarget(Card c|nil)
将攻击对象变为c，c为nil表示直接攻击</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangeAttackTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangeBattleDamage</Content>
		<Description>●void Duel.ChangeBattleDamage(int player, int value[, bool check=true])
把玩家player在本次战斗中受到的伤害变成value，check为false则原本战斗伤害为0也改变伤害</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangeBattleDamage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangeChainOperation</Content>
		<Description>●void Duel.ChangeChainOperation(int chainc, function f)
把连锁chainc的效果的处理函数换成f，用于实现“把效果变成”等的效果</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangeChainOperation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangePosition</Content>
		<Description>●int Duel.ChangePosition(Card|Group targets, int au[, int ad=au, int du=au, int dd=au, bool noflip=false])
改变targets的表示形式返回实际操作的数量
表侧攻击表示的变成au，里侧攻击表示的变成ad, 
表侧守备表示变成du,里侧守备表示变成dd
如果noflip=true则不触发翻转效果（但会触发翻转时的诱发效果）</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangePosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangeTargetCard</Content>
		<Description>●void Duel.ChangeTargetCard(int chainc, Group g)
把连锁chainc的对象换成g</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangeTargetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangeTargetParam</Content>
		<Description>●void Duel.ChangeTargetParam(int chainc, int param)
把连锁chainc的参数换成param</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangeTargetParam</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ChangeTargetPlayer</Content>
		<Description>●void Duel.ChangeTargetPlayer(int chainc, in player)
把连锁chainc的对象玩家换成player</Description>
		<Priority>0</Priority>
		<Text>Duel.ChangeTargetPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckChainTarget</Content>
		<Description>●bool Duel.CheckChainTarget(int chainc, Card c)
检查c是否是连锁chainc的效果的正确的对象</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckChainTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckChainUniqueness</Content>
		<Description>●bool Duel.CheckChainUniqueness()
检查当前连锁中是否存在同名卡的发动，true表示无同名卡</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckChainUniqueness</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckEvent</Content>
		<Description>●bool[,Group,int,int,Effect,int,int] Duel.CheckEvent(int event[, bool get_info])
检查当前是否是event时点
若get_info=true并且是正确的时点则还返回触发时点的信息 eg,ep,ev,re,r,rp</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckEvent</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckLocation</Content>
		<Description>●bool Duel.CheckLocation(int player, int location, int seq)
检查玩家player的场上位于location序号为seq的空格是否可用</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckLPCost</Content>
		<Description>●bool Duel.CheckLPCost(int player, int cost)
检查玩家player是否能支付cost点lp</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckLPCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckPhaseActivity</Content>
		<Description>●bool Duel.CheckPhaseActivity()
检查玩家在当前阶段是否有操作（是否处于阶段开始时，如七皇之剑）</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckPhaseActivity</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckReleaseGroup</Content>
		<Description>●bool Duel.CheckReleaseGroup(int player, function f, int count, Card ex|nil, ...)
检查玩家player场上是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）
第5个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckReleaseGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckReleaseGroupEx</Content>
		<Description>●boolean Duel.CheckReleaseGroupEx(int player, function f, int count, Card ex|nil, ...)
检查玩家player场上·手卡是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckReleaseGroupEx</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckRemoveOverlayCard</Content>
		<Description>●bool Duel.CheckRemoveOverlayCard(int player, int s, int o, int count, int reason)
检查player能否以原因reason移除指定位置至少count张卡</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckRemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckSummonedCount</Content>
		<Description>●bool Duel.CheckSummonedCount([Card c])
检查回合玩家本回合是否还能通常召唤[卡片c]</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckSummonedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckSynchroMaterial</Content>
		<Description>●bool Duel.CheckSynchroMaterial(Card c, function f1, function f2, int min, int max[, Card smat, Group mg])
检查[mg中]是否存在一组[必须包括smat在内的]满足条件的min-max张卡作为同调召唤c的素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckTiming</Content>
		<Description>●bool Duel.CheckTiming(int timing)
检查当前是否是timing提示时点</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckTiming</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckTunerMaterial</Content>
		<Description>●bool Duel.CheckTunerMaterial(Card c, Card tuner, function f1, function f2, int min, int max[, Group mg])
检查以tuner作为调整[在mg中]是否存在一组满足条件的min-max张卡作为同调召唤c的素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckTunerMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CheckXyzMaterial</Content>
		<Description>●bool Duel.CheckXyzMaterial(Card c, function f, int lv, int min, int max, Group mg|nil)
检查场上或mg中是否存在超量召唤c的超量用等级为lv的min-max个满足条件f的叠放素材</Description>
		<Priority>0</Priority>
		<Text>Duel.CheckXyzMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ClearTargetCard</Content>
		<Description>●void Duel.ClearTargetCard()
把当前正在处理的连锁的对象全部清除</Description>
		<Priority>0</Priority>
		<Text>Duel.ClearTargetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ConfirmCards</Content>
		<Description>●void Duel.ConfirmCards(int player, Card|Group targets)
给玩家player确认targets</Description>
		<Priority>0</Priority>
		<Text>Duel.ConfirmCards</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ConfirmDecktop</Content>
		<Description>●void Duel.ConfirmDecktop(int player, int count)
确认玩家player卡组上方count张卡</Description>
		<Priority>0</Priority>
		<Text>Duel.ConfirmDecktop</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.CreateToken</Content>
		<Description>●Card Duel.CreateToken(int player, int code[, int setcode, int attack, inte defence, int level, int race, int attribute])
以传入的参数数值新建一个Token并返回</Description>
		<Priority>0</Priority>
		<Text>Duel.CreateToken</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Damage</Content>
		<Description>●int Duel.Damage(int player, int value, int reason)
以reason原因给与玩家player造成value的伤害，返回实际收到的伤害值
如果受到伤害变成回复等效果的影响时，返回值为0.</Description>
		<Priority>0</Priority>
		<Text>Duel.Damage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Destroy</Content>
		<Description>●int Duel.Destroy(Card|Group targets, int reason[ ,int dest = LOCATION_GRAVE])
以reason原因破坏targets去dest，返回值是实际被破坏的数量
如果reason包含REASON_RULE，则破坏事件将不会检查卡片是否免疫效果，
不会触发代破效果并且无视“不能破坏”</Description>
		<Priority>0</Priority>
		<Text>Duel.Destroy</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.DisableShuffleCheck</Content>
		<Description>●void Duel.DisableShuffleCheck([disable=true])
使下一个操作不检查是否需要洗切卡组或手卡
注：如果不调用此函数，
除了调用Duel.DiscardDeck和Duel.Draw之外从卡组中取出卡或者把卡加入手卡
或者把卡加入卡组（非最上端或最底端）时，系统会自动在效果处理结束时洗切卡组或手卡
如果不希望如此，比如从卡组顶端除外一张卡等操作，那么需要调用此函数
此函数仅保证紧接着的一次操作不会进行洗卡检测</Description>
		<Priority>0</Priority>
		<Text>Duel.DisableShuffleCheck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.DiscardDeck</Content>
		<Description>●int Duel.DiscardDeck(int player, int count, int reason)
以原因reason把玩家player的卡组最上端count张卡送去墓地，返回实际转移的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.DiscardDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.DiscardHand</Content>
		<Description>●int Duel.DiscardHand(int player, function f, int min, int max, int reason, Card ex|nil, ...)
过滤函数让玩家player选择并丢弃满足筛选条件f兵不等于ex的min-max张手卡
第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Duel.DiscardHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Draw</Content>
		<Description>●int Duel.Draw(int player, int count, int reason)
让玩家player以原因reason抽count张卡，返回实际抽的卡的数量
如果reason含有REASON_RULE则此次抽卡不受“不能抽卡”的效果的影响</Description>
		<Priority>0</Priority>
		<Text>Duel.Draw</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.EnableGlobalFlag</Content>
		<Description>●void Duel.EnableGlobalFlag(int global_flag)
设置全局标记global_flag</Description>
		<Priority>0</Priority>
		<Text>Duel.EnableGlobalFlag</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Equip</Content>
		<Description>●bool Duel.Equip(int player, Card c1, Card c2[, bool up=true, bool is_step=false])
把c1作为玩家player的装备卡装备给c2，返回值表示是否成功
up=false则保持装备卡之前的表示形式
is_step=true则是装备过程的分解，需要配合Duel.EquipComplete使用</Description>
		<Priority>0</Priority>
		<Text>Duel.Equip</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.EquipComplete</Content>
		<Description>●void Duel.EquipComplete()
在调用Duel.Equip时，若is_step参数为true，则需调用此函数触发时点</Description>
		<Priority>0</Priority>
		<Text>Duel.EquipComplete</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetActivityCount</Content>
		<Description>●int,... Duel.GetActivityCount(int player, int activity_type, ...)
返回player进行对应的activity_type操作的次数
activity_type为以下类型
ACTIVITY_SUMMON         召唤（不包括通常召唤的放置）
ACTIVITY_NORMALSUMMON   通常召唤（包括通常召唤的放置）
ACTIVITY_SPSUMMON       特殊召唤
ACTIVITY_FLIPSUMMON     反转召唤
ACTIVITY_ATTACK         攻击
ACTIVITY_BATTLE_PHASE   进入战斗阶段</Description>
		<Priority>0</Priority>
		<Text>Duel.GetActivityCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetAttacker</Content>
		<Description>●Card Duel.GetAttacker()
返回此次战斗攻击的卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetAttacker</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetAttackTarget</Content>
		<Description>●Card|nil Duel.GetAttackTarget()
返回此次战斗被攻击的卡，如果返回nil表示是直接攻击</Description>
		<Priority>0</Priority>
		<Text>Duel.GetAttackTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetBattleDamage</Content>
		<Description>●int Duel.GetBattleDamage(int player)
返回玩家player在本次战斗中受到的伤害</Description>
		<Priority>0</Priority>
		<Text>Duel.GetBattleDamage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetChainInfo</Content>
		<Description>●... Duel.GetChainInfo(int chainc, ...)
返回连锁chainc的信息，如果chainc=0，则返回当前正在处理的连锁的信息
此函数根据传入的参数个数按顺序返回相应数量的返回值参数可以是:
CHAININFO_CHAIN_COUNT               连锁序号
CHAININFO_TRIGGERING_EFFECT         连锁的效果
CHAININFO_TRIGGERING_PLAYER         连锁的玩家
CHAININFO_TRIGGERING_CONTROLER      连锁发生位置所属玩家
CHAININFO_TRIGGERING_LOCATION       连锁发生位置
CHAININFO_TRIGGERING_SEQUENCE       连锁发生的位置的序号
CHAININFO_TARGET_CARDS              连锁的对象卡片组
CHAININFO_TARGET_PLAYER             连锁的对象玩家
CHAININFO_TARGET_PARAM              连锁的对象参数
CHAININFO_DISABLE_REASON            连锁被无效的原因效果
CHAININFO_DISABLE_PLAYER            连锁被无效的原因玩家
CHAININFO_CHAIN_ID                  连锁的唯一标识
CHAININFO_TYPE                      连锁卡片的类型（怪兽·魔法·陷阱）
CHAININFO_EXTTYPE                   连锁卡片的具体类型（例如同调怪兽·永续魔法·反击陷阱）
举例：
Duel.GetChainInfo(0,CHAININFO_TRIGGERING_LOCATION,CHAININFO_TARGET_CARDS)
将会返回当前连锁发生的位置和对象卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetChainInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetChainMaterial</Content>
		<Description>●Effect Duel.GetChainMaterial(int player)
返回玩家player受到的连锁素材的效果，此函数仅用于融合类卡的效果</Description>
		<Priority>0</Priority>
		<Text>Duel.GetChainMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetCoinResult</Content>
		<Description>●int,int,int,int,int Duel.GetCoinResult()
返回当前投硬币的结果</Description>
		<Priority>0</Priority>
		<Text>Duel.GetCoinResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetControl</Content>
		<Description>●bool Duel.GetControl(Card c, int player[, int reset_phase=0, int reset_count=0])
让玩家player得到c的控制权，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>Duel.GetControl</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetCounter</Content>
		<Description>●int Duel.GetCounter(int player, int s, int o, int countertype)
返回场上存在的countertype类型的指示物的数量
s表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置</Description>
		<Priority>0</Priority>
		<Text>Duel.GetCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetCurrentChain</Content>
		<Description>●int Duel.GetCurrentChain()
返回当前正在处理的连锁序号</Description>
		<Priority>0</Priority>
		<Text>Duel.GetCurrentChain</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetCurrentPhase</Content>
		<Description>●int Duel.GetCurrentPhase()
返回当前的阶段</Description>
		<Priority>0</Priority>
		<Text>Duel.GetCurrentPhase</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetCustomActivityCount</Content>
		<Description>●int Duel.GetCustomActivityCount(int counter_id, int player, int activity_type)
代号为counter_id的计数器的计数，返回player进行以下操作的次数（目前最多为1）
activity_type为以下类型
ACTIVITY_SUMMON         召唤（不包括通常召唤的set）
ACTIVITY_NORMALSUMMON   通常召唤（包括通常召唤的set）
ACTIVITY_SPSUMMON       特殊召唤
ACTIVITY_FLIPSUMMON     反转召唤
ACTIVITY_CHAIN          发动效果</Description>
		<Priority>0</Priority>
		<Text>Duel.GetCustomActivityCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetDecktopGroup</Content>
		<Description>●Group Duel.GetDecktopGroup(int player, int count)
返回玩家player的卡组最上方的count张卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetDecktopGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetDiceResult</Content>
		<Description>●int,int,int,int,int Duel.GetDiceResult()
返回当前掷骰子的结果</Description>
		<Priority>0</Priority>
		<Text>Duel.GetDiceResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetDrawCount</Content>
		<Description>●int Duel.GetDrawCount(int player)
返回玩家player每回合的规则抽卡数量</Description>
		<Priority>0</Priority>
		<Text>Duel.GetDrawCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetEnvironment</Content>
		<Description>●int,int Duel.GetEnvironment()
返回两个值，表示当前场地代号，以及当前场地效果的来源玩家
场地代号指当前生效的场地卡的代号，或者海神的巫女把场地变化效果的值
来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者</Description>
		<Priority>0</Priority>
		<Text>Duel.GetEnvironment</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetFieldCard</Content>
		<Description>●Card Duel.GetFieldCard(int player, int location, int seq)
返回玩家player的场上位于location序号为seq的卡，常用于获得场地区域·灵摆区域的卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetFieldCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetFieldGroup</Content>
		<Description>●Group Duel.GetFieldGroup(int player, int s, int o)
返回指定位置的卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetFieldGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetFieldGroupCount</Content>
		<Description>●int Duel.GetFieldGroupCount(int player, int s, int o)
返回指定位置的卡的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.GetFieldGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetFirstMatchingCard</Content>
		<Description>●Card Duel.GetFirstMatchingCard(function f, int player, int s, int o, Card ex|nil, ...)
过滤函数，返回指定位置满足过滤条件f并且不等于ex的第一张卡
第6个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Duel.GetFirstMatchingCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetFirstTarget</Content>
		<Description>●Card,... Duel.GetFirstTarget()
返回连锁的所有的对象卡，一般只有一个对象时使用</Description>
		<Priority>0</Priority>
		<Text>Duel.GetFirstTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetFlagEffect</Content>
		<Description>●int Duel.GetFlagEffect(int player, int code)
返回玩家player的特定的标识效果的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.GetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetLocationCount</Content>
		<Description>●int Duel.GetLocationCount(int player, int location[, int use_player, int reason = LOCATION_REASON_TOFIELD])
返回玩家player的场上location可用的空格数
location只能是LOCATION_MZONE或者LOCATION_SZONE
reason为LOCATION_REASON_TOFIELD或LOCATION_REASON_CONTROL</Description>
		<Priority>0</Priority>
		<Text>Duel.GetLocationCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetLP</Content>
		<Description>●int Duel.GetLP(int player)
返回玩家player的当前LP</Description>
		<Priority>0</Priority>
		<Text>Duel.GetLP</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetMatchingGroup</Content>
		<Description>●Group Duel.GetMatchingGroup(function f, int player, int s, int o, Card ex|nil, ...)
过滤函数，返回指定位置满足过滤条件f并且不等于ex的卡
第6个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Duel.GetMatchingGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetMatchingGroupCount</Content>
		<Description>●int Duel.GetMatchingGroupCount(function f, int player, int s, int o, Card ex|nil, ...)
过滤函数，返回指定位置满足过滤条件f并且不等于ex的卡的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.GetMatchingGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetOperatedGroup</Content>
		<Description>●Group Duel.GetOperatedGroup()
此函数返回之前一次卡片操作实际操作的卡片组包括
Duel.Destroy, Duel.Remove, Duel.SendtoGrave, 
Duel.SendtoHand, Duel.SendtoDeck, Duel.Release, 
Duel.ChangePosition, Duel.SpecialSummon, Duel.DiscardDeck</Description>
		<Priority>0</Priority>
		<Text>Duel.GetOperatedGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetOperationCount</Content>
		<Description>●int Duel.GetOperationCount(int chainc)
返回连锁chainc包含的操作分类的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.GetOperationCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetOperationInfo</Content>
		<Description>●bool,Card|Group,int,int,int Duel.GetOperationInfo(int chainc, int category)
返回连锁chainc的category分类的操作信息，返回值为5个，
第一个返回值是false的话表示不存在该分类
后4个返回值对应Duel.SetOperationInfo的后4个参数：Card|Group targets, int count, int target_player, int target_param</Description>
		<Priority>0</Priority>
		<Text>Duel.GetOperationInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetOverlayCount</Content>
		<Description>●int Duel.GetOverlayCount(int player, int s, int o)
返回指定位置的所有叠放的卡的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.GetOverlayCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetOverlayGroup</Content>
		<Description>●Group Duel.GetOverlayGroup(int player, int s, int o)
返回指定位置的所有叠放的卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetOverlayGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetReleaseGroup</Content>
		<Description>●Group Duel.GetReleaseGroup(int player[, bool use_hand=false])
返回玩家player可解放（非上级召唤用）的卡片组，use_hand为true则包括手卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetReleaseGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetReleaseGroupCount</Content>
		<Description>●integer Duel.GetReleaseGroupCount(int player[, bool use_hand=false])
返回玩家player可解放（非上级召唤用）的卡片数量，use_hand为true则包括手卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetReleaseGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetRitualMaterial</Content>
		<Description>●Group Duel.GetRitualMaterial(int player)
返回玩家player可用的用于仪式召唤素材的卡片组
包含手上，场上可解放的以及墓地的仪式魔人等卡</Description>
		<Priority>0</Priority>
		<Text>Duel.GetRitualMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetTargetCount</Content>
		<Description>●int Duel.GetTargetCount(function f, int player, int s, int o, Card ex|nil, ...)
基本同Duel.GetMatchingGroupCount，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象</Description>
		<Priority>0</Priority>
		<Text>Duel.GetTargetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetTributeCount</Content>
		<Description>●int Duel.GetTributeCount(Card c[, Group mg])
返回[mg中]用于通常召唤c的祭品数量
此数量不一定等于Duel.GetTributeGroup的返回值中的卡片数量
因为某些卡可以作为两个祭品来使用</Description>
		<Priority>0</Priority>
		<Text>Duel.GetTributeCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetTributeGroup</Content>
		<Description>●Group Duel.GetTributeGroup(Card c)
返回用于通常召唤c可解放（上级召唤用）的卡片组</Description>
		<Priority>0</Priority>
		<Text>Duel.GetTributeGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetTurnCount</Content>
		<Description>●int Duel.GetTurnCount()
返回当前的回合数</Description>
		<Priority>0</Priority>
		<Text>Duel.GetTurnCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.GetTurnPlayer</Content>
		<Description>●int Duel.GetTurnPlayer()
返回当前的回合玩家</Description>
		<Priority>0</Priority>
		<Text>Duel.GetTurnPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Hint</Content>
		<Description>●void Duel.Hint(int hint_type, int player, int desc)
给玩家player发送hint_type类型的消息提示，提示内容为desc</Description>
		<Priority>0</Priority>
		<Text>Duel.Hint</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.HintSelection</Content>
		<Description>●void Duel.HintSelection(Group g)
手动为g显示被选为对象的动画效果，并记录这些卡被选为对象</Description>
		<Priority>0</Priority>
		<Text>Duel.HintSelection</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IncreaseSummonedCount</Content>
		<Description>●void Duel.IncreaseSummonedCount([Card c])
手动消耗1次玩家[对于卡片c]的通常召唤的次数</Description>
		<Priority>0</Priority>
		<Text>Duel.IncreaseSummonedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsAbleToEnterBP</Content>
		<Description>●bool Duel.IsAbleToEnterBP()
检查回合玩家能否进入战斗阶段</Description>
		<Priority>0</Priority>
		<Text>Duel.IsAbleToEnterBP</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsCanRemoveCounter</Content>
		<Description>●bool Duel.IsCanRemoveCounter(int player, int s, int o, int countertype, int count, int reason)
检查玩家player以reason为原因是否能移除场上的countertype类型的count个指示物
s表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置</Description>
		<Priority>0</Priority>
		<Text>Duel.IsCanRemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsChainDisablable</Content>
		<Description>●bool Duel.IsChainDisablable(int chainc)
检查连锁chainc的效果能否被无效</Description>
		<Priority>0</Priority>
		<Text>Duel.IsChainDisablable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsChainNegatable</Content>
		<Description>●bool Duel.IsChainNegatable(int chainc)
检查连锁chainc的发动能否被无效</Description>
		<Priority>0</Priority>
		<Text>Duel.IsChainNegatable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsDamageCalculated</Content>
		<Description>●bool Duel.IsDamageCalculated()
用于在伤害阶段检查是否已经计算了战斗伤害</Description>
		<Priority>0</Priority>
		<Text>Duel.IsDamageCalculated</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsEnvironment</Content>
		<Description>●bool Duel.IsEnvironment(int code[, int player=PLAYER_ALL])
检查玩家player是否为场地代号code的来源玩家
场地代号指当前生效的场地卡的代号，或者海神的巫女把场地变化效果的值
来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者</Description>
		<Priority>0</Priority>
		<Text>Duel.IsEnvironment</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsExistingMatchingCard</Content>
		<Description>●bool Duel.IsExistingMatchingCard(function f, int player, int s, int o, int count, Card ex|nil, ...)
过滤函数，检查指定位置是否存在至少count张满足过滤条件f并且不等于ex的卡
第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Duel.IsExistingMatchingCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsExistingTarget</Content>
		<Description>●bool Duel.IsExistingTarget(function f, int player, int s, int o, int count, Card ex|nil, ...)
过滤函数，检查指定位置是否存在至少count张满足过滤条件f并且不等于ex
并且可以成为当前正在处理的效果的对象的卡
第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Duel.IsExistingTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerAffectedByEffect</Content>
		<Description>●Effect|nil Duel.IsPlayerAffectedByEffect(int player, int code)
检查player是否受到种类为code的效果影响，如果有就返回该效果</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerAffectedByEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanDiscardDeck</Content>
		<Description>●bool Duel.IsPlayerCanDiscardDeck(int player, int count)
检查玩家player是否可以把卡组顶端count张卡送去墓地</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanDiscardDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanDiscardDeckAsCost</Content>
		<Description>●bool Duel.IsPlayerCanDiscardDeckAsCost(int player, int count)
检查玩家player能否把卡组顶端count张卡送去墓地作为cost</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanDiscardDeckAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanDraw</Content>
		<Description>●bool Duel.IsPlayerCanDraw(int player[, int count=0])
检查玩家player是否可以效果抽[count张]卡</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanDraw</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanFlipSummon</Content>
		<Description>●bool Duel.IsPlayerCanFlipSummon(int player, Card c)
检查玩家player是否可以反转召唤c</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanFlipSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanRelease</Content>
		<Description>●bool Duel.IsPlayerCanRelease(int player, Card c)
检查玩家player是否能解放c</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanRelease</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanRemove</Content>
		<Description>●bool Duel.IsPlayerCanRemove(int player, Card c)
检查玩家player是否能除外c</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanRemove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanSendtoDeck</Content>
		<Description>●bool Duel.IsPlayerCanSendtoDeck(int player, Card c)
检查玩家是否能把c送去卡组</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanSendtoDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanSendtoGrave</Content>
		<Description>●bool Duel.IsPlayerCanSendtoGrave(int player, Card c)
检查玩家是否能把c送去墓地</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanSendtoGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanSendtoHand</Content>
		<Description>●bool Duel.IsPlayerCanSendtoHand(int player, Card c)
检查玩家是否能把c送去手牌</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanSendtoHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanSpecialSummon</Content>
		<Description>●bool Duel.IsPlayerCanSpecialSummon(int player[, int sumtype, int sumpos, int target_player, Card c])
检查玩家player能否特殊召唤[c到target_player场上，以sumtype召唤方式，sumpos表示形式]
如果需要可选参数，则必须全部使用</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanSpecialSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanSpecialSummonCount</Content>
		<Description>●bool Duel.IsPlayerCanSpecialSummonCount(int player, int count)
检查玩家player能否特殊召唤count次</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanSpecialSummonCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanSpecialSummonMonster</Content>
		<Description>●bool Duel.IsPlayerCanSpecialSummonMonster(int player, int code, int setcode, int type, int atk, int def, int level, int race, int attribute
[, integer pos=POS_FACEUP, integer target_player=player])
检查玩家player是否可以以pos的表示形式特殊召唤给定参数的怪兽到target_player场上
此函数通常用于判定是否可以特招token和陷阱怪兽</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanSpecialSummonMonster</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.IsPlayerCanSummon</Content>
		<Description>●bool Duel.IsPlayerCanSummon(int player, int sumtype, Card c)
检查玩家player是否可以以sumtype方式通常召唤c
仅当玩家收到“不能上级召唤”等效果的影响时返回false</Description>
		<Priority>0</Priority>
		<Text>Duel.IsPlayerCanSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.MajesticCopy</Content>
		<Description>●void Duel.MajesticCopy(Card c1, Card c2)
救世星龙专用。把c2记述的效果复制给c1
强制发动的效果可以选择是否发动</Description>
		<Priority>0</Priority>
		<Text>Duel.MajesticCopy</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.MoveSequence</Content>
		<Description>●void Duel.MoveSequence(Card c, int seq)
移动c的序号，通常用于在场上换格子或者在卡组中移动到最上方或者最下方</Description>
		<Priority>0</Priority>
		<Text>Duel.MoveSequence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.MoveToField</Content>
		<Description>●bool Duel.MoveToField(Card c, int move_player, int target_player, int dest, int pos, bool enabled)
让玩家move_player把c移动的target_player的场上，返回值表示是否成功
dest只能是LOCATION_MZONE或者LOCATION_SZONE，pos表示可选表示形式，enable表示是否立刻适用c的效果</Description>
		<Priority>0</Priority>
		<Text>Duel.MoveToField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.MSet</Content>
		<Description>●void Duel.MSet(int player, Card c, bool ignore_count, Effect e|nil[, minc=0])
让玩家以效果e对c进行通常召唤的Set，至少使用mint个祭品
如果e=nil,那么就按照一般的通常召唤规则进行通常召唤
如果ignore_count=true，则忽略每回合的通常召唤次数限制</Description>
		<Priority>0</Priority>
		<Text>Duel.MSet</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.NegateActivation</Content>
		<Description>●bool Duel.NegateActivation(int chainc)
使连锁chainc的发动无效，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>Duel.NegateActivation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.NegateAttack</Content>
		<Description>●bool Duel.NegateAttack()
无效此次攻击，返回值表示是否成功
此次攻击已经被其他效果无效或导致攻击的卡不能攻击则返回false</Description>
		<Priority>0</Priority>
		<Text>Duel.NegateAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.NegateEffect</Content>
		<Description>●bool Duel.NegateEffect(int chainc)
使连锁chainc的效果无效，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>Duel.NegateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.NegateRelatedChain</Content>
		<Description>●void Duel.NegateRelatedChain(Card c, int reset)
使卡片c的已经发动的连锁都无效化，发生reset事件则重置</Description>
		<Priority>0</Priority>
		<Text>Duel.NegateRelatedChain</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.NegateSummon</Content>
		<Description>●void Duel.NegateSummon(Card|Group targets)
使正在召唤·反转召唤·特殊召唤的targets的召唤无效</Description>
		<Priority>0</Priority>
		<Text>Duel.NegateSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Overlay</Content>
		<Description>●void Duel.Overlay(Card c, Card|Group ocard)
把ocard作为c的叠放卡叠放</Description>
		<Priority>0</Priority>
		<Text>Duel.Overlay</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.PayLPCost</Content>
		<Description>●void Duel.PayLPCost(int player, int cost)
让玩家player支付cost点lp</Description>
		<Priority>0</Priority>
		<Text>Duel.PayLPCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.RaiseEvent</Content>
		<Description>●void Duel.RaiseEvent(Group|Card eg, int code, Effect re, int r, int rp, int ep, int ev)
以eg,ep,ev,re,r,rp触发一个时点</Description>
		<Priority>0</Priority>
		<Text>Duel.RaiseEvent</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.RaiseSingleEvent</Content>
		<Description>●void Duel.RaiseSingleEvent(Card ec, int code, Effect re, int r, int rp, int ep, int ev)
以eg,ep,ev,re,r,rp为卡片ec触发一个单体时点</Description>
		<Priority>0</Priority>
		<Text>Duel.RaiseSingleEvent</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Readjust</Content>
		<Description>●void Duel.Readjust()
刷新场上的卡的信息
非特定情况或者不清楚原理请勿使用此函数以免形成死循环</Description>
		<Priority>0</Priority>
		<Text>Duel.Readjust</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Recover</Content>
		<Description>●int Duel.Recover(int player, int value, int reason)
以reason原因使玩家player回复value的LP，返回实际的回复值
如果受到回复变成伤害等效果的影响时，返回值为0.</Description>
		<Priority>0</Priority>
		<Text>Duel.Recover</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.RegisterEffect</Content>
		<Description>●void Duel.RegisterEffect(Effect e, int player)
把效果e作为玩家player的效果注册给全局环境</Description>
		<Priority>0</Priority>
		<Text>Duel.RegisterEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.RegisterFlagEffect</Content>
		<Description>●Effect Duel.RegisterFlagEffect(int player, int code, int reset_flag, int property, int reset_count)
为玩家player注册全局环境下的标识效果
此效果总是影响玩家的(EFFECT_FLAG_PLAYER_TARGET)并且不会被无效化
其余部分与Card.RegisterFlagEffect相同</Description>
		<Priority>0</Priority>
		<Text>Duel.RegisterFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Release</Content>
		<Description>●int Duel.Release(Card|Group targets, int reason)
以reason原因解放targets返回值是实际解放的数量
如果reason含有REASON_COST，则不会检查卡片是否不受效果影响</Description>
		<Priority>0</Priority>
		<Text>Duel.Release</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ReleaseRitualMaterial</Content>
		<Description>●void Duel.ReleaseRitualMaterial(Group g)
解放仪式用的素材g，如果是墓地的仪式魔人等卡则除外</Description>
		<Priority>0</Priority>
		<Text>Duel.ReleaseRitualMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Remove</Content>
		<Description>●int Duel.Remove(Card|Group targets, int pos, int reason)
以reason原因，pos表示形式除外targets，返回值是实际被操作的数量
如果reason包含REASON_TEMPORARY，那么视为是暂时除外，可以通过Duel.ReturnToField返回到场上</Description>
		<Priority>0</Priority>
		<Text>Duel.Remove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.RemoveCounter</Content>
		<Description>●bool Duel.RemoveCounter(int player, int s, int o, int countertype, int count, int reason)
让玩家player以reason为原因移除场上存在的countertype类型的count个指示物，返回值表示是否成功
s表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置</Description>
		<Priority>0</Priority>
		<Text>Duel.RemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.RemoveOverlayCard</Content>
		<Description>●bool Duel.RemoveOverlayCard(int player, int s, int o, int min, int max, int reason)
让player以reason原因移除指定位置的min-max张叠放卡，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>Duel.RemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ReplaceAttacker</Content>
		<Description>●void Duel.ReplaceAttacker(Card c)
用c代替当前攻击的卡进行伤害阶段</Description>
		<Priority>0</Priority>
		<Text>Duel.ReplaceAttacker</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ReplaceAttackTarget</Content>
		<Description>●void Duel.ReplaceAttackTarget(Card c)
(预留）</Description>
		<Priority>0</Priority>
		<Text>Duel.ReplaceAttackTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ResetFlagEffect</Content>
		<Description>●void Duel.ResetFlagEffect(int player, int code)
手动reset玩家player的特定的标识效果</Description>
		<Priority>0</Priority>
		<Text>Duel.ResetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ReturnToField</Content>
		<Description>●bool Duel.ReturnToField(Card c[, int pos])
把c以表示形式pos返回到场上，pos默认值是离场前的表示形式，返回值表示是否成功
c必须是以REASON_TEMPORARY原因离场，并且离场后没有离开过那个位置</Description>
		<Priority>0</Priority>
		<Text>Duel.ReturnToField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectDisableField</Content>
		<Description>●int Duel.SelectDisableField(int player, int count, int s, int o, int filter)
让玩家player选择指定位置满足标记条件filter的count个可用的空格，并返回选择位置的标记
常用于选择区域不能使用或移动怪兽格子</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectDisableField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectEffectYesNo</Content>
		<Description>●bool Duel.SelectEffectYesNo(int player, Card c)
让玩家player选择是否发动卡片c的效果</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectEffectYesNo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectFusionMaterial</Content>
		<Description>●Group Duel.SelectFusionMaterial(int player, Card c, Group g[, Card gc|nil, int chkf=PLAYER_NONE])
让玩家player从g中选择一组[必须包含gc在内的]融合怪兽c的融合素材</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectMatchingCard</Content>
		<Description>●Group Duel.SelectMatchingCard(int sel_player, function f, int player, int s, int o, int min, int max, Card ex|nil, ...)
过滤函数，让玩家sel_player选择指定位置满足过滤条件f并且不等于ex的min-max张卡
第9个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectMatchingCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectOption</Content>
		<Description>●int Duel.SelectOption(int player, int desc1, ...)
让玩家选择选项，从第二个参数开始，每一个参数代表一条选项
返回选择的选项的序号(从0开始)</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectOption</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectPosition</Content>
		<Description>●int Duel.SelectPosition(int player, Card c, int pos)
让玩家player选择c的表示形式并返回</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectReleaseGroup</Content>
		<Description>●Group Duel.SelectReleaseGroup(int sel_player, function f, int min, int max, Card ex|nil, ...)
过滤函数，让玩家player从场上选择min-max张不等于ex的满足条件f的可解放的卡（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectReleaseGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectReleaseGroupEx</Content>
		<Description>●Group Duel.SelectReleaseGroupEx(int player, function f, int min, int max, Card ex|nil, ...)
过滤函数，让玩家player从场上·手卡选择min-max张不等于ex的满足条件f的可解放的卡（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectReleaseGroupEx</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectSynchroMaterial</Content>
		<Description>●Group Duel.SelectSynchroMaterial(int player, Card c, function f1, function f2, int min, int max[, Card smat, Group mg])
让玩家player[从mg中]选择用于同调c需要的[必须包含smat在内（如果有mg~=nil则忽略此参数）]满足条件的数量为min-max的一组素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectTarget</Content>
		<Description>●Group Duel.SelectTarget(int sel_player, function f, int player, int s, int o, int min, int max, Card ex|nil, ...)
过滤函数，让玩家sel_player选择指定位置满足过滤条件f并且不等于ex
并且可以成为当前正在处理的效果的对象的min-max张卡
第9个参数开始为额外参数
此函数会同时将当前正在处理的连锁的对象设置成选择的卡</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectTribute</Content>
		<Description>●Group Duel.SelectTribute(int player, Card c, int min, int max[, Group mg])
让玩家player[从mg中]选择用于通常召唤c的min-max个祭品</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectTribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectTunerMaterial</Content>
		<Description>●Group Duel.SelectTunerMaterial(int player, Card c, Card tuner, function f1, function f2, int min, int max[, Group mg])
让玩家[从mg中]选择用于同调c需要的满足条件的以tuner作为调整的min-max张卡的一组素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectTunerMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectXyzMaterial</Content>
		<Description>●Group Duel.SelectXyzMaterial(int player, Card c, function f, int lv, int min, int max)
让玩家player为超量怪兽c选择超量用等级为lv的min-max个满足条件f的叠放素材</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectXyzMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SelectYesNo</Content>
		<Description>●bool Duel.SelectYesNo(int player, int desc)
让玩家player选择是或否</Description>
		<Priority>0</Priority>
		<Text>Duel.SelectYesNo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SendtoDeck</Content>
		<Description>●int Duel.SendtoDeck(Card|Group targets, int player|nil, int seq, int reason)
以reason原因把targets送去玩家player的卡组，返回值是实际被操作的数量
如果player是nil则返回卡的持有者的卡组
如果seq=0，则是返回卡组最顶端；seq=1则是返回卡组最底端；
其余情况则是返回最顶端并且标记需要洗卡组</Description>
		<Priority>0</Priority>
		<Text>Duel.SendtoDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SendtoGrave</Content>
		<Description>●int Duel.SendtoGrave(Card|Group targets, int reason)
以reason原因把targets送去墓地，返回值是实际被操作的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.SendtoGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SendtoHand</Content>
		<Description>●int Duel.SendtoHand(Card|Group targets, int player|nil, int reason)
以reason原因把targets送去玩家player的手牌，返回值是实际被操作的数量
如果player是nil则返回卡的持有者的手牌</Description>
		<Priority>0</Priority>
		<Text>Duel.SendtoHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetChainLimit</Content>
		<Description>●void Duel.SetChainLimit(function f)
设定连锁条件，f的函数原型为 bool f(e,ep,tp)
e表示要限制连锁的效果，ep表示要限制连锁的玩家，tp表示发动该效果的玩家
在cost或者target处理中调用此函数可以限制可以连锁的效果的种类（如超融合）
如果f返回false表示不能连锁，一旦设置连锁条件后发生了新的连锁那么连锁条件将会解除</Description>
		<Priority>0</Priority>
		<Text>Duel.SetChainLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetChainLimitTillChainEnd</Content>
		<Description>●void Duel.SetChainLimitTillChainEnd(function f)
功能同Duel.SetChainLimit，但是此函数设定的连锁条件直到连锁结束才会解除</Description>
		<Priority>0</Priority>
		<Text>Duel.SetChainLimitTillChainEnd</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetCoinResult</Content>
		<Description>●void Duel.SetCoinResult(int res, ... )
强行修改投硬币的结果为res
此函数用于永续的EVENT_TOSS_COIN事件中</Description>
		<Priority>0</Priority>
		<Text>Duel.SetCoinResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetDiceResult</Content>
		<Description>●void Duel.SetDiceResult(int res, ...)
强行修改投骰子的结果为res
此函数用于永续的EVENT_TOSS_DICE事件中</Description>
		<Priority>0</Priority>
		<Text>Duel.SetDiceResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetFusionMaterial</Content>
		<Description>●void Duel.SetFusionMaterial(Group g)
设置g为需要使用的融合素材</Description>
		<Priority>0</Priority>
		<Text>Duel.SetFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetLP</Content>
		<Description>●void Duel.SetLP(int player, int lp)
设置玩家player的当前LP为lp</Description>
		<Priority>0</Priority>
		<Text>Duel.SetLP</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetOperationInfo</Content>
		<Description>●void Duel.SetOperationInfo(int chainc, int category, Card|Group targets, int count, int target_player, int target_param)
设置当前处理的连锁的操作信息此操作信息包含了效果处理中确定要处理的效果分类
比如潜行狙击手需要设置CATEGORY_DICE，但是不能设置CATEGORY_DESTROY，因为不确定
对于破坏效果，targets需要设置成发动时可能成为连锁的影响对象的卡，
并设置count为发动时确定的要处理的卡的数量
比如黑洞发动时，targets需要设定为场上的所有怪兽，count设置成场上的怪的数量
对于需要移动卡片位置的CATEGORY_SPECIAL_SUMMON,CATEGORY_TOHAND,CATEGORY_TODECK等分类，
如果要处理的卡是确定的（比如取对象），则设置targets为这些卡，count为数量，
如果要处理的卡是不确定的（效果处理时才能确定，一般是不取对象的效果），
	则设置targets为nil，count为预计要处理的卡的数量，
	target_player为预计要处理的卡的持有者（不确定就为0）
	target_param为预计要处理的卡的位置
例如增援：SetOperationInfo(0,CATEGORY_TOHAND,nil,1,tp,LOCATION_DECK)
操作信息用于很多效果的发动的检测，例如星尘龙，王家长眠之谷等</Description>
		<Priority>0</Priority>
		<Text>Duel.SetOperationInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetSynchroMaterial</Content>
		<Description>●void Duel.SetSynchroMaterial(Group g)
设置g为需要使用的同调素材</Description>
		<Priority>0</Priority>
		<Text>Duel.SetSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetTargetCard</Content>
		<Description>●void Duel.SetTargetCard(Card|Group targets)
把当前正在处理的连锁的对象设置成targets
注，这里的对象指的的广义的对象，包括不取对象的效果可能要处理的对象</Description>
		<Priority>0</Priority>
		<Text>Duel.SetTargetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetTargetParam</Content>
		<Description>●void Duel.SetTargetParam(integer)
void Duel.SetTargetParam(inte param)
把当前正在处理的连锁的对象参数设置成param</Description>
		<Priority>0</Priority>
		<Text>Duel.SetTargetParam</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SetTargetPlayer</Content>
		<Description>●void Duel.SetTargetPlayer(int player)
把当前正在处理的连锁的对象玩家设置成player</Description>
		<Priority>0</Priority>
		<Text>Duel.SetTargetPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ShuffleDeck</Content>
		<Description>●void Duel.ShuffleDeck(int player)
手动洗切玩家player的卡组
注：会重置洗卡检测的状态</Description>
		<Priority>0</Priority>
		<Text>Duel.ShuffleDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ShuffleHand</Content>
		<Description>●void Duel.ShuffleHand(int player)
手动洗切玩家player的手卡
注：会重置洗卡检测的状态</Description>
		<Priority>0</Priority>
		<Text>Duel.ShuffleHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.ShuffleSetCard</Content>
		<Description>●void Duel.ShuffleSetCard(Group g)
洗切覆盖在怪兽区域的卡（魔术礼帽）</Description>
		<Priority>0</Priority>
		<Text>Duel.ShuffleSetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SkipPhase</Content>
		<Description>●void Duel.SkipPhase(int player, int phase, int reset_flag, int reset_count)
跳过玩家player的phase阶段，并在特定的阶段后reset，reset参数和效果相同</Description>
		<Priority>0</Priority>
		<Text>Duel.SkipPhase</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SortDecktop</Content>
		<Description>●void Duel.SortDecktop(int sort_player, int target_player, int count)
让玩家sort_player对玩家target_player的卡组最上方count张卡进行排序</Description>
		<Priority>0</Priority>
		<Text>Duel.SortDecktop</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SpecialSummon</Content>
		<Description>●int Duel.SpecialSummon(Card|Group targets, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos)
让玩家player以sumtype方式，pos表示形式把targets特殊召唤到target_player场上
如果nocheck为true则无视卡的召唤条件如果nolimit为true则无视卡的苏生限制
返回值是特殊召唤成功的卡的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.SpecialSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SpecialSummonComplete</Content>
		<Description>●void|int Duel.SpecialSummonComplete()
此函数在确定复数个Duel.SpecialSummonStep调用完毕之后调用，用于触发事件</Description>
		<Priority>0</Priority>
		<Text>Duel.SpecialSummonComplete</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SpecialSummonRule</Content>
		<Description>●void Duel.SpecialSummonRule(int player, Card c)
让玩家player对c进行特殊召唤手续</Description>
		<Priority>0</Priority>
		<Text>Duel.SpecialSummonRule</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SpecialSummonStep</Content>
		<Description>●bool Duel.SpecialSummonStep(Card c, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos)
此函数是Duel.SpecialSummon的分解过程，只特殊召唤一张卡c
此函数用于一个效果同时特殊召唤多张参数不同的卡
此函数必须和Duel.SpecialSummonComplete一起使用
返回值表示是否特殊召唤成功</Description>
		<Priority>0</Priority>
		<Text>Duel.SpecialSummonStep</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SSet</Content>
		<Description>●void|int Duel.SSet(int player, Card|Group targets[, int target_player = player])
让玩家player把targets放置到target_player的魔法陷阱区
若targets为Group，则返回成功操作的数量</Description>
		<Priority>0</Priority>
		<Text>Duel.SSet</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Summon</Content>
		<Description>●void Duel.Summon(int player, Card c, bool ignore_count, Effect e|nil[, minc=0])
让玩家以效果e对c进行通常召唤(非set)，至少使用minc个祭品
如果e=nil,那么就按照一般的通常召唤规则进行通常召唤
如果ignore_count=true，则忽略每回合的通常召唤次数限制</Description>
		<Priority>0</Priority>
		<Text>Duel.Summon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SwapControl</Content>
		<Description>●bool Duel.SwapControl(Card c1, Card c2[, int reset_phase=0, int reset_count=0])
交换c1与c2的控制权，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>Duel.SwapControl</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SwapDeckAndGrave</Content>
		<Description>●void Duel.SwapDeckAndGrave(int player)
现世与冥界的逆转专用。把玩家player的卡组和墓地交换</Description>
		<Priority>0</Priority>
		<Text>Duel.SwapDeckAndGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.SynchroSummon</Content>
		<Description>●void Duel.SynchroSummon(int player, Card c, Card tuner[, Group mg])
让玩家player以tuner作为调整[mg为素材]对c进行同调召唤手续</Description>
		<Priority>0</Priority>
		<Text>Duel.SynchroSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.TossCoin</Content>
		<Description>●... Duel.TossCoin(int player, int count)
让玩家player投count(&lt;=5)次硬币，返回值为count个结果，0或者1.</Description>
		<Priority>0</Priority>
		<Text>Duel.TossCoin</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.TossDice</Content>
		<Description>●... Duel.TossDice(int player, int count1[, int count2 = 0])
让玩家player投count1次骰子[，1-player投count2次骰子](count1+count2&lt;=5)
返回值为count1+count2个结果，1-6</Description>
		<Priority>0</Priority>
		<Text>Duel.TossDice</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.VenomSwampCheck</Content>
		<Description>●bool Duel.VenomSwampCheck(Effect e, Card c)
蛇毒沼泽专用。把攻击力被其效果变成0的卡片破坏</Description>
		<Priority>0</Priority>
		<Text>Duel.VenomSwampCheck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.Win</Content>
		<Description>●void Duel.Win(int player, int win_reason)
当前效果处理完令player以win_reason决斗胜利</Description>
		<Priority>0</Priority>
		<Text>Duel.Win</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Duel.XyzSummon</Content>
		<Description>●void Duel.XyzSummon(int player, Card c, Group mg|nil)
让玩家player[以mg为素材]对c进行超量召唤手续</Description>
		<Priority>0</Priority>
		<Text>Duel.XyzSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.Clone</Content>
		<Description>●Effect Effect.Clone(Effect e)
新建一个效果e的副本</Description>
		<Priority>0</Priority>
		<Text>Effect.Clone</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.CreateEffect</Content>
		<Description>●Effect Effect.CreateEffect(Card c)
新建一个空效果
并且效果的Owner为c</Description>
		<Priority>0</Priority>
		<Text>Effect.CreateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetActivateLocation</Content>
		<Description>●int Effect.GetActivateLocation(Effect e)
返回效果e的发动区域</Description>
		<Priority>0</Priority>
		<Text>Effect.GetActivateLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetActiveType</Content>
		<Description>●int Effect.GetActiveType(Effect e)
返回e的效果类型（怪兽·魔法·陷阱）
与发动该效果的卡的类型不一定相同，比如灵摆效果视为魔法卡的效果</Description>
		<Priority>0</Priority>
		<Text>Effect.GetActiveType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetCategory</Content>
		<Description>●int Effect.GetCategory(Effect e)
返回Category属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetCategory</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetCode</Content>
		<Description>●int Effect.GetCode(Effect e)
返回code属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetCondition</Content>
		<Description>●function Effect.GetCondition(Effect e)
返回condition属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetCondition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetCost</Content>
		<Description>●function Effect.GetCost(Effect e)
返回cost属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetDescription</Content>
		<Description>●int Effect.GetDescription(Effect e)
返回效果描述</Description>
		<Priority>0</Priority>
		<Text>Effect.GetDescription</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetFieldID</Content>
		<Description>●int Effect.GetFieldID(Effect e)
获取效果e的id</Description>
		<Priority>0</Priority>
		<Text>Effect.GetFieldID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetHandler</Content>
		<Description>●Card Effect.GetHandler(Effect e)
返回效果在哪一张卡上生效(通常是用Card.RegisterEffect注册该效果的卡)</Description>
		<Priority>0</Priority>
		<Text>Effect.GetHandler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetHandlerPlayer</Content>
		<Description>●int Effect.GetHandlerPlayer(Effect e)
返回当前者，一般是Handle的控制者</Description>
		<Priority>0</Priority>
		<Text>Effect.GetHandlerPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetLabel</Content>
		<Description>●int Effect.GetLabel(Effect e)
返回Label属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetLabelObject</Content>
		<Description>●Card|Group|Effect Effect.GetLabelObject(Effect e)
返回LabelObject属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetLabelObject</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetOperation</Content>
		<Description>●function Effect.GetOperation(Effect e)
返回operation属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetOperation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetOwner</Content>
		<Description>●Card Effect.GetOwner(Effect e)
返回Owner属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetOwner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetOwnerPlayer</Content>
		<Description>●int Effect.GetOwnerPlayer(Effect e)
返回OwnerPlayer属性，一般是Owner的控制者</Description>
		<Priority>0</Priority>
		<Text>Effect.GetOwnerPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetProperty</Content>
		<Description>●int Effect.GetProperty(Effect e)
返回Property属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetTarget</Content>
		<Description>●function Effect.GetTarget(Effect e)
返回target属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetType</Content>
		<Description>●int Effect.GetType(Effect e)
返回Type属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GetValue</Content>
		<Description>●function|int Effect.GetValue(Effect e)
返回value属性</Description>
		<Priority>0</Priority>
		<Text>Effect.GetValue</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.GlobalEffect</Content>
		<Description>●Effect Effect.GlobalEffect()
新建一个全局效果</Description>
		<Priority>0</Priority>
		<Text>Effect.GlobalEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.IsActivatable</Content>
		<Description>●bool Effect.IsActivatable(Effect e, int player)
检查效果e能否由player发动</Description>
		<Priority>0</Priority>
		<Text>Effect.IsActivatable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.IsActiveType</Content>
		<Description>●bool Effect.IsActiveType(Effect e, int type)
检查e的效果类型（怪兽·魔法·陷阱）是否有type</Description>
		<Priority>0</Priority>
		<Text>Effect.IsActiveType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.IsHasCategory</Content>
		<Description>●bool Effect.IsHasCategory(Effect e, int cate)
检查效果是否含有效果分类cate</Description>
		<Priority>0</Priority>
		<Text>Effect.IsHasCategory</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.IsHasProperty</Content>
		<Description>●bool Effect.IsHasProperty(Effect e, int prop)
检查效果是否含有标志prop</Description>
		<Priority>0</Priority>
		<Text>Effect.IsHasProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.IsHasType</Content>
		<Description>●bool Effect.IsHasType(Effect e, int type)
检查效果是否属于类型type</Description>
		<Priority>0</Priority>
		<Text>Effect.IsHasType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.Reset</Content>
		<Description>●void Effect.Reset(Effect e)
把效果e重置，重置之后不可以再使用此效果</Description>
		<Priority>0</Priority>
		<Text>Effect.Reset</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetAbsoluteRange</Content>
		<Description>●void Effect.SetAbsoluteRange(Effect e, int playerid, int s_range, int o_range)
设置target range属性并设置EFFECT_FLAG_ABSOLUTE_RANGE标志
	playerid != 0 s_range和o_range反转</Description>
		<Priority>0</Priority>
		<Text>Effect.SetAbsoluteRange</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetCategory</Content>
		<Description>●void Effect.SetCategory(Effect e, int cate)
设置Category属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetCategory</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetCode</Content>
		<Description>●void Effect.SetCode(Effect e, int code)
为效果e设置Code属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetCondition</Content>
		<Description>●void Effect.SetCondition(Effect e, function con_func)
设置Condition属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetCondition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetCost</Content>
		<Description>●void Effect.SetCost(Effect e, function cost_func)
设置Cost属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetCountLimit</Content>
		<Description>●void Effect.SetCountLimit(Effect e, int count[, int code=0])
设置一回合可以发动的次数count（仅触发型效果有效），相同的code(不等于0或1时)共用1个次数
code包含以下数值具有特殊的性质
EFFECT_COUNT_CODE_OATH          誓约使用次数
EFFECT_COUNT_CODE_DUEL          决斗中使用次数
EFFECT_COUNT_CODE_SINGLE        同一张卡多个效果公共使用次数（不限制同名卡）</Description>
		<Priority>0</Priority>
		<Text>Effect.SetCountLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetDescription</Content>
		<Description>●void Effect.SetDescription(Effect e, int desc)
为效果e设置效果描述</Description>
		<Priority>0</Priority>
		<Text>Effect.SetDescription</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetHintTiming</Content>
		<Description>●void Effect.SetHintTiming(Effect e, int s_time[, int o_time=s_time])
设置提示时点</Description>
		<Priority>0</Priority>
		<Text>Effect.SetHintTiming</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetLabel</Content>
		<Description>●void Effect.SetLabel(Effect e, int label)
设置Label属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetLabelObject</Content>
		<Description>●void Effect.SetLabelObject(Effect e, Card|Group|Effect labelobject)
设置LabelObject属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetLabelObject</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetOperation</Content>
		<Description>●void Effect.SetOperation(Effect e, function op_func)
设置Operation属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetOperation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetOwnerPlayer</Content>
		<Description>●void Effect.SetOwnerPlayer(Effect e[, int player])
设置OwnerPlayer属性为player</Description>
		<Priority>0</Priority>
		<Text>Effect.SetOwnerPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetProperty</Content>
		<Description>●void Effect.SetProperty(Effect e, int prop)
设置Property属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetRange</Content>
		<Description>●void Effect.SetRange(Effect e, int range)
为效果e设置Range属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetRange</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetReset</Content>
		<Description>●void Effect.SetReset(Effect e, int reset_flag[, int reset_count=1])
设置reset参数</Description>
		<Priority>0</Priority>
		<Text>Effect.SetReset</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetTarget</Content>
		<Description>●void Effect.SetTarget(Effect e, function targ_func)
设置Target属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetTargetRange</Content>
		<Description>●void Effect.SetTargetRange(Effect e, int s_range, int o_range)
为效果e设置Target Range属性
	s_range指影响的我方区域
	o_range值影响的对方区域
	如果property属性中指定了EFFECT_FLAG_ABSOLUTE_RANGE标志，
		那么s_range指玩家1受到影响的区域，o_range指玩家2受到影响的区域
	如果这是一个特殊召唤手续(EFFECT_SPSUMMON_PROC)的效果，
		并且property指定了EFFECT_FLAG_SPSUM_PARAM标志，
		那么s_range表示特殊召唤到的哪个玩家的场地，
	o_range表示可选择的表示形式</Description>
		<Priority>0</Priority>
		<Text>Effect.SetTargetRange</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetType</Content>
		<Description>●void Effect.SetType(Effect e, int type)
为效果e设置Type属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Effect.SetValue</Content>
		<Description>●void Effect.SetValue(Effect e, function|int|bool val)
设置Value属性</Description>
		<Priority>0</Priority>
		<Text>Effect.SetValue</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.AddCard</Content>
		<Description>●void Group.AddCard(Group g, Card c)
往g中增加c</Description>
		<Priority>0</Priority>
		<Text>Group.AddCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.CheckWithSumEqual</Content>
		<Description>●bool Group.CheckWithSumEqual(Group g, function f, int sum, int min, int max, ...)
子集求和判定函数，f为返回一个interger值的函数
检查g中是否存在一个数量为min-max的子集满足以f对子集的每一个元素求值的和等于sum，从第6个参数开始为额外参数
	比如：g:CheckWithSumEqual(Card.GetSynchroLevel,7,2,99)
	检查g中是否存在一个子集满足子集的同调用等级之和等于7</Description>
		<Priority>0</Priority>
		<Text>Group.CheckWithSumEqual</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.CheckWithSumGreater</Content>
		<Description>●bool Group.CheckWithSumGreater(Group g, function f, int sum, ...)
子集求和判定函数之二，f为返回一个interger值的函数
检查g中是否存在一个子集满足以f对子集的每一个元素求值的和刚好大于或者等于sum，从第4个参数开始为额外参数
比如：g:CheckWithSumGreater(Card.GetRitualLevel,8)
	检查g中是否存在一个子集满足子集的仪式用等级之和大于等于8
	注：判定必须是“刚好”大于或者等于
	以等级为例，要使等级合计大于等于8，可以选择LV1+LV7而不可以选择LV1+LV4+LV4</Description>
		<Priority>0</Priority>
		<Text>Group.CheckWithSumGreater</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Clear</Content>
		<Description>●void Group.Clear(Group g)
清空卡片组</Description>
		<Priority>0</Priority>
		<Text>Group.Clear</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Clone</Content>
		<Description>●Group Group.Clone(Group g)
新建卡片组g的副本</Description>
		<Priority>0</Priority>
		<Text>Group.Clone</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.CreateGroup</Content>
		<Description>●Group Group.CreateGroup()
新建一个空的卡片组</Description>
		<Priority>0</Priority>
		<Text>Group.CreateGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.DeleteGroup</Content>
		<Description>●void Group.DeleteGroup(Group g)
删除卡片组g</Description>
		<Priority>0</Priority>
		<Text>Group.DeleteGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Equal</Content>
		<Description>●bool Group.Equal(Group g1, Group g2)
判断g1和g2是否相同</Description>
		<Priority>0</Priority>
		<Text>Group.Equal</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Filter</Content>
		<Description>●Group Group.Filter(Group g, function f, Card ex|nil, ...)
过滤函数，从g中筛选满足筛选条件f并且不等于ex的卡
从第4个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.Filter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.FilterCount</Content>
		<Description>●int Group.FilterCount(Group g, function f, Card ex|nil, ...)
过滤函数，和Group.Filter基本相同，不同之处在于此函数只返回满足条件的卡的数量</Description>
		<Priority>0</Priority>
		<Text>Group.FilterCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.FilterSelect</Content>
		<Description>●Group Group.FilterSelect(Group g, int player, function f, int min, int max, Card ex|nil, ...)
过滤函数，让玩家player从g中选择min-max张满足筛选条件f并且不等于ex的卡
从第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.FilterSelect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.ForEach</Content>
		<Description>●void Group.ForEach(Group g, function f)
以g中的每一张卡作为参数调用一次f</Description>
		<Priority>0</Priority>
		<Text>Group.ForEach</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.FromCards</Content>
		<Description>●Group Group.FromCards(Card c[, ...])
不定参数，把传入的所有卡组合成一个卡片组并返回</Description>
		<Priority>0</Priority>
		<Text>Group.FromCards</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.GetClassCount</Content>
		<Description>●int Group.GetClassCount(Group g, function f, ...)
计算g中所有卡的种类数量，f为分类的依据，返回相同的值视为同一种类，从第3个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.GetClassCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.GetCount</Content>
		<Description>●int Group.GetCount(Group g)
返回g中卡的数量</Description>
		<Priority>0</Priority>
		<Text>Group.GetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.GetFirst</Content>
		<Description>●Card Group.GetFirst(Group g)
返回g中第一张卡，并重置当前指针到g中第一张卡
如果g中不存在卡则返回nil</Description>
		<Priority>0</Priority>
		<Text>Group.GetFirst</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.GetMaxGroup</Content>
		<Description>●Group,int Group.GetMaxGroup(Group g, function f, ...)
f为返回一个interger值的函数，从g中筛选出具有最大的f的值的卡
第2个返回值为这个最大值，从第3个参数开始为额外参数
要使用第2个返回值注意检查g非空</Description>
		<Priority>0</Priority>
		<Text>Group.GetMaxGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.GetMinGroup</Content>
		<Description>●Group,int Group.GetMinGroup(Group g, function f, ...)
f为返回一个interger值的函数，从g中筛选出具有最小的f的值的卡
第2个返回值为这个最小值，从第3个参数开始为额外参数
要使用第2个返回值注意检查g非空</Description>
		<Priority>0</Priority>
		<Text>Group.GetMinGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.GetNext</Content>
		<Description>●Card Group.GetNext(Group g)
使指针指向下一张卡并返回这张卡，如果不存在则返回nil</Description>
		<Priority>0</Priority>
		<Text>Group.GetNext</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.GetSum</Content>
		<Description>●int Group.GetSum(Group g, function f, ...)
计算g中所有卡的取值的总和，f为为每张卡的取值函数，从第3个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.GetSum</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.IsContains</Content>
		<Description>●bool Group.IsContains(Group g, Card c)
检查g中是否存在卡片c</Description>
		<Priority>0</Priority>
		<Text>Group.IsContains</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.IsExists</Content>
		<Description>●bool Group.IsExists(Group g, function f, int count, Card ex|nil, ...)
过滤函数，检查g中是否存在至少count张满足筛选条件f并且不等于ex的卡
从第5个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.IsExists</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.KeepAlive</Content>
		<Description>●void Group.KeepAlive(Group g)
让卡片组持续，把卡片组设置为效果的LabelObject需要设置</Description>
		<Priority>0</Priority>
		<Text>Group.KeepAlive</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Merge</Content>
		<Description>●void Group.Merge(Group g1, Group g2)
把g2中的所有卡合并到g1
注：g2本身不会发生变化</Description>
		<Priority>0</Priority>
		<Text>Group.Merge</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.RandomSelect</Content>
		<Description>●Group Group.RandomSelect(Group g, int player, int count)
让玩家player从g中随机选择count张卡
因为是随机选择，所以参数player基本无用，由系统随机选取</Description>
		<Priority>0</Priority>
		<Text>Group.RandomSelect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Remove</Content>
		<Description>●void Group.Remove(Group g, function f, Card ex|nil, ...)
从g中移除满足筛选条件f并且不等于ex的所有卡，第4个参数开始是额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.Remove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.RemoveCard</Content>
		<Description>●void Group.RemoveCard(Group g, Card c)
把c从g中移除</Description>
		<Priority>0</Priority>
		<Text>Group.RemoveCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.SearchCard</Content>
		<Description>●Card Group.SearchCard(Group g, function f, ...)
过滤函数，返回g中满足筛选条件f的第一张卡，从第3个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.SearchCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Select</Content>
		<Description>●Group Group.Select(Group g, int player, int min, int max, Card ex|nil)
让玩家player从g中选择min-max张不等于ex的卡</Description>
		<Priority>0</Priority>
		<Text>Group.Select</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.SelectWithSumEqual</Content>
		<Description>●Group Group.SelectWithSumEqual(Group g, int player, function f, int sum, int min, int max, ...)
让玩家player从g中选取一个数量为min-max的子集使子集的特定函数的和等于sum，从第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.SelectWithSumEqual</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.SelectWithSumGreater</Content>
		<Description>●Group Group.SelectWithSumGreater(Group g, int player, function f, int sum, ...)
让玩家player从g中选取一个子集使子集的特定函数f的和大于等于sum，从第5个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Group.SelectWithSumGreater</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Group.Sub</Content>
		<Description>●void Group.Sub(Group g1, Group g2)
从g1中移除属于g2中的卡
注：g2本身不会发生变化</Description>
		<Priority>0</Priority>
		<Text>Group.Sub</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddFusionProcCode2</Content>
		<Description>●void aux.AddFusionProcCode2(Card c, int code1, int code2, bool sub, bool insf)
为c指定卡号为code1和code2的怪兽为融合素材
sub表示能否使用融合代替素材，insf表示能否用简易融合召唤</Description>
		<Priority>0</Priority>
		<Text>AddFusionProcCode2</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddFusionProcCode3</Content>
		<Description>●void aux.AddFusionProcCode3(Card c, int code1, int code2, int code3, bool sub, bool insf)
为c指定卡号为code1,code2,code3的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>AddFusionProcCode3</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddFusionProcCode4</Content>
		<Description>●void aux.AddFusionProcCode4(Card c, int code1, int code2, int code3, int code4, bool sub, bool insf)
为c指定卡号为code1,code2,code3,code4的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>AddFusionProcCode4</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddFusionProcCodeFun</Content>
		<Description>●void aux.AddFusionProcCodeFun(Card c, int code, function f, int cc, bool sub, bool insf)
为c指定卡号号为code和cc个满足条件f的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>AddFusionProcCodeFun</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddFusionProcCodeRep</Content>
		<Description>●void aux.AddFusionProcCodeRep(Card c, int code, int cc, bool sub, bool insf)
为c指定cc个相同的怪兽为融合素材，code为卡号</Description>
		<Priority>0</Priority>
		<Text>AddFusionProcCodeRep</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddFusionProcFun2</Content>
		<Description>●void aux.AddFusionProcFun2(Card c, function f1, function f2, bool insf)
为c指定满足条件f1与f2的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>AddFusionProcFun2</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddFusionProcFunRep</Content>
		<Description>●void aux.AddFusionProcFunRep(Card c, function f, int cc, bool insf)
为c指定cc个满足相同条件f的怪兽为融合素材</Description>
		<Priority>0</Priority>
		<Text>AddFusionProcFunRep</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddPendulumProcedure</Content>
		<Description>●void aux.AddPendulumProcedure(Card c)
为灵摆怪兽c添加灵摆召唤手续</Description>
		<Priority>0</Priority>
		<Text>AddPendulumProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddRitualProcEqual</Content>
		<Description>●void aux.AddRitualProcEqual(Card c, function filter)
为c添加仪式召唤效果
filter为仪式怪兽满足的条件，素材的等级之和必须等于仪式怪兽的等级</Description>
		<Priority>0</Priority>
		<Text>AddRitualProcEqual</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddRitualProcGreater</Content>
		<Description>●void aux.AddRitualProcGreater(Card c, function filter)
为c添加仪式召唤效果
filter为仪式怪兽满足的条件，素材的等级之和可以超过仪式怪兽的等级</Description>
		<Priority>0</Priority>
		<Text>AddRitualProcGreater</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddSynchroProcedure</Content>
		<Description>●void aux.AddSynchroProcedure(Card c, function f1, function f2, int ct)
为c添加同调召唤手续
f1为调整满足的过滤条件，f2为调整以外满足的过滤条件（通常用aux.NonTuner）
调整以外的怪兽至少需要ct只</Description>
		<Priority>0</Priority>
		<Text>AddSynchroProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddSynchroProcedure2</Content>
		<Description>●void aux.AddSynchroProcedure2(Card c, function f1, function f2)
为c添加同调召唤手续
f1为调整满足的过滤条件，f2为调整以外满足的过滤条件（通常用aux.NonTuner）
只能用1只调整以外的怪兽</Description>
		<Priority>0</Priority>
		<Text>AddSynchroProcedure2</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddXyzProcedure</Content>
		<Description>●void aux.AddXyzProcedure(Card c, function f, int lv, int ct[, function alterf|nil, int desc|nil, int maxct=ct, function op|nil])
为c添加超量召唤手续
用满足条件f的等级为lv的ct-maxct只怪兽进行叠放
其余的参数用于在单个怪兽（通常是超量怪兽）上叠放
alterf为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（希望皇龙）</Description>
		<Priority>0</Priority>
		<Text>AddXyzProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>BeginPuzzle</Content>
		<Description>●void aux.BeginPuzzle()
开始残局</Description>
		<Priority>0</Priority>
		<Text>BeginPuzzle</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>DualNormalCondition</Content>
		<Description>●bool aux.DualNormalCondition(Effect e)
检查二重怪兽e:GetHandler()是否为被视为通常怪兽的状态</Description>
		<Priority>0</Priority>
		<Text>DualNormalCondition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>EnableDualAttribute</Content>
		<Description>●void aux.EnableDualAttribute(Card c)
为c添加二重怪兽属性</Description>
		<Priority>0</Priority>
		<Text>EnableDualAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>FilterBoolFunction</Content>
		<Description>●function aux.FilterBoolFunction(function f, a, b, c)
return	function(target)
			return f(target,a,b,c)
		end</Description>
		<Priority>0</Priority>
		<Text>FilterBoolFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>FilterEqualFunction</Content>
		<Description>●function aux.FilterEqualFunction(function f, value, a, b, c)
return	function(target)
			return f(target,a,b,c)==value
		end</Description>
		<Priority>0</Priority>
		<Text>FilterEqualFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDualState</Content>
		<Description>●bool aux.IsDualState(Effect e)
检查二重怪兽e:GetHandler()是否是再度召唤状态
常用于二重怪兽再度召唤获得的效果e的Condition属性</Description>
		<Priority>0</Priority>
		<Text>IsDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsNotDualState</Content>
		<Description>●bool aux.IsNotDualState(Effect e)
aux.IsDualState的反义</Description>
		<Priority>0</Priority>
		<Text>IsNotDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>NonTuner</Content>
		<Description>●function aux.NonTuner(function f, a, b, c)
return	function(target)
			return target:IsNotTuner() and (not f or f(target,a,b,c))
		end</Description>
		<Priority>0</Priority>
		<Text>NonTuner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Stringid</Content>
		<Description>●int aux.Stringid(int code, int id)
用于索引卡号为code的卡片第id个（从0开始）效果提示</Description>
		<Priority>0</Priority>
		<Text>Stringid</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>TargetBoolFunction</Content>
		<Description>●function aux.TargetBoolFunction(function f, a, b, c)
return	function(effect,target)
			return f(target,a,b,c)
		end</Description>
		<Priority>0</Priority>
		<Text>TargetBoolFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>TargetEqualFunction</Content>
		<Description>●function aux.TargetEqualFunction(function f, value, a, b, c)
return	function(effect,target)
			return f(target,a,b,c)==value
		end</Description>
		<Priority>0</Priority>
		<Text>TargetEqualFunction</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>band</Content>
		<Description>●int bit.band(int a, int b)
a与b的位与</Description>
		<Priority>0</Priority>
		<Text>band</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>bor</Content>
		<Description>●int bit.bor(int a, int b)
a与b的位或</Description>
		<Priority>0</Priority>
		<Text>bor</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>bxor</Content>
		<Description>●int bit.bxor(int a, int b)
a与b的位异或</Description>
		<Priority>0</Priority>
		<Text>bxor</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>lshift</Content>
		<Description>●int bit.lshift(int a, int b)
a左移b</Description>
		<Priority>0</Priority>
		<Text>lshift</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>rshift</Content>
		<Description>●int bit.rshift(int a, int b)
a右移b</Description>
		<Priority>0</Priority>
		<Text>rshift</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddCounter</Content>
		<Description>●bool Card.AddCounter(Card c, int countertype, int count)
为c放置count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>AddCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddTrapMonsterAttribute</Content>
		<Description>●void Card.AddTrapMonsterAttribute(Card c, int extra_type, int attribute, int race, int level, int atk, int def)
为c添加陷阱怪兽属性，extra_type为额外的卡片类型
注：陷阱怪兽属性指的是同时作为怪兽和陷阱，并且额外使一个魔法陷阱的格子不能使用</Description>
		<Priority>0</Priority>
		<Text>AddTrapMonsterAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AssumeProperty</Content>
		<Description>●void Card.AssumeProperty(Card c,int assume_type, int assume_value)
把c的assume_type的数值当作assume_value使用（基因组斗士）
assume_type为以下类型
ASSUME_CODE         卡号
ASSUME_TYPE         类型
ASSUME_LEVEL        等级
ASSUME_RANK         阶级
ASSUME_ATTRIBUTE    属性
ASSUME_RACE         种族
ASSUME_ATTACK       攻击力
ASSUME_DEFENCE      守备力</Description>
		<Priority>0</Priority>
		<Text>AssumeProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CancelCardTarget</Content>
		<Description>●void Card.CancelCardTarget(Card c1, Card c2)
取消c2为c1的永续对象</Description>
		<Priority>0</Priority>
		<Text>CancelCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CancelToGrave</Content>
		<Description>●void Card.CancelToGrave(Card c[, bool cancel=true])
取消送墓确定状态，cancel=false则重新设置送墓确定状态
注：送墓确定状态指的是在场上发动的不留场的魔法和陷阱后，这些卡片的状态
送墓确定状态中的卡无法返回手牌和卡组，并且连锁结束时送去墓地
此函数的作用是取消此状态使其留场，用于光之护封剑和废铁稻草人等卡</Description>
		<Priority>0</Priority>
		<Text>CancelToGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckActivateEffect</Content>
		<Description>●Effect[,Group,int,int,Effect,int,int] Card.CheckActivateEffect(Card c, bool neglect_con, bool neglect_cost, bool copy_info)
返回c的可以发动时机正确的“卡的发动”的效果，neglect_con=true则无视发动条件，neglect_cost=true则无视发动cost
copy_info=false或者自由时点的效果则只返回这个效果
否则还返回这个效果的时点为code的触发时点的信息 eg,ep,ev,re,r,rp</Description>
		<Priority>0</Priority>
		<Text>CheckActivateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckEquipTarget</Content>
		<Description>●bool Card.CheckEquipTarget(Card c1, Card c2)
检查c2是否是c1的正确的装备对象</Description>
		<Priority>0</Priority>
		<Text>CheckEquipTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckFusionMaterial</Content>
		<Description>●bool Card.CheckFusionMaterial(Card c[, Group g, Card gc|nil, int chkf=PLAYER_NONE])
检查g是否包含了c需要[必须包含gc在内]的一组融合素材</Description>
		<Priority>0</Priority>
		<Text>CheckFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckRemoveOverlayCard</Content>
		<Description>●bool Card.CheckRemoveOverlayCard(Card c, int player, int count, int reason)
检查玩家player能否以reason为原因，至少移除c叠放的count张卡</Description>
		<Priority>0</Priority>
		<Text>CheckRemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckUniqueOnField</Content>
		<Description>●bool Card.CheckUniqueOnField(Card c,int check_player)
检查c在check_player场上的唯一性</Description>
		<Priority>0</Priority>
		<Text>CheckUniqueOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ClearEffectRelation</Content>
		<Description>●void Card.ClearEffectRelation(Card c)
清空c所有联系的效果</Description>
		<Priority>0</Priority>
		<Text>ClearEffectRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CompleteProcedure</Content>
		<Description>●void Card.CompleteProcedure(Card c)
使c完成正规的召唤手续</Description>
		<Priority>0</Priority>
		<Text>CompleteProcedure</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CopyEffect</Content>
		<Description>●int Card.CopyEffect(Card c, int code, int reset_flag[, int reset_count])
为c添加卡号是code的卡的可复制的效果，并且添加额外的reset条件
返回值是表示复制效果的代号id</Description>
		<Priority>0</Priority>
		<Text>CopyEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CreateEffectRelation</Content>
		<Description>●void Card.CreateEffectRelation(Card c, Effect e)
为卡片c和效果e建立联系</Description>
		<Priority>0</Priority>
		<Text>CreateEffectRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CreateRelation</Content>
		<Description>●void Card.CreateRelation(Card c1, Card c2, int reset_flag)
为c1建立于c2的联系此联系仅会由于RESET_EVENT的事件reset</Description>
		<Priority>0</Priority>
		<Text>CreateRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>EnableCounterPermit</Content>
		<Description>●void Card.EnableCounterPermit(Card c, int countertype[, int location])
允许c[在位置location]放置那个需要“可以放置”才能放置的指示物countertype</Description>
		<Priority>0</Priority>
		<Text>EnableCounterPermit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>EnableDualState</Content>
		<Description>●void Card.EnableDualState(Card c)
把c设置成再召唤状态</Description>
		<Priority>0</Priority>
		<Text>EnableDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>EnableReviveLimit</Content>
		<Description>●void Card.EnableReviveLimit(Card c)
为c添加苏生限制</Description>
		<Priority>0</Priority>
		<Text>EnableReviveLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetActivateEffect</Content>
		<Description>●Effect Card.GetActivateEffect(Card c)
返回c的“卡片发动”的效果，即类型为EFFECT_TYPE_ACTIVATE的效果
仅对魔法和陷阱有效</Description>
		<Priority>0</Priority>
		<Text>GetActivateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttack</Content>
		<Description>●int Card.GetAttack(Card c)
返回c的当前攻击力，返回值是负数表示是"?"</Description>
		<Priority>0</Priority>
		<Text>GetAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttackableTarget</Content>
		<Description>●Group,bool Card.GetAttackableTarget(Card c)
返回c可攻击的卡片组以及能否直接攻击</Description>
		<Priority>0</Priority>
		<Text>GetAttackableTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttackAnnouncedCount</Content>
		<Description>●int Card.GetAttackAnnouncedCount(Card c)
返回c本回合攻击宣言的次数
注：攻击被无效不会被计入攻击过的次数，但是会计入攻击宣言的次数</Description>
		<Priority>0</Priority>
		<Text>GetAttackAnnouncedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttackedCount</Content>
		<Description>●int Card.GetAttackedCount(Card c)
返回c本回合攻击过的次数
注：如果此值与上一个函数的返回值不同，那么说明此卡本回合进行过直接攻击</Description>
		<Priority>0</Priority>
		<Text>GetAttackedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttackedGroup</Content>
		<Description>●Group Card.GetAttackedGroup(Card c)
返回c本回合攻击过的卡片组</Description>
		<Priority>0</Priority>
		<Text>GetAttackedGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttackedGroupCount</Content>
		<Description>●int Card.GetAttackedGroupCount(Card c)
返回c本回合攻击过的卡片数量</Description>
		<Priority>0</Priority>
		<Text>GetAttackedGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttribute</Content>
		<Description>●int Card.GetAttribute(Card c)
返回c的当前属性
注：对某些多属性怪兽如光与暗之龙，此函数的返回值可能是几个属性的组合值</Description>
		<Priority>0</Priority>
		<Text>GetAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetBaseAttack</Content>
		<Description>●int Card.GetBaseAttack(Card c)
返回c的原本攻击力</Description>
		<Priority>0</Priority>
		<Text>GetBaseAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetBaseDefence</Content>
		<Description>●int Card.GetBaseDefence(Card c)
返回c的原本守备力</Description>
		<Priority>0</Priority>
		<Text>GetBaseDefence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetBattledGroup</Content>
		<Description>●Group Card.GetBattledGroup(Card c)
返回与c本回合进行过战斗的卡片组
进行过战斗指发生过伤害的计算，用于剑斗兽等卡的判定</Description>
		<Priority>0</Priority>
		<Text>GetBattledGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetBattledGroupCount</Content>
		<Description>●int Card.GetBattledGroupCount(Card c)
返回与c本回合进行过战斗的的卡片数量</Description>
		<Priority>0</Priority>
		<Text>GetBattledGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetBattlePosition</Content>
		<Description>●int Card.GetBattlePosition(Card c)
返回c在本次战斗发生之前的表示形式</Description>
		<Priority>0</Priority>
		<Text>GetBattlePosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetBattleTarget</Content>
		<Description>●Card Card.GetBattleTarget(Card c)
返回与c进行战斗的卡</Description>
		<Priority>0</Priority>
		<Text>GetBattleTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCardTarget</Content>
		<Description>●Group Card.GetCardTarget(Card c)
返回c当前所有的永续对象</Description>
		<Priority>0</Priority>
		<Text>GetCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCardTargetCount</Content>
		<Description>●int Card.GetCardTargetCount(Card c)
返回c当前的永续对象的数量</Description>
		<Priority>0</Priority>
		<Text>GetCardTargetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCode</Content>
		<Description>●int Card.GetCode(Card c)
返回c的当前代号（可能因为效果改变）</Description>
		<Priority>0</Priority>
		<Text>GetCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetControler</Content>
		<Description>●int Card.GetControler(Card c)
返回c的当前控制者</Description>
		<Priority>0</Priority>
		<Text>GetControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCounter</Content>
		<Description>●int Card.GetCounter(Card c, int countertype)
返回c上的countertype类型的指示物的数量</Description>
		<Priority>0</Priority>
		<Text>GetCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetDefence</Content>
		<Description>●int Card.GetDefence(Card c)
返回c的当前守备力，返回值是负数表示是"?"</Description>
		<Priority>0</Priority>
		<Text>GetDefence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetDestination</Content>
		<Description>●int Card.GetDestination(Card c)
返回c位置变化的目的地
此函数仅在处理位置转移代替效果时有效</Description>
		<Priority>0</Priority>
		<Text>GetDestination</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetEffectCount</Content>
		<Description>●int Card.GetEffectCount(Card c, int code)
返回c受到影响的种类是code的效果的数量</Description>
		<Priority>0</Priority>
		<Text>GetEffectCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetEquipCount</Content>
		<Description>●int Card.GetEquipCount(Card c)
返回c当前装备着的卡片数量</Description>
		<Priority>0</Priority>
		<Text>GetEquipCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetEquipGroup</Content>
		<Description>●Group Card.GetEquipGroup(Card c)
返回c当前装备着的卡片组</Description>
		<Priority>0</Priority>
		<Text>GetEquipGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetEquipTarget</Content>
		<Description>●Card Card.GetEquipTarget(Card c)
返回c当前的装备对象</Description>
		<Priority>0</Priority>
		<Text>GetEquipTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFieldID</Content>
		<Description>●int Card.GetFieldID(Card c)
返回c转移到当前位置的时间标识
此数值唯一，越小表示c是越早出现在那个位置
卡片从里侧翻开也会改变此数值</Description>
		<Priority>0</Priority>
		<Text>GetFieldID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFirstCardTarget</Content>
		<Description>●Card Card.GetFirstCardTarget(Card c)
返回c当前第一个永续对象</Description>
		<Priority>0</Priority>
		<Text>GetFirstCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFlagEffect</Content>
		<Description>●int Card.GetFlagEffect(Card c, int code)
返回c的种类是code的标识效果的数量</Description>
		<Priority>0</Priority>
		<Text>GetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFlagEffectLabel</Content>
		<Description>●int Card.GetFlagEffectLabel(Card c, int code)
返回c的种类为code的标识效果的Label，没有此效果则返回nil</Description>
		<Priority>0</Priority>
		<Text>GetFlagEffectLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLeaveFieldDest</Content>
		<Description>●int Card.GetLeaveFieldDest(Card c)
返回c离场时因改变去向的效果（如大宇宙）的目的地</Description>
		<Priority>0</Priority>
		<Text>GetLeaveFieldDest</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLeftScale</Content>
		<Description>●int Card.GetLeftScale(Card c)
返回c的左灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>GetLeftScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLevel</Content>
		<Description>●int Card.GetLevel(Card c)
返回c的当前等级</Description>
		<Priority>0</Priority>
		<Text>GetLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLocation</Content>
		<Description>●int Card.GetLocation(Card c)
返回c当前的所在位置</Description>
		<Priority>0</Priority>
		<Text>GetLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetMaterial</Content>
		<Description>●Group Card.GetMaterial(Card c)
返回c出场使用的素材</Description>
		<Priority>0</Priority>
		<Text>GetMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetMaterialCount</Content>
		<Description>●int Card.GetMaterialCount(Card c)
返回c出场使用的素材数量</Description>
		<Priority>0</Priority>
		<Text>GetMaterialCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalAttribute</Content>
		<Description>●int Card.GetOriginalAttribute(Card c)
返回c的卡片记载的属性</Description>
		<Priority>0</Priority>
		<Text>GetOriginalAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalCode</Content>
		<Description>●int Card.GetOriginalCode(Card c)
返回c的卡片记载的代号</Description>
		<Priority>0</Priority>
		<Text>GetOriginalCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalLeftScale</Content>
		<Description>●int Card.GetOriginalLeftScale(Card c)
返回c的原本的左灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>GetOriginalLeftScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalLevel</Content>
		<Description>●int Card.GetOriginalLevel(Card c)
返回c的卡片记载的等级</Description>
		<Priority>0</Priority>
		<Text>GetOriginalLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalRace</Content>
		<Description>●int Card.GetOriginalRace(Card c)
返回c的卡片记载的种族</Description>
		<Priority>0</Priority>
		<Text>GetOriginalRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalRank</Content>
		<Description>●int Card.GetOriginalRank(Card c)
返回c的卡片记载的阶级</Description>
		<Priority>0</Priority>
		<Text>GetOriginalRank</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalRightScale</Content>
		<Description>●int Card.GetOriginalRightScale(Card c)
返回c的原本的右灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>GetOriginalRightScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOriginalType</Content>
		<Description>●int Card.GetOriginalType(Card c)
返回c的卡片记载的类型</Description>
		<Priority>0</Priority>
		<Text>GetOriginalType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOverlayCount</Content>
		<Description>●int Card.GetOverlayCount(Card c)
返回c当前叠放着的卡片数量</Description>
		<Priority>0</Priority>
		<Text>GetOverlayCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOverlayGroup</Content>
		<Description>●Group Card.GetOverlayGroup(Card c)
返回c当前叠放着的卡片组</Description>
		<Priority>0</Priority>
		<Text>GetOverlayGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOverlayTarget</Content>
		<Description>●Card Card.GetOverlayTarget(Card c)
返回以c为超量素材的卡</Description>
		<Priority>0</Priority>
		<Text>GetOverlayTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOwner</Content>
		<Description>●int Card.GetOwner(Card c)
返回c的持有者</Description>
		<Priority>0</Priority>
		<Text>GetOwner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOwnerTarget</Content>
		<Description>●Group Card.GetOwnerTarget(Card c)
返回取c作为永续对象的所有卡</Description>
		<Priority>0</Priority>
		<Text>GetOwnerTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOwnerTargetCount</Content>
		<Description>●int Card.GetOwnerTargetCount(Card c)
返回取c作为永续对象的卡的数量</Description>
		<Priority>0</Priority>
		<Text>GetOwnerTargetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPosition</Content>
		<Description>●int Card.GetPosition(Card c)
返回c当前的表示形式</Description>
		<Priority>0</Priority>
		<Text>GetPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousAttackOnField</Content>
		<Description>●int Card.GetPreviousAttackOnField(Card c)
返回c位置变化之前的攻击力</Description>
		<Priority>0</Priority>
		<Text>GetPreviousAttackOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousAttributeOnField</Content>
		<Description>●int Card.GetPreviousAttributeOnField(Card c)
返回c位置变化之前的属性</Description>
		<Priority>0</Priority>
		<Text>GetPreviousAttributeOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousCodeOnField</Content>
		<Description>●int Card.GetPreviousCodeOnField(Card c)
返回c位置变化之前的卡号</Description>
		<Priority>0</Priority>
		<Text>GetPreviousCodeOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousControler</Content>
		<Description>●int Card.GetPreviousControler(Card c)
返回c的位置变化之前的控制者</Description>
		<Priority>0</Priority>
		<Text>GetPreviousControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousDefenceOnField</Content>
		<Description>●int Card.GetPreviousDefenceOnField(Card c)
返回c位置变化之前的守备力</Description>
		<Priority>0</Priority>
		<Text>GetPreviousDefenceOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousEquipTarget</Content>
		<Description>●Card Card.GetPreviousEquipTarget(Card c)
返回c之前的装备对象</Description>
		<Priority>0</Priority>
		<Text>GetPreviousEquipTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousLevelOnField</Content>
		<Description>●int Card.GetPreviousLevelOnField(Card c)
返回c位置变化之前的等级</Description>
		<Priority>0</Priority>
		<Text>GetPreviousLevelOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousLocation</Content>
		<Description>●int Card.GetPreviousLocation(Card c)
返回c位置变化前的所在的位置</Description>
		<Priority>0</Priority>
		<Text>GetPreviousLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousPosition</Content>
		<Description>●int Card.GetPreviousPosition(Card c)
返回c位置变化前的表示形式</Description>
		<Priority>0</Priority>
		<Text>GetPreviousPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousRaceOnField</Content>
		<Description>●int Card.GetPreviousRaceOnField(Card c)
返回c位置变化之前的种族</Description>
		<Priority>0</Priority>
		<Text>GetPreviousRaceOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousRankOnField</Content>
		<Description>●int Card.GetPreviousRankOnField(Card c)
返回c位置变化之前的阶级</Description>
		<Priority>0</Priority>
		<Text>GetPreviousRankOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousSequence</Content>
		<Description>●int Card.GetPreviousSequence(Card c)
返回c位置变化前的序号</Description>
		<Priority>0</Priority>
		<Text>GetPreviousSequence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetPreviousTypeOnField</Content>
		<Description>●int Card.GetPreviousTypeOnField(Card c)
返回c位置变化之前的类型</Description>
		<Priority>0</Priority>
		<Text>GetPreviousTypeOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetRace</Content>
		<Description>●int Card.GetRace(Card c)
返回c的当前种族
注：对某些多种族怪兽如动画效果的魔术猿，此函数的返回值可能是几个种族的组合值</Description>
		<Priority>0</Priority>
		<Text>GetRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetRank</Content>
		<Description>●int Card.GetRank(Card c)
返回c的当前阶级</Description>
		<Priority>0</Priority>
		<Text>GetRank</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetRealFieldID</Content>
		<Description>●int Card.GetRealFieldID(Card c)
返回c转移到当前位置的真实的时间标识
卡片从里侧翻开不会改变此数值</Description>
		<Priority>0</Priority>
		<Text>GetRealFieldID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetReason</Content>
		<Description>●int Card.GetReason(Card c)
返回c的位置变化原因</Description>
		<Priority>0</Priority>
		<Text>GetReason</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetReasonCard</Content>
		<Description>●Card Card.GetReasonCard(Card c)
返回导致c的位置变化的卡
此函数仅在某卡被战斗破坏时，因为上级召唤被解放，或者成为特殊召唤使用的素材时有效</Description>
		<Priority>0</Priority>
		<Text>GetReasonCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetReasonEffect</Content>
		<Description>●Effect Card.GetReasonEffect(Card c)
返回导致c的位置变化的效果</Description>
		<Priority>0</Priority>
		<Text>GetReasonEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetReasonPlayer</Content>
		<Description>●int Card.GetReasonPlayer(Card c)
返回导致c的位置变化的玩家</Description>
		<Priority>0</Priority>
		<Text>GetReasonPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetRightScale</Content>
		<Description>●int Card.GetRightScale(Card c)
返回c的右灵摆刻度</Description>
		<Priority>0</Priority>
		<Text>GetRightScale</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetRitualLevel</Content>
		<Description>●int Card.GetRitualLevel(Card c, Card rc)
返回c的对于仪式怪兽rc仪式解放等级
此函数除了某些特定卡如仪式供物，返回值与Card.GetLevel(c)相同</Description>
		<Priority>0</Priority>
		<Text>GetRitualLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetSequence</Content>
		<Description>●int Card.GetSequence(Card c)
返回c在当前位置的序号
在场上时，序号代表所在的格子，从左往右分别是0-4，场地魔法格的序号为5，左右灵摆区域为6-7
在其它地方时，序号表示的是第几张卡，最下面的卡的序号为0</Description>
		<Priority>0</Priority>
		<Text>GetSequence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetSummonLocation</Content>
		<Description>●int Card.GetSummonLocation(Card c)
返回c的召唤位置</Description>
		<Priority>0</Priority>
		<Text>GetSummonLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetSummonPlayer</Content>
		<Description>●int Card.GetSummonPlayer(Card c)
返回召唤/特殊召唤c上场的玩家</Description>
		<Priority>0</Priority>
		<Text>GetSummonPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetSummonType</Content>
		<Description>●int Card.GetSummonType(Card c)
返回c的召唤/特殊召唤的方式</Description>
		<Priority>0</Priority>
		<Text>GetSummonType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetSynchroLevel</Content>
		<Description>●int Card.GetSynchroLevel(Card c, Card sc)
返回c的对于同调怪兽sc的同调用等级
此函数除了某些特定卡如调节支援士，返回值与Card.GetLevel(c)相同</Description>
		<Priority>0</Priority>
		<Text>GetSynchroLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTextAttack</Content>
		<Description>●int Card.GetTextAttack(Card c)
返回c的卡片记载的攻击力</Description>
		<Priority>0</Priority>
		<Text>GetTextAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTextDefence</Content>
		<Description>●int Card.GetTextDefence(Card c)
返回c的卡片记载的守备力</Description>
		<Priority>0</Priority>
		<Text>GetTextDefence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTributeRequirement</Content>
		<Description>●int,int Card.GetTributeRequirement(Card c)
返回通常召唤c所需要的祭品的最小和最大数量</Description>
		<Priority>0</Priority>
		<Text>GetTributeRequirement</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTurnCounter</Content>
		<Description>●int Card.GetTurnCounter(Card c)
返回c的回合计数器</Description>
		<Priority>0</Priority>
		<Text>GetTurnCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTurnID</Content>
		<Description>●int Card.GetTurnID(Card c)
返回c转移到当前位置的回合</Description>
		<Priority>0</Priority>
		<Text>GetTurnID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetType</Content>
		<Description>●int Card.GetType(Card c)
返回c的当前类型</Description>
		<Priority>0</Priority>
		<Text>GetType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetUnionCount</Content>
		<Description>●int Card.GetUnionCount(Card c)
返回c当前装备的同盟卡数量</Description>
		<Priority>0</Priority>
		<Text>GetUnionCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToChangeControler</Content>
		<Description>●bool Card.IsAbleToChangeControler(Card c)
检查c是否可以改变控制权
注：仅当卡收到了“不能改变控制权”的效果的影响时，此函数返回false</Description>
		<Priority>0</Priority>
		<Text>IsAbleToChangeControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToDeck</Content>
		<Description>●bool Card.IsAbleToDeck(Card c)
检查c是否可以送去卡组</Description>
		<Priority>0</Priority>
		<Text>IsAbleToDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToDeckAsCost</Content>
		<Description>●bool Card.IsAbleToDeckAsCost(Card c)
检查c是否可以作为cost送去卡组</Description>
		<Priority>0</Priority>
		<Text>IsAbleToDeckAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToDeckOrExtraAsCost</Content>
		<Description>●bool Card.IsAbleToDeckOrExtraAsCost(Card c)
检查c是否可以作为cost送去卡组或额外卡组（用于新宇侠、剑斗兽融合怪兽的召唤手续检测）</Description>
		<Priority>0</Priority>
		<Text>IsAbleToDeckOrExtraAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToExtra</Content>
		<Description>●bool Card.IsAbleToExtra(Card c)
检查c是否可以送去额外卡组
对于非融合，同调，超量卡此函数均返回false</Description>
		<Priority>0</Priority>
		<Text>IsAbleToExtra</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToExtraAsCost</Content>
		<Description>●bool Card.IsAbleToExtraAsCost(Card c)
检查c是否可以作为cost送去额外卡组</Description>
		<Priority>0</Priority>
		<Text>IsAbleToExtraAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToGrave</Content>
		<Description>●bool Card.IsAbleToGrave(Card c)
检查c是否可以送去墓地</Description>
		<Priority>0</Priority>
		<Text>IsAbleToGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToGraveAsCost</Content>
		<Description>●bool Card.IsAbleToGraveAsCost(Card c)
检查c是否可以作为cost送去墓地</Description>
		<Priority>0</Priority>
		<Text>IsAbleToGraveAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToHand</Content>
		<Description>●bool Card.IsAbleToHand(Card c)
检查c是否可以送去手牌
注：仅当卡片或者玩家受到“不能加入手牌”的效果的影响时（如雷王）此函数才返回false</Description>
		<Priority>0</Priority>
		<Text>IsAbleToHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToHandAsCost</Content>
		<Description>●bool Card.IsAbleToHandAsCost(Card c)
检查c是否可以作为cost送去手牌
注：此函数会在Card.IsAbleToHand的基础上追加检测c的实际目的地
当c送往手牌会被送去其它地方时（如缩退回路适用中，或者c是融合，同调和超量怪的一种），此函数返回false</Description>
		<Priority>0</Priority>
		<Text>IsAbleToHandAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToRemove</Content>
		<Description>●bool Card.IsAbleToRemove(Card c[, int player])
检查c是否可以被玩家player除外</Description>
		<Priority>0</Priority>
		<Text>IsAbleToRemove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToRemoveAsCost</Content>
		<Description>●bool Card.IsAbleToRemoveAsCost(Card c)
检查c是否可以作为cost除外</Description>
		<Priority>0</Priority>
		<Text>IsAbleToRemoveAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAttackable</Content>
		<Description>●bool Card.IsAttackable(Card c)
检查c是否可以攻击</Description>
		<Priority>0</Priority>
		<Text>IsAttackable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAttackAbove</Content>
		<Description>●bool Card.IsAttackAbove(Card c, int atk)
检查c是否是攻击力atk以上</Description>
		<Priority>0</Priority>
		<Text>IsAttackAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAttackBelow</Content>
		<Description>●bool Card.IsAttackBelow(Card c, int atk)
检查c是否是攻击力atk以下（至少为0）</Description>
		<Priority>0</Priority>
		<Text>IsAttackBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAttackPos</Content>
		<Description>●bool Card.IsAttackPos(Card c)
检查c是否是攻击表示</Description>
		<Priority>0</Priority>
		<Text>IsAttackPos</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAttribute</Content>
		<Description>●bool Card.IsAttribute(Card c, int attribute)
检查c是否属于属性attribute</Description>
		<Priority>0</Priority>
		<Text>IsAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanAddCounter</Content>
		<Description>●bool Card.IsCanAddCounter(Card c, int countertype, int count)
检查c是否可以放置count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>IsCanAddCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanBeBattleTarget</Content>
		<Description>●bool Card.IsCanBeBattleTarget(Card c1, Card c2)
检查c1是否可以成为c2的攻击目标</Description>
		<Priority>0</Priority>
		<Text>IsCanBeBattleTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanBeEffectTarget</Content>
		<Description>●bool Card.IsCanBeEffectTarget(Card c, Effect e)
检查c是否可以成为效果e的对象</Description>
		<Priority>0</Priority>
		<Text>IsCanBeEffectTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanBeFusionMaterial</Content>
		<Description>●bool Card.IsCanBeFusionMaterial(Card c[, bool ignore_mon=false])
检查c是否可以成为融合素材，ignore_mon=true则不检查c是否是怪兽</Description>
		<Priority>0</Priority>
		<Text>IsCanBeFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanBeSpecialSummoned</Content>
		<Description>●bool Card.IsCanBeSpecialSummoned(Card c, Effect e, int sumtype, int sumplayer, bool nocheck, bool nolimit[, int sumpos=POS_FACEUP, int target_player=sumplayer])
检查c是否可以被玩家sumplayer用效果e以sumtype方式和sumpos表示形式特殊召唤到target_player场上
如果nocheck是true则不检查c的召唤条件，如果nolimit是true则不检查c的苏生限制</Description>
		<Priority>0</Priority>
		<Text>IsCanBeSpecialSummoned</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanBeSynchroMaterial</Content>
		<Description>●bool Card.IsCanBeSynchroMaterial(Card c[, Card sc, Card tuner])
检查c是否可以成为同调怪兽sc的同调素材</Description>
		<Priority>0</Priority>
		<Text>IsCanBeSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanBeXyzMaterial</Content>
		<Description>●bool Card.IsCanBeXyzMaterial(Card c, Card sc|nil)
检查c是否可以成为超量怪兽sc的超量素材</Description>
		<Priority>0</Priority>
		<Text>IsCanBeXyzMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanRemoveCounter</Content>
		<Description>●bool Card.IsCanRemoveCounter(Card c, int player, int countertype, int count, int reason)
检查玩家player是否可以以原因reason移除c上的count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>IsCanRemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanTurnSet</Content>
		<Description>●bool Card.IsCanTurnSet(Card c)
检查c是否可以转成里侧表示</Description>
		<Priority>0</Priority>
		<Text>IsCanTurnSet</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsChainAttackable</Content>
		<Description>●bool Card.IsChainAttackable(Card c[, int ac = 2, bool monsteronly = false])
检查c是否可以连续攻击，c的攻击宣言次数&gt;=ac则返回false
注：当c因为闪光之双剑等效果进行过多次攻击之后此函数返回false</Description>
		<Priority>0</Priority>
		<Text>IsChainAttackable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCode</Content>
		<Description>●bool Card.IsCode(Card c, int code)
检查c的卡号是否是code</Description>
		<Priority>0</Priority>
		<Text>IsCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsControler</Content>
		<Description>●bool Card.IsControler(Card c, int controler)
检查c的当前控制着是否是controler</Description>
		<Priority>0</Priority>
		<Text>IsControler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsControlerCanBeChanged</Content>
		<Description>●bool Card.IsControlerCanBeChanged(Card c)
检查c的控制权是否可以改变
注：此函数会在Card.IsAbleToChangeControler的基础上追加检测场上的空格位</Description>
		<Priority>0</Priority>
		<Text>IsControlerCanBeChanged</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDefenceAbove</Content>
		<Description>●bool Card.IsDefenceAbove(Card c, int def)
检查c是否是守备力def以上</Description>
		<Priority>0</Priority>
		<Text>IsDefenceAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDefenceBelow</Content>
		<Description>●bool Card.IsDefenceBelow(Card c, int def)
检查c是否是守备力def以下（至少为0）</Description>
		<Priority>0</Priority>
		<Text>IsDefenceBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDefencePos</Content>
		<Description>●bool Card.IsDefencePos(Card c)
检查c是否是守备表示</Description>
		<Priority>0</Priority>
		<Text>IsDefencePos</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDestructable</Content>
		<Description>●bool Card.IsDestructable(Card c[, Effect e])
检查c是否是可破坏的
注：不可破坏指的是类似场地护罩，宫廷的规矩等“破壊できない”的效果</Description>
		<Priority>0</Priority>
		<Text>IsDestructable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDirectAttacked</Content>
		<Description>●bool Card.IsDirectAttacked(Card c)
检查c是否直接攻击过</Description>
		<Priority>0</Priority>
		<Text>IsDirectAttacked</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDisabled</Content>
		<Description>●bool Card.IsDisabled(Card c)
检查c是否处于无效状态</Description>
		<Priority>0</Priority>
		<Text>IsDisabled</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDiscardable</Content>
		<Description>●bool Card.IsDiscardable(Card[, int reason=REASON_COST])
检查c是否可以丢弃
注：此函数仅用于检测，
以REASON_DISCARD作为原因把一张手卡送墓并不会导致那张卡不能丢弃</Description>
		<Priority>0</Priority>
		<Text>IsDiscardable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDualState</Content>
		<Description>●bool Card.IsDualState(Card c)
检查c属否处于再召唤状态</Description>
		<Priority>0</Priority>
		<Text>IsDualState</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsFacedown</Content>
		<Description>●bool Card.IsFacedown(Card c)
检查c是否是里侧表示</Description>
		<Priority>0</Priority>
		<Text>IsFacedown</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsFaceup</Content>
		<Description>●bool Card.IsFaceup(Card c)
检查c是否是表侧表示</Description>
		<Priority>0</Priority>
		<Text>IsFaceup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsForbidden</Content>
		<Description>●bool Card.IsForbidden(Card c)
检查c是否处于被宣言禁止状态</Description>
		<Priority>0</Priority>
		<Text>IsForbidden</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsHasCardTarget</Content>
		<Description>●bool Card.IsHasCardTarget(Card c1, Card c2)
检查c1是否取c2为永续对象</Description>
		<Priority>0</Priority>
		<Text>IsHasCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsHasEffect</Content>
		<Description>●bool Card.IsHasEffect(Card c, int code)
检查c是否受到效果种类是code的效果的影响</Description>
		<Priority>0</Priority>
		<Text>IsHasEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsImmuneToEffect</Content>
		<Description>●bool Card.IsImmuneToEffect(Card c, Effect e)
检查c是否免疫效果e（即不受效果e的影响）</Description>
		<Priority>0</Priority>
		<Text>IsImmuneToEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsLevelAbove</Content>
		<Description>●bool Card.IsLevelAbove(Card c, int level)
检查c是否是等级level以上</Description>
		<Priority>0</Priority>
		<Text>IsLevelAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsLevelBelow</Content>
		<Description>●bool Card.IsLevelBelow(Card c, int level)
检查c是否是等级level以下（至少为1）</Description>
		<Priority>0</Priority>
		<Text>IsLevelBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsLocation</Content>
		<Description>●bool Card.IsLocation(Card c, int location)
检查c当前位置是否是location
注：当怪兽召唤，反转召唤，特殊召唤时召唤成功之前，
并且location=LOCATION_MZONE时，此函数返回false</Description>
		<Priority>0</Priority>
		<Text>IsLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsMSetable</Content>
		<Description>●bool Card.IsMSetable(Card, bool ignore_count, Effect e|nil[, int minc=0])
检查c是否可进行通常召唤的set，ignore_count=true则不检查召唤次数限制
e~=nil则检查c是否可以以效果e进行通常召唤的set，minc表示至少需要的祭品数（用于区分妥协召唤set与上级召唤set）</Description>
		<Priority>0</Priority>
		<Text>IsMSetable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsNotTuner</Content>
		<Description>●bool Card.IsNotTuner(Card c)
检查c是否可以当成非调整来使用</Description>
		<Priority>0</Priority>
		<Text>IsNotTuner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsOnField</Content>
		<Description>●bool Card.IsOnField(Card c)
检查c是否在场
注：当怪兽召唤，反转召唤，特殊召唤时召唤成功之前，此函数返回false</Description>
		<Priority>0</Priority>
		<Text>IsOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPosition</Content>
		<Description>●bool Card.IsPosition(Card c, int pos)
检查c是否是表示形式pos</Description>
		<Priority>0</Priority>
		<Text>IsPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPreviousLocation</Content>
		<Description>●bool Card.IsPreviousLocation(Card c, int location)
检查c之前的位置是否是location</Description>
		<Priority>0</Priority>
		<Text>IsPreviousLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPreviousPosition</Content>
		<Description>●bool Card.IsPreviousPosition(Card c, int pos)
检查c位置变化之前是否是表示形式pos</Description>
		<Priority>0</Priority>
		<Text>IsPreviousPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPublic</Content>
		<Description>●bool Card.IsPublic(Card c)
检查c是否处于公开状态</Description>
		<Priority>0</Priority>
		<Text>IsPublic</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsRace</Content>
		<Description>●bool Card.IsRace(Card c, int race)
检查c是否属于种族race</Description>
		<Priority>0</Priority>
		<Text>IsRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsRankAbove</Content>
		<Description>●bool Card.IsRankAbove(Card c, int rank)
检查c是否是阶级rank以上</Description>
		<Priority>0</Priority>
		<Text>IsRankAbove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsRankBelow</Content>
		<Description>●bool Card.IsRankBelow(Card c, int rank)
检查c是否是阶级rank以下（至少为1）</Description>
		<Priority>0</Priority>
		<Text>IsRankBelow</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsReason</Content>
		<Description>●bool Card.IsReason(Card c, int reason)
检查c是否包含原因reason</Description>
		<Priority>0</Priority>
		<Text>IsReason</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsRelateToBattle</Content>
		<Description>●bool Card.IsRelateToBattle(Card c)
检查c是否和本次战斗关联
注：此效果通常用于伤害计算后伤害阶段结束前，用于检查战斗的卡是否离场过</Description>
		<Priority>0</Priority>
		<Text>IsRelateToBattle</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsRelateToCard</Content>
		<Description>●bool Card.IsRelateToCard(Card c1, Card c2)
检查c1是否和c2有联系</Description>
		<Priority>0</Priority>
		<Text>IsRelateToCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsRelateToEffect</Content>
		<Description>●bool Card.IsRelateToEffect(Card c, Effect e)
检查c是否和效果e有联系
注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象
（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）
会自动与那个效果建立联系，一旦离场，联系会重置</Description>
		<Priority>0</Priority>
		<Text>IsRelateToEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsReleasable</Content>
		<Description>●bool Card.IsReleasable(Card c)
检查c是否可以被解放（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>IsReleasable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsReleasableByEffect</Content>
		<Description>●bool Card.IsReleasableByEffect(Card c)
检查c是否可以被效果解放</Description>
		<Priority>0</Priority>
		<Text>IsReleasableByEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsSetCard</Content>
		<Description>●bool Card.IsSetCard(Card c, int setname)
检查c是否是名字含有setname的卡</Description>
		<Priority>0</Priority>
		<Text>IsSetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsSpecialSummonable</Content>
		<Description>●bool Card.IsSpecialSummonable(Card c)
检查是否可以对c进行特殊召唤手续</Description>
		<Priority>0</Priority>
		<Text>IsSpecialSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsSSetable</Content>
		<Description>●bool Card.IsSSetable(Card c[, bool ignore_field=false])
检查c是否可以set到魔法陷阱区，ignore_field=true则无视魔陷区格子限制</Description>
		<Priority>0</Priority>
		<Text>IsSSetable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsStatus</Content>
		<Description>●bool Card.IsStatus(Card c, int status)
检查c是否包含某个状态码</Description>
		<Priority>0</Priority>
		<Text>IsStatus</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsSummonable</Content>
		<Description>●bool Card.IsSummonable(Card c, bool ignore_count, Effect e|nil[, int minc=0])
检查c是否进行通常召唤（不包含通常召唤的set)，ignore_count=true则不检查召唤次数限制
e~=nil则检查c是否可以以效果e进行通常召唤，minc表示至少需要的祭品数（用于区分妥协召唤与上级召唤）</Description>
		<Priority>0</Priority>
		<Text>IsSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsSummonableCard</Content>
		<Description>●bool Card.IsSummonableCard(Card c)
检查c是否是可通常召唤的卡</Description>
		<Priority>0</Priority>
		<Text>IsSummonableCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsSynchroSummonable</Content>
		<Description>●bool Card.IsSynchroSummonable(Card c ,Card tuner|nil[, Group mg])
检查是否可以以tuner作为调整，场上的卡[或mg]为同调素材对c进行同调召唤手续
如果tuner是nil，此函数与Card.IsSpecialSummonable作用相同</Description>
		<Priority>0</Priority>
		<Text>IsSynchroSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsType</Content>
		<Description>●bool Card.IsType(Card c, int type)
检查c是否属于类型type</Description>
		<Priority>0</Priority>
		<Text>IsType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsXyzLevel</Content>
		<Description>●bool Card.IsXyzLevel(Card c, Card xyzc, int lv)
检查c对于超量怪兽xyzc的超量用等级是否是lv</Description>
		<Priority>0</Priority>
		<Text>IsXyzLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsXyzSummonable</Content>
		<Description>●bool Card.IsXyzSummonable(Card c, Group mg|nil)
检查是否可以以mg为超量素材对c进行超量召唤手续
如果mg为nil，此函数与Card.IsSpecialSummonable作用相同</Description>
		<Priority>0</Priority>
		<Text>IsXyzSummonable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RegisterEffect</Content>
		<Description>●int Card.RegisterEffect(Card c, Effect e[, bool forced=false])
把效果e注册给c，返回效果的全局id，并设置e的Handler为c
默认情况下注册时如果c带有免疫e的效果那么注册会失败
如果forced为true则不会检查c对e的免疫效果</Description>
		<Priority>0</Priority>
		<Text>RegisterEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RegisterFlagEffect</Content>
		<Description>●Effect Card.RegisterFlagEffect(Card c, int code, int reset_flag, int property, int reset_count[, int label, int desc])
为c注册一个标识用效果
注：注册给卡的标识用效果不会用于系统，
即使code与内置效果code重合也不会影响，
并且类型总是EFFECT_TYPE_SINGLE，reset方法，property和一般的效果相同，
并且不会无效化，不受卡的免疫效果影响</Description>
		<Priority>0</Priority>
		<Text>RegisterFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReleaseEffectRelation</Content>
		<Description>●void Card.ReleaseEffectRelation(Card c,Effect e)
手动释放c与效果e的联系</Description>
		<Priority>0</Priority>
		<Text>ReleaseEffectRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReleaseRelation</Content>
		<Description>●void Card.ReleaseRelation(Card c1, Card c2)
手动释放c1对于c2的联系</Description>
		<Priority>0</Priority>
		<Text>ReleaseRelation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RemoveCounter</Content>
		<Description>●void Card.RemoveCounter(Card c, int player, int countertype, int count, int reason)
让玩家player以原因reason移除c上的count个countertype类型的指示物</Description>
		<Priority>0</Priority>
		<Text>RemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RemoveOverlayCard</Content>
		<Description>●bool Card.RemoveOverlayCard(Card c, int player, int min, int max, int reason)
以reason为原因，让玩家player移除c叠放的min-max张卡，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>RemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ResetEffect</Content>
		<Description>●void Card.ResetEffect(Card c, int id, int reset_type)
以重置类型为reset_type、重置种类为id手动重置c受到的效果的影响
重置类型只能是以下类型，对应的重置种类为
RESET_EVENT       发生事件重置        id为事件
RESET_PHASE       阶段结束重置        id为阶段
RESET_CODE        重置指定code的效果  id为效果的种类code，只能重置EFFECT_TYPE_SINGLE的永续型效果
RESET_COPY        重置复制的效果      id为copy_id
RESET_CARD        重置卡片的效果      id为效果owner的卡号</Description>
		<Priority>0</Priority>
		<Text>ResetEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ResetFlagEffect</Content>
		<Description>●void Card.ResetFlagEffect(Card c, int code)
手动清除c的种类是code的标识效果</Description>
		<Priority>0</Priority>
		<Text>ResetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ResetNegateEffect</Content>
		<Description>●void Card.ResetNegateEffect(Card c[, int code1,...])
重置c受到的卡号为code1, code2...的卡片的效果的影响</Description>
		<Priority>0</Priority>
		<Text>ResetNegateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReverseInDeck</Content>
		<Description>●void Card.ReverseInDeck(Card c)
设置c在卡组中正面表示</Description>
		<Priority>0</Priority>
		<Text>ReverseInDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCardTarget</Content>
		<Description>●void Card.SetCardTarget(Card c1, Card c2)
把c2作为c1的永续对象
c1和c2的联系会在c1或c2任意一卡离场或变成里侧表示时reset</Description>
		<Priority>0</Priority>
		<Text>SetCardTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCounterLimit</Content>
		<Description>●void Card.SetCounterLimit(Card c, int countertype, int count)
设定c放置countertype类型指示物的上限</Description>
		<Priority>0</Priority>
		<Text>SetCounterLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetFlagEffectLabel</Content>
		<Description>●bool Card.SetFlagEffectLabel(Card c, int code, int label)
返回c是否存在种类为code的标识效果，并设置其Label属性为label</Description>
		<Priority>0</Priority>
		<Text>SetFlagEffectLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetHint</Content>
		<Description>●void Card.SetHint(Card c, int type, int value)
为c设置类型为type的卡片提示信息
type只能为以下值，对应的value类型为
CHINT_TURN              回合数
CHINT_CARD              卡片id
CHINT_RACE              种族
CHINT_ATTRIBUTE         属性
CHINT_NUMBER            数字
CHINT_DESC              描述</Description>
		<Priority>0</Priority>
		<Text>SetHint</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetMaterial</Content>
		<Description>●void Card.SetMaterial(Card c, Group g)
把g中的所有卡作为c的素材（上级召唤，特殊召唤）</Description>
		<Priority>0</Priority>
		<Text>SetMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetSPSummonOnce</Content>
		<Description>●void Card.SetSPSummonOnce(Card c, int spsummon_code)
设置c一回合只能进行1次特殊召唤（灵兽，波动龙）
相同的spsummon_code共用1个次数</Description>
		<Priority>0</Priority>
		<Text>SetSPSummonOnce</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetStatus</Content>
		<Description>●void Card.SetStatus(Card c, int state, bool enable)
给c设置或者取消状态码
除非妳清楚的了解每个状态码的含意，否则不要轻易使用此函数</Description>
		<Priority>0</Priority>
		<Text>SetStatus</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetTurnCounter</Content>
		<Description>●void Card.SetTurnCounter(Card c, int counter)
设置c的回合计数器（光之护封剑等）</Description>
		<Priority>0</Priority>
		<Text>SetTurnCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetUniqueOnField</Content>
		<Description>●void Card.SetUniqueOnField(Card c, int s, int o, int unique_code)
设置c以unique_code只能在场上只能存在1张
s不为0会检查自己场上的唯一性，o不为0则检查对方场上的唯一性</Description>
		<Priority>0</Priority>
		<Text>SetUniqueOnField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>TrapMonsterBlock</Content>
		<Description>●void Card.TrapMonsterBlock(Card c)
使陷阱怪兽c占用一个魔法陷阱格子</Description>
		<Priority>0</Priority>
		<Text>TrapMonsterBlock</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddCard</Content>
		<Description>●Card Debug.AddCard(int code, int owner, int player, int location, int seq, int pos[, bool proc=false])
添加卡片，将卡号为code的卡片的持有者设置为owner，以表示形式pos放置在player的场上位于location上序号为seq的格子处
proc=true则解除苏生限制</Description>
		<Priority>0</Priority>
		<Text>AddCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Message</Content>
		<Description>●void Debug.Message(any msg)
显示消息</Description>
		<Priority>0</Priority>
		<Text>Message</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>PreAddCounter</Content>
		<Description>●void Debug.PreAddCounter(Card c, int counter_type, int count)
为c添加count个counter_type的指示物</Description>
		<Priority>0</Priority>
		<Text>PreAddCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>PreEquip</Content>
		<Description>●bool Debug.PreEquip(Card equip_card, Card target)
为target添加装备equip_card</Description>
		<Priority>0</Priority>
		<Text>PreEquip</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>PreSetTarget</Content>
		<Description>●void Debug.PreSetTarget(Card c, Card target)
把target选为c的永续对象</Description>
		<Priority>0</Priority>
		<Text>PreSetTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReloadFieldBegin</Content>
		<Description>●void Debug.ReloadFieldBegin(int flag)
以选项flag开始布局
	flag 残局：DUEL_ATTACK_FIRST_TURN+DUEL_SIMPLE_AI</Description>
		<Priority>0</Priority>
		<Text>ReloadFieldBegin</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReloadFieldEnd</Content>
		<Description>●void Debug.ReloadFieldEnd()
布局结束</Description>
		<Priority>0</Priority>
		<Text>ReloadFieldEnd</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetAIName</Content>
		<Description>●void Debug.SetAIName(string name)
设置AI的名字</Description>
		<Priority>0</Priority>
		<Text>SetAIName</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetPlayerInfo</Content>
		<Description>●void Debug.SetPlayerInfo(int playerid, int lp, int startcount, int drawcount)
设置玩家信息，基本分为lp，初始手卡为startcount张，每回合抽drawcount张
playerid 下方 0,上方 1</Description>
		<Priority>0</Priority>
		<Text>SetPlayerInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ShowHint</Content>
		<Description>●void Debug.ShowHint(string msg)
显示消息提示框</Description>
		<Priority>0</Priority>
		<Text>ShowHint</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddCustomActivityCounter</Content>
		<Description>●void Duel.AddCustomActivityCounter(int counter_id, int activity_type, function f)
设置操作类型为activity_type、代号为counter_id的计数器，放在initial_effect函数内
f为过滤函数，以Card类型为参数，返回值为false的卡片进行以下类型的操作，计数器增加1（目前最多为1）
activity_type为以下类型
ACTIVITY_SUMMON         召唤（不包括通常召唤的set）
ACTIVITY_NORMALSUMMON   通常召唤（包括通常召唤的set）
ACTIVITY_SPSUMMON       特殊召唤
ACTIVITY_FLIPSUMMON     反转召唤
ACTIVITY_CHAIN          发动效果</Description>
		<Priority>0</Priority>
		<Text>AddCustomActivityCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AdjustInstantly</Content>
		<Description>●void Duel.AdjustInstantly([Card c])
手动刷新场上[受到卡片c影响]的卡的无效状态</Description>
		<Priority>0</Priority>
		<Text>AdjustInstantly</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AnnounceAttribute</Content>
		<Description>●int Duel.AnnounceAttribute(int player, int count, int available)
让玩家player从可选的属性中宣言count个属性
available是所有可选属性的组合值</Description>
		<Priority>0</Priority>
		<Text>AnnounceAttribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AnnounceCard</Content>
		<Description>●int Duel.AnnounceCard(int player)
让玩家player宣言一个卡片代号</Description>
		<Priority>0</Priority>
		<Text>AnnounceCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AnnounceCoin</Content>
		<Description>●int Duel.AnnounceCoin(int player)
让玩家player宣言硬币的正反面</Description>
		<Priority>0</Priority>
		<Text>AnnounceCoin</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AnnounceLevel</Content>
		<Description>●int Duel.AnnounceLevel(int player)
让玩家宣言一个等级</Description>
		<Priority>0</Priority>
		<Text>AnnounceLevel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AnnounceNumber</Content>
		<Description>●int Duel.AnnounceNumber(int player, int number, ...)
让玩家player宣言一个数字
从第二个参数开始，每一个参数代表一个可宣言的数字
返回选择的选项的序号</Description>
		<Priority>0</Priority>
		<Text>AnnounceNumber</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AnnounceRace</Content>
		<Description>●int Duel.AnnounceRace(int player, int count, int available)
让玩家player从可选的种族中宣言count个种族
available是所有可选种族的组合值</Description>
		<Priority>0</Priority>
		<Text>AnnounceRace</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AnnounceType</Content>
		<Description>●int Duel.AnnounceType(int player)
让玩家player宣言一个卡片类型</Description>
		<Priority>0</Priority>
		<Text>AnnounceType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>BreakEffect</Content>
		<Description>●void Duel.BreakEffect()
中断当前效果，使之后的效果处理视为不同时处理，此函数会造成错时点</Description>
		<Priority>0</Priority>
		<Text>BreakEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CalculateDamage</Content>
		<Description>●void Duel.CalculateDamage(Card c1, Card c2)
令c1与c2进行战斗伤害计算</Description>
		<Priority>0</Priority>
		<Text>CalculateDamage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChainAttack</Content>
		<Description>●void Duel.ChainAttack([Card c])
使攻击卡[或卡片c]可以再进行1次攻击（开辟，破灭的女王）</Description>
		<Priority>0</Priority>
		<Text>ChainAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangeAttacker</Content>
		<Description>●void Duel.ChangeAttacker(Card c)
将攻击怪兽变为c
注：此函数会使原来的攻击怪兽视为攻击过</Description>
		<Priority>0</Priority>
		<Text>ChangeAttacker</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangeAttackTarget</Content>
		<Description>●void Duel.ChangeAttackTarget(Card c|nil)
将攻击对象变为c，c为nil表示直接攻击</Description>
		<Priority>0</Priority>
		<Text>ChangeAttackTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangeBattleDamage</Content>
		<Description>●void Duel.ChangeBattleDamage(int player, int value[, bool check=true])
把玩家player在本次战斗中受到的伤害变成value，check为false则原本战斗伤害为0也改变伤害</Description>
		<Priority>0</Priority>
		<Text>ChangeBattleDamage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangeChainOperation</Content>
		<Description>●void Duel.ChangeChainOperation(int chainc, function f)
把连锁chainc的效果的处理函数换成f，用于实现“把效果变成”等的效果</Description>
		<Priority>0</Priority>
		<Text>ChangeChainOperation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangePosition</Content>
		<Description>●int Duel.ChangePosition(Card|Group targets, int au[, int ad=au, int du=au, int dd=au, bool noflip=false])
改变targets的表示形式返回实际操作的数量
表侧攻击表示的变成au，里侧攻击表示的变成ad, 
表侧守备表示变成du,里侧守备表示变成dd
如果noflip=true则不触发翻转效果（但会触发翻转时的诱发效果）</Description>
		<Priority>0</Priority>
		<Text>ChangePosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangeTargetCard</Content>
		<Description>●void Duel.ChangeTargetCard(int chainc, Group g)
把连锁chainc的对象换成g</Description>
		<Priority>0</Priority>
		<Text>ChangeTargetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangeTargetParam</Content>
		<Description>●void Duel.ChangeTargetParam(int chainc, int param)
把连锁chainc的参数换成param</Description>
		<Priority>0</Priority>
		<Text>ChangeTargetParam</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ChangeTargetPlayer</Content>
		<Description>●void Duel.ChangeTargetPlayer(int chainc, in player)
把连锁chainc的对象玩家换成player</Description>
		<Priority>0</Priority>
		<Text>ChangeTargetPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckChainTarget</Content>
		<Description>●bool Duel.CheckChainTarget(int chainc, Card c)
检查c是否是连锁chainc的效果的正确的对象</Description>
		<Priority>0</Priority>
		<Text>CheckChainTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckChainUniqueness</Content>
		<Description>●bool Duel.CheckChainUniqueness()
检查当前连锁中是否存在同名卡的发动，true表示无同名卡</Description>
		<Priority>0</Priority>
		<Text>CheckChainUniqueness</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckEvent</Content>
		<Description>●bool[,Group,int,int,Effect,int,int] Duel.CheckEvent(int event[, bool get_info])
检查当前是否是event时点
若get_info=true并且是正确的时点则还返回触发时点的信息 eg,ep,ev,re,r,rp</Description>
		<Priority>0</Priority>
		<Text>CheckEvent</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckLocation</Content>
		<Description>●bool Duel.CheckLocation(int player, int location, int seq)
检查玩家player的场上位于location序号为seq的空格是否可用</Description>
		<Priority>0</Priority>
		<Text>CheckLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckLPCost</Content>
		<Description>●bool Duel.CheckLPCost(int player, int cost)
检查玩家player是否能支付cost点lp</Description>
		<Priority>0</Priority>
		<Text>CheckLPCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckPhaseActivity</Content>
		<Description>●bool Duel.CheckPhaseActivity()
检查玩家在当前阶段是否有操作（是否处于阶段开始时，如七皇之剑）</Description>
		<Priority>0</Priority>
		<Text>CheckPhaseActivity</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckReleaseGroup</Content>
		<Description>●bool Duel.CheckReleaseGroup(int player, function f, int count, Card ex|nil, ...)
检查玩家player场上是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）
第5个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>CheckReleaseGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckReleaseGroupEx</Content>
		<Description>●boolean Duel.CheckReleaseGroupEx(int player, function f, int count, Card ex|nil, ...)
检查玩家player场上·手卡是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>CheckReleaseGroupEx</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckRemoveOverlayCard</Content>
		<Description>●bool Duel.CheckRemoveOverlayCard(int player, int s, int o, int count, int reason)
检查player能否以原因reason移除指定位置至少count张卡</Description>
		<Priority>0</Priority>
		<Text>CheckRemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckSummonedCount</Content>
		<Description>●bool Duel.CheckSummonedCount([Card c])
检查回合玩家本回合是否还能通常召唤[卡片c]</Description>
		<Priority>0</Priority>
		<Text>CheckSummonedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckSynchroMaterial</Content>
		<Description>●bool Duel.CheckSynchroMaterial(Card c, function f1, function f2, int min, int max[, Card smat, Group mg])
检查[mg中]是否存在一组[必须包括smat在内的]满足条件的min-max张卡作为同调召唤c的素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>CheckSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckTiming</Content>
		<Description>●bool Duel.CheckTiming(int timing)
检查当前是否是timing提示时点</Description>
		<Priority>0</Priority>
		<Text>CheckTiming</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckTunerMaterial</Content>
		<Description>●bool Duel.CheckTunerMaterial(Card c, Card tuner, function f1, function f2, int min, int max[, Group mg])
检查以tuner作为调整[在mg中]是否存在一组满足条件的min-max张卡作为同调召唤c的素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>CheckTunerMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckXyzMaterial</Content>
		<Description>●bool Duel.CheckXyzMaterial(Card c, function f, int lv, int min, int max, Group mg|nil)
检查场上或mg中是否存在超量召唤c的超量用等级为lv的min-max个满足条件f的叠放素材</Description>
		<Priority>0</Priority>
		<Text>CheckXyzMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ClearTargetCard</Content>
		<Description>●void Duel.ClearTargetCard()
把当前正在处理的连锁的对象全部清除</Description>
		<Priority>0</Priority>
		<Text>ClearTargetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ConfirmCards</Content>
		<Description>●void Duel.ConfirmCards(int player, Card|Group targets)
给玩家player确认targets</Description>
		<Priority>0</Priority>
		<Text>ConfirmCards</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ConfirmDecktop</Content>
		<Description>●void Duel.ConfirmDecktop(int player, int count)
确认玩家player卡组上方count张卡</Description>
		<Priority>0</Priority>
		<Text>ConfirmDecktop</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CreateToken</Content>
		<Description>●Card Duel.CreateToken(int player, int code[, int setcode, int attack, inte defence, int level, int race, int attribute])
以传入的参数数值新建一个Token并返回</Description>
		<Priority>0</Priority>
		<Text>CreateToken</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Damage</Content>
		<Description>●int Duel.Damage(int player, int value, int reason)
以reason原因给与玩家player造成value的伤害，返回实际收到的伤害值
如果受到伤害变成回复等效果的影响时，返回值为0.</Description>
		<Priority>0</Priority>
		<Text>Damage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Destroy</Content>
		<Description>●int Duel.Destroy(Card|Group targets, int reason[ ,int dest = LOCATION_GRAVE])
以reason原因破坏targets去dest，返回值是实际被破坏的数量
如果reason包含REASON_RULE，则破坏事件将不会检查卡片是否免疫效果，
不会触发代破效果并且无视“不能破坏”</Description>
		<Priority>0</Priority>
		<Text>Destroy</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>DisableShuffleCheck</Content>
		<Description>●void Duel.DisableShuffleCheck([disable=true])
使下一个操作不检查是否需要洗切卡组或手卡
注：如果不调用此函数，
除了调用Duel.DiscardDeck和Duel.Draw之外从卡组中取出卡或者把卡加入手卡
或者把卡加入卡组（非最上端或最底端）时，系统会自动在效果处理结束时洗切卡组或手卡
如果不希望如此，比如从卡组顶端除外一张卡等操作，那么需要调用此函数
此函数仅保证紧接着的一次操作不会进行洗卡检测</Description>
		<Priority>0</Priority>
		<Text>DisableShuffleCheck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>DiscardDeck</Content>
		<Description>●int Duel.DiscardDeck(int player, int count, int reason)
以原因reason把玩家player的卡组最上端count张卡送去墓地，返回实际转移的数量</Description>
		<Priority>0</Priority>
		<Text>DiscardDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>DiscardHand</Content>
		<Description>●int Duel.DiscardHand(int player, function f, int min, int max, int reason, Card ex|nil, ...)
过滤函数让玩家player选择并丢弃满足筛选条件f兵不等于ex的min-max张手卡
第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>DiscardHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Draw</Content>
		<Description>●int Duel.Draw(int player, int count, int reason)
让玩家player以原因reason抽count张卡，返回实际抽的卡的数量
如果reason含有REASON_RULE则此次抽卡不受“不能抽卡”的效果的影响</Description>
		<Priority>0</Priority>
		<Text>Draw</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>EnableGlobalFlag</Content>
		<Description>●void Duel.EnableGlobalFlag(int global_flag)
设置全局标记global_flag</Description>
		<Priority>0</Priority>
		<Text>EnableGlobalFlag</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Equip</Content>
		<Description>●bool Duel.Equip(int player, Card c1, Card c2[, bool up=true, bool is_step=false])
把c1作为玩家player的装备卡装备给c2，返回值表示是否成功
up=false则保持装备卡之前的表示形式
is_step=true则是装备过程的分解，需要配合Duel.EquipComplete使用</Description>
		<Priority>0</Priority>
		<Text>Equip</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>EquipComplete</Content>
		<Description>●void Duel.EquipComplete()
在调用Duel.Equip时，若is_step参数为true，则需调用此函数触发时点</Description>
		<Priority>0</Priority>
		<Text>EquipComplete</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetActivityCount</Content>
		<Description>●int,... Duel.GetActivityCount(int player, int activity_type, ...)
返回player进行对应的activity_type操作的次数
activity_type为以下类型
ACTIVITY_SUMMON         召唤（不包括通常召唤的放置）
ACTIVITY_NORMALSUMMON   通常召唤（包括通常召唤的放置）
ACTIVITY_SPSUMMON       特殊召唤
ACTIVITY_FLIPSUMMON     反转召唤
ACTIVITY_ATTACK         攻击
ACTIVITY_BATTLE_PHASE   进入战斗阶段</Description>
		<Priority>0</Priority>
		<Text>GetActivityCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttacker</Content>
		<Description>●Card Duel.GetAttacker()
返回此次战斗攻击的卡</Description>
		<Priority>0</Priority>
		<Text>GetAttacker</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetAttackTarget</Content>
		<Description>●Card|nil Duel.GetAttackTarget()
返回此次战斗被攻击的卡，如果返回nil表示是直接攻击</Description>
		<Priority>0</Priority>
		<Text>GetAttackTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetBattleDamage</Content>
		<Description>●int Duel.GetBattleDamage(int player)
返回玩家player在本次战斗中受到的伤害</Description>
		<Priority>0</Priority>
		<Text>GetBattleDamage</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetChainInfo</Content>
		<Description>●... Duel.GetChainInfo(int chainc, ...)
返回连锁chainc的信息，如果chainc=0，则返回当前正在处理的连锁的信息
此函数根据传入的参数个数按顺序返回相应数量的返回值参数可以是:
CHAININFO_CHAIN_COUNT               连锁序号
CHAININFO_TRIGGERING_EFFECT         连锁的效果
CHAININFO_TRIGGERING_PLAYER         连锁的玩家
CHAININFO_TRIGGERING_CONTROLER      连锁发生位置所属玩家
CHAININFO_TRIGGERING_LOCATION       连锁发生位置
CHAININFO_TRIGGERING_SEQUENCE       连锁发生的位置的序号
CHAININFO_TARGET_CARDS              连锁的对象卡片组
CHAININFO_TARGET_PLAYER             连锁的对象玩家
CHAININFO_TARGET_PARAM              连锁的对象参数
CHAININFO_DISABLE_REASON            连锁被无效的原因效果
CHAININFO_DISABLE_PLAYER            连锁被无效的原因玩家
CHAININFO_CHAIN_ID                  连锁的唯一标识
CHAININFO_TYPE                      连锁卡片的类型（怪兽·魔法·陷阱）
CHAININFO_EXTTYPE                   连锁卡片的具体类型（例如同调怪兽·永续魔法·反击陷阱）
举例：
Duel.GetChainInfo(0,CHAININFO_TRIGGERING_LOCATION,CHAININFO_TARGET_CARDS)
将会返回当前连锁发生的位置和对象卡</Description>
		<Priority>0</Priority>
		<Text>GetChainInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetChainMaterial</Content>
		<Description>●Effect Duel.GetChainMaterial(int player)
返回玩家player受到的连锁素材的效果，此函数仅用于融合类卡的效果</Description>
		<Priority>0</Priority>
		<Text>GetChainMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCoinResult</Content>
		<Description>●int,int,int,int,int Duel.GetCoinResult()
返回当前投硬币的结果</Description>
		<Priority>0</Priority>
		<Text>GetCoinResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetControl</Content>
		<Description>●bool Duel.GetControl(Card c, int player[, int reset_phase=0, int reset_count=0])
让玩家player得到c的控制权，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>GetControl</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCounter</Content>
		<Description>●int Duel.GetCounter(int player, int s, int o, int countertype)
返回场上存在的countertype类型的指示物的数量
s表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置</Description>
		<Priority>0</Priority>
		<Text>GetCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCurrentChain</Content>
		<Description>●int Duel.GetCurrentChain()
返回当前正在处理的连锁序号</Description>
		<Priority>0</Priority>
		<Text>GetCurrentChain</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCurrentPhase</Content>
		<Description>●int Duel.GetCurrentPhase()
返回当前的阶段</Description>
		<Priority>0</Priority>
		<Text>GetCurrentPhase</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCustomActivityCount</Content>
		<Description>●int Duel.GetCustomActivityCount(int counter_id, int player, int activity_type)
代号为counter_id的计数器的计数，返回player进行以下操作的次数（目前最多为1）
activity_type为以下类型
ACTIVITY_SUMMON         召唤（不包括通常召唤的set）
ACTIVITY_NORMALSUMMON   通常召唤（包括通常召唤的set）
ACTIVITY_SPSUMMON       特殊召唤
ACTIVITY_FLIPSUMMON     反转召唤
ACTIVITY_CHAIN          发动效果</Description>
		<Priority>0</Priority>
		<Text>GetCustomActivityCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetDecktopGroup</Content>
		<Description>●Group Duel.GetDecktopGroup(int player, int count)
返回玩家player的卡组最上方的count张卡</Description>
		<Priority>0</Priority>
		<Text>GetDecktopGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetDiceResult</Content>
		<Description>●int,int,int,int,int Duel.GetDiceResult()
返回当前掷骰子的结果</Description>
		<Priority>0</Priority>
		<Text>GetDiceResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetDrawCount</Content>
		<Description>●int Duel.GetDrawCount(int player)
返回玩家player每回合的规则抽卡数量</Description>
		<Priority>0</Priority>
		<Text>GetDrawCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetEnvironment</Content>
		<Description>●int,int Duel.GetEnvironment()
返回两个值，表示当前场地代号，以及当前场地效果的来源玩家
场地代号指当前生效的场地卡的代号，或者海神的巫女把场地变化效果的值
来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者</Description>
		<Priority>0</Priority>
		<Text>GetEnvironment</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFieldCard</Content>
		<Description>●Card Duel.GetFieldCard(int player, int location, int seq)
返回玩家player的场上位于location序号为seq的卡，常用于获得场地区域·灵摆区域的卡</Description>
		<Priority>0</Priority>
		<Text>GetFieldCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFieldGroup</Content>
		<Description>●Group Duel.GetFieldGroup(int player, int s, int o)
返回指定位置的卡</Description>
		<Priority>0</Priority>
		<Text>GetFieldGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFieldGroupCount</Content>
		<Description>●int Duel.GetFieldGroupCount(int player, int s, int o)
返回指定位置的卡的数量</Description>
		<Priority>0</Priority>
		<Text>GetFieldGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFirstMatchingCard</Content>
		<Description>●Card Duel.GetFirstMatchingCard(function f, int player, int s, int o, Card ex|nil, ...)
过滤函数，返回指定位置满足过滤条件f并且不等于ex的第一张卡
第6个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>GetFirstMatchingCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFirstTarget</Content>
		<Description>●Card,... Duel.GetFirstTarget()
返回连锁的所有的对象卡，一般只有一个对象时使用</Description>
		<Priority>0</Priority>
		<Text>GetFirstTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFlagEffect</Content>
		<Description>●int Duel.GetFlagEffect(int player, int code)
返回玩家player的特定的标识效果的数量</Description>
		<Priority>0</Priority>
		<Text>GetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLocationCount</Content>
		<Description>●int Duel.GetLocationCount(int player, int location[, int use_player, int reason = LOCATION_REASON_TOFIELD])
返回玩家player的场上location可用的空格数
location只能是LOCATION_MZONE或者LOCATION_SZONE
reason为LOCATION_REASON_TOFIELD或LOCATION_REASON_CONTROL</Description>
		<Priority>0</Priority>
		<Text>GetLocationCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLP</Content>
		<Description>●int Duel.GetLP(int player)
返回玩家player的当前LP</Description>
		<Priority>0</Priority>
		<Text>GetLP</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetMatchingGroup</Content>
		<Description>●Group Duel.GetMatchingGroup(function f, int player, int s, int o, Card ex|nil, ...)
过滤函数，返回指定位置满足过滤条件f并且不等于ex的卡
第6个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>GetMatchingGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetMatchingGroupCount</Content>
		<Description>●int Duel.GetMatchingGroupCount(function f, int player, int s, int o, Card ex|nil, ...)
过滤函数，返回指定位置满足过滤条件f并且不等于ex的卡的数量</Description>
		<Priority>0</Priority>
		<Text>GetMatchingGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOperatedGroup</Content>
		<Description>●Group Duel.GetOperatedGroup()
此函数返回之前一次卡片操作实际操作的卡片组包括
Duel.Destroy, Duel.Remove, Duel.SendtoGrave, 
Duel.SendtoHand, Duel.SendtoDeck, Duel.Release, 
Duel.ChangePosition, Duel.SpecialSummon, Duel.DiscardDeck</Description>
		<Priority>0</Priority>
		<Text>GetOperatedGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOperationCount</Content>
		<Description>●int Duel.GetOperationCount(int chainc)
返回连锁chainc包含的操作分类的数量</Description>
		<Priority>0</Priority>
		<Text>GetOperationCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOperationInfo</Content>
		<Description>●bool,Card|Group,int,int,int Duel.GetOperationInfo(int chainc, int category)
返回连锁chainc的category分类的操作信息，返回值为5个，
第一个返回值是false的话表示不存在该分类
后4个返回值对应Duel.SetOperationInfo的后4个参数：Card|Group targets, int count, int target_player, int target_param</Description>
		<Priority>0</Priority>
		<Text>GetOperationInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOverlayCount</Content>
		<Description>●int Duel.GetOverlayCount(int player, int s, int o)
返回指定位置的所有叠放的卡的数量</Description>
		<Priority>0</Priority>
		<Text>GetOverlayCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOverlayGroup</Content>
		<Description>●Group Duel.GetOverlayGroup(int player, int s, int o)
返回指定位置的所有叠放的卡</Description>
		<Priority>0</Priority>
		<Text>GetOverlayGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetReleaseGroup</Content>
		<Description>●Group Duel.GetReleaseGroup(int player[, bool use_hand=false])
返回玩家player可解放（非上级召唤用）的卡片组，use_hand为true则包括手卡</Description>
		<Priority>0</Priority>
		<Text>GetReleaseGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetReleaseGroupCount</Content>
		<Description>●integer Duel.GetReleaseGroupCount(int player[, bool use_hand=false])
返回玩家player可解放（非上级召唤用）的卡片数量，use_hand为true则包括手卡</Description>
		<Priority>0</Priority>
		<Text>GetReleaseGroupCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetRitualMaterial</Content>
		<Description>●Group Duel.GetRitualMaterial(int player)
返回玩家player可用的用于仪式召唤素材的卡片组
包含手上，场上可解放的以及墓地的仪式魔人等卡</Description>
		<Priority>0</Priority>
		<Text>GetRitualMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTargetCount</Content>
		<Description>●int Duel.GetTargetCount(function f, int player, int s, int o, Card ex|nil, ...)
基本同Duel.GetMatchingGroupCount，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象</Description>
		<Priority>0</Priority>
		<Text>GetTargetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTributeCount</Content>
		<Description>●int Duel.GetTributeCount(Card c[, Group mg])
返回[mg中]用于通常召唤c的祭品数量
此数量不一定等于Duel.GetTributeGroup的返回值中的卡片数量
因为某些卡可以作为两个祭品来使用</Description>
		<Priority>0</Priority>
		<Text>GetTributeCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTributeGroup</Content>
		<Description>●Group Duel.GetTributeGroup(Card c)
返回用于通常召唤c可解放（上级召唤用）的卡片组</Description>
		<Priority>0</Priority>
		<Text>GetTributeGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTurnCount</Content>
		<Description>●int Duel.GetTurnCount()
返回当前的回合数</Description>
		<Priority>0</Priority>
		<Text>GetTurnCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTurnPlayer</Content>
		<Description>●int Duel.GetTurnPlayer()
返回当前的回合玩家</Description>
		<Priority>0</Priority>
		<Text>GetTurnPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Hint</Content>
		<Description>●void Duel.Hint(int hint_type, int player, int desc)
给玩家player发送hint_type类型的消息提示，提示内容为desc</Description>
		<Priority>0</Priority>
		<Text>Hint</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>HintSelection</Content>
		<Description>●void Duel.HintSelection(Group g)
手动为g显示被选为对象的动画效果，并记录这些卡被选为对象</Description>
		<Priority>0</Priority>
		<Text>HintSelection</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IncreaseSummonedCount</Content>
		<Description>●void Duel.IncreaseSummonedCount([Card c])
手动消耗1次玩家[对于卡片c]的通常召唤的次数</Description>
		<Priority>0</Priority>
		<Text>IncreaseSummonedCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsAbleToEnterBP</Content>
		<Description>●bool Duel.IsAbleToEnterBP()
检查回合玩家能否进入战斗阶段</Description>
		<Priority>0</Priority>
		<Text>IsAbleToEnterBP</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsCanRemoveCounter</Content>
		<Description>●bool Duel.IsCanRemoveCounter(int player, int s, int o, int countertype, int count, int reason)
检查玩家player以reason为原因是否能移除场上的countertype类型的count个指示物
s表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置</Description>
		<Priority>0</Priority>
		<Text>IsCanRemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsChainDisablable</Content>
		<Description>●bool Duel.IsChainDisablable(int chainc)
检查连锁chainc的效果能否被无效</Description>
		<Priority>0</Priority>
		<Text>IsChainDisablable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsChainNegatable</Content>
		<Description>●bool Duel.IsChainNegatable(int chainc)
检查连锁chainc的发动能否被无效</Description>
		<Priority>0</Priority>
		<Text>IsChainNegatable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsDamageCalculated</Content>
		<Description>●bool Duel.IsDamageCalculated()
用于在伤害阶段检查是否已经计算了战斗伤害</Description>
		<Priority>0</Priority>
		<Text>IsDamageCalculated</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsEnvironment</Content>
		<Description>●bool Duel.IsEnvironment(int code[, int player=PLAYER_ALL])
检查玩家player是否为场地代号code的来源玩家
场地代号指当前生效的场地卡的代号，或者海神的巫女把场地变化效果的值
来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者</Description>
		<Priority>0</Priority>
		<Text>IsEnvironment</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsExistingMatchingCard</Content>
		<Description>●bool Duel.IsExistingMatchingCard(function f, int player, int s, int o, int count, Card ex|nil, ...)
过滤函数，检查指定位置是否存在至少count张满足过滤条件f并且不等于ex的卡
第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>IsExistingMatchingCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsExistingTarget</Content>
		<Description>●bool Duel.IsExistingTarget(function f, int player, int s, int o, int count, Card ex|nil, ...)
过滤函数，检查指定位置是否存在至少count张满足过滤条件f并且不等于ex
并且可以成为当前正在处理的效果的对象的卡
第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>IsExistingTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerAffectedByEffect</Content>
		<Description>●Effect|nil Duel.IsPlayerAffectedByEffect(int player, int code)
检查player是否受到种类为code的效果影响，如果有就返回该效果</Description>
		<Priority>0</Priority>
		<Text>IsPlayerAffectedByEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanDiscardDeck</Content>
		<Description>●bool Duel.IsPlayerCanDiscardDeck(int player, int count)
检查玩家player是否可以把卡组顶端count张卡送去墓地</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanDiscardDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanDiscardDeckAsCost</Content>
		<Description>●bool Duel.IsPlayerCanDiscardDeckAsCost(int player, int count)
检查玩家player能否把卡组顶端count张卡送去墓地作为cost</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanDiscardDeckAsCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanDraw</Content>
		<Description>●bool Duel.IsPlayerCanDraw(int player[, int count=0])
检查玩家player是否可以效果抽[count张]卡</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanDraw</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanFlipSummon</Content>
		<Description>●bool Duel.IsPlayerCanFlipSummon(int player, Card c)
检查玩家player是否可以反转召唤c</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanFlipSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanRelease</Content>
		<Description>●bool Duel.IsPlayerCanRelease(int player, Card c)
检查玩家player是否能解放c</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanRelease</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanRemove</Content>
		<Description>●bool Duel.IsPlayerCanRemove(int player, Card c)
检查玩家player是否能除外c</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanRemove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanSendtoDeck</Content>
		<Description>●bool Duel.IsPlayerCanSendtoDeck(int player, Card c)
检查玩家是否能把c送去卡组</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanSendtoDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanSendtoGrave</Content>
		<Description>●bool Duel.IsPlayerCanSendtoGrave(int player, Card c)
检查玩家是否能把c送去墓地</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanSendtoGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanSendtoHand</Content>
		<Description>●bool Duel.IsPlayerCanSendtoHand(int player, Card c)
检查玩家是否能把c送去手牌</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanSendtoHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanSpecialSummon</Content>
		<Description>●bool Duel.IsPlayerCanSpecialSummon(int player[, int sumtype, int sumpos, int target_player, Card c])
检查玩家player能否特殊召唤[c到target_player场上，以sumtype召唤方式，sumpos表示形式]
如果需要可选参数，则必须全部使用</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanSpecialSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanSpecialSummonCount</Content>
		<Description>●bool Duel.IsPlayerCanSpecialSummonCount(int player, int count)
检查玩家player能否特殊召唤count次</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanSpecialSummonCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanSpecialSummonMonster</Content>
		<Description>●bool Duel.IsPlayerCanSpecialSummonMonster(int player, int code, int setcode, int type, int atk, int def, int level, int race, int attribute
[, integer pos=POS_FACEUP, integer target_player=player])
检查玩家player是否可以以pos的表示形式特殊召唤给定参数的怪兽到target_player场上
此函数通常用于判定是否可以特招token和陷阱怪兽</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanSpecialSummonMonster</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsPlayerCanSummon</Content>
		<Description>●bool Duel.IsPlayerCanSummon(int player, int sumtype, Card c)
检查玩家player是否可以以sumtype方式通常召唤c
仅当玩家收到“不能上级召唤”等效果的影响时返回false</Description>
		<Priority>0</Priority>
		<Text>IsPlayerCanSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>MajesticCopy</Content>
		<Description>●void Duel.MajesticCopy(Card c1, Card c2)
救世星龙专用。把c2记述的效果复制给c1
强制发动的效果可以选择是否发动</Description>
		<Priority>0</Priority>
		<Text>MajesticCopy</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>MoveSequence</Content>
		<Description>●void Duel.MoveSequence(Card c, int seq)
移动c的序号，通常用于在场上换格子或者在卡组中移动到最上方或者最下方</Description>
		<Priority>0</Priority>
		<Text>MoveSequence</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>MoveToField</Content>
		<Description>●bool Duel.MoveToField(Card c, int move_player, int target_player, int dest, int pos, bool enabled)
让玩家move_player把c移动的target_player的场上，返回值表示是否成功
dest只能是LOCATION_MZONE或者LOCATION_SZONE，pos表示可选表示形式，enable表示是否立刻适用c的效果</Description>
		<Priority>0</Priority>
		<Text>MoveToField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>MSet</Content>
		<Description>●void Duel.MSet(int player, Card c, bool ignore_count, Effect e|nil[, minc=0])
让玩家以效果e对c进行通常召唤的Set，至少使用mint个祭品
如果e=nil,那么就按照一般的通常召唤规则进行通常召唤
如果ignore_count=true，则忽略每回合的通常召唤次数限制</Description>
		<Priority>0</Priority>
		<Text>MSet</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>NegateActivation</Content>
		<Description>●bool Duel.NegateActivation(int chainc)
使连锁chainc的发动无效，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>NegateActivation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>NegateAttack</Content>
		<Description>●bool Duel.NegateAttack()
无效此次攻击，返回值表示是否成功
此次攻击已经被其他效果无效或导致攻击的卡不能攻击则返回false</Description>
		<Priority>0</Priority>
		<Text>NegateAttack</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>NegateEffect</Content>
		<Description>●bool Duel.NegateEffect(int chainc)
使连锁chainc的效果无效，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>NegateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>NegateRelatedChain</Content>
		<Description>●void Duel.NegateRelatedChain(Card c, int reset)
使卡片c的已经发动的连锁都无效化，发生reset事件则重置</Description>
		<Priority>0</Priority>
		<Text>NegateRelatedChain</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>NegateSummon</Content>
		<Description>●void Duel.NegateSummon(Card|Group targets)
使正在召唤·反转召唤·特殊召唤的targets的召唤无效</Description>
		<Priority>0</Priority>
		<Text>NegateSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Overlay</Content>
		<Description>●void Duel.Overlay(Card c, Card|Group ocard)
把ocard作为c的叠放卡叠放</Description>
		<Priority>0</Priority>
		<Text>Overlay</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>PayLPCost</Content>
		<Description>●void Duel.PayLPCost(int player, int cost)
让玩家player支付cost点lp</Description>
		<Priority>0</Priority>
		<Text>PayLPCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RaiseEvent</Content>
		<Description>●void Duel.RaiseEvent(Group|Card eg, int code, Effect re, int r, int rp, int ep, int ev)
以eg,ep,ev,re,r,rp触发一个时点</Description>
		<Priority>0</Priority>
		<Text>RaiseEvent</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RaiseSingleEvent</Content>
		<Description>●void Duel.RaiseSingleEvent(Card ec, int code, Effect re, int r, int rp, int ep, int ev)
以eg,ep,ev,re,r,rp为卡片ec触发一个单体时点</Description>
		<Priority>0</Priority>
		<Text>RaiseSingleEvent</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Readjust</Content>
		<Description>●void Duel.Readjust()
刷新场上的卡的信息
非特定情况或者不清楚原理请勿使用此函数以免形成死循环</Description>
		<Priority>0</Priority>
		<Text>Readjust</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Recover</Content>
		<Description>●int Duel.Recover(int player, int value, int reason)
以reason原因使玩家player回复value的LP，返回实际的回复值
如果受到回复变成伤害等效果的影响时，返回值为0.</Description>
		<Priority>0</Priority>
		<Text>Recover</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RegisterEffect</Content>
		<Description>●void Duel.RegisterEffect(Effect e, int player)
把效果e作为玩家player的效果注册给全局环境</Description>
		<Priority>0</Priority>
		<Text>RegisterEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RegisterFlagEffect</Content>
		<Description>●Effect Duel.RegisterFlagEffect(int player, int code, int reset_flag, int property, int reset_count)
为玩家player注册全局环境下的标识效果
此效果总是影响玩家的(EFFECT_FLAG_PLAYER_TARGET)并且不会被无效化
其余部分与Card.RegisterFlagEffect相同</Description>
		<Priority>0</Priority>
		<Text>RegisterFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Release</Content>
		<Description>●int Duel.Release(Card|Group targets, int reason)
以reason原因解放targets返回值是实际解放的数量
如果reason含有REASON_COST，则不会检查卡片是否不受效果影响</Description>
		<Priority>0</Priority>
		<Text>Release</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReleaseRitualMaterial</Content>
		<Description>●void Duel.ReleaseRitualMaterial(Group g)
解放仪式用的素材g，如果是墓地的仪式魔人等卡则除外</Description>
		<Priority>0</Priority>
		<Text>ReleaseRitualMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Remove</Content>
		<Description>●int Duel.Remove(Card|Group targets, int pos, int reason)
以reason原因，pos表示形式除外targets，返回值是实际被操作的数量
如果reason包含REASON_TEMPORARY，那么视为是暂时除外，可以通过Duel.ReturnToField返回到场上</Description>
		<Priority>0</Priority>
		<Text>Remove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RemoveCounter</Content>
		<Description>●bool Duel.RemoveCounter(int player, int s, int o, int countertype, int count, int reason)
让玩家player以reason为原因移除场上存在的countertype类型的count个指示物，返回值表示是否成功
s表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置</Description>
		<Priority>0</Priority>
		<Text>RemoveCounter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RemoveOverlayCard</Content>
		<Description>●bool Duel.RemoveOverlayCard(int player, int s, int o, int min, int max, int reason)
让player以reason原因移除指定位置的min-max张叠放卡，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>RemoveOverlayCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReplaceAttacker</Content>
		<Description>●void Duel.ReplaceAttacker(Card c)
用c代替当前攻击的卡进行伤害阶段</Description>
		<Priority>0</Priority>
		<Text>ReplaceAttacker</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReplaceAttackTarget</Content>
		<Description>●void Duel.ReplaceAttackTarget(Card c)
(预留）</Description>
		<Priority>0</Priority>
		<Text>ReplaceAttackTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ResetFlagEffect</Content>
		<Description>●void Duel.ResetFlagEffect(int player, int code)
手动reset玩家player的特定的标识效果</Description>
		<Priority>0</Priority>
		<Text>ResetFlagEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ReturnToField</Content>
		<Description>●bool Duel.ReturnToField(Card c[, int pos])
把c以表示形式pos返回到场上，pos默认值是离场前的表示形式，返回值表示是否成功
c必须是以REASON_TEMPORARY原因离场，并且离场后没有离开过那个位置</Description>
		<Priority>0</Priority>
		<Text>ReturnToField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectDisableField</Content>
		<Description>●int Duel.SelectDisableField(int player, int count, int s, int o, int filter)
让玩家player选择指定位置满足标记条件filter的count个可用的空格，并返回选择位置的标记
常用于选择区域不能使用或移动怪兽格子</Description>
		<Priority>0</Priority>
		<Text>SelectDisableField</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectEffectYesNo</Content>
		<Description>●bool Duel.SelectEffectYesNo(int player, Card c)
让玩家player选择是否发动卡片c的效果</Description>
		<Priority>0</Priority>
		<Text>SelectEffectYesNo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectFusionMaterial</Content>
		<Description>●Group Duel.SelectFusionMaterial(int player, Card c, Group g[, Card gc|nil, int chkf=PLAYER_NONE])
让玩家player从g中选择一组[必须包含gc在内的]融合怪兽c的融合素材</Description>
		<Priority>0</Priority>
		<Text>SelectFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectMatchingCard</Content>
		<Description>●Group Duel.SelectMatchingCard(int sel_player, function f, int player, int s, int o, int min, int max, Card ex|nil, ...)
过滤函数，让玩家sel_player选择指定位置满足过滤条件f并且不等于ex的min-max张卡
第9个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>SelectMatchingCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectOption</Content>
		<Description>●int Duel.SelectOption(int player, int desc1, ...)
让玩家选择选项，从第二个参数开始，每一个参数代表一条选项
返回选择的选项的序号(从0开始)</Description>
		<Priority>0</Priority>
		<Text>SelectOption</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectPosition</Content>
		<Description>●int Duel.SelectPosition(int player, Card c, int pos)
让玩家player选择c的表示形式并返回</Description>
		<Priority>0</Priority>
		<Text>SelectPosition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectReleaseGroup</Content>
		<Description>●Group Duel.SelectReleaseGroup(int sel_player, function f, int min, int max, Card ex|nil, ...)
过滤函数，让玩家player从场上选择min-max张不等于ex的满足条件f的可解放的卡（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>SelectReleaseGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectReleaseGroupEx</Content>
		<Description>●Group Duel.SelectReleaseGroupEx(int player, function f, int min, int max, Card ex|nil, ...)
过滤函数，让玩家player从场上·手卡选择min-max张不等于ex的满足条件f的可解放的卡（非上级召唤用）</Description>
		<Priority>0</Priority>
		<Text>SelectReleaseGroupEx</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectSynchroMaterial</Content>
		<Description>●Group Duel.SelectSynchroMaterial(int player, Card c, function f1, function f2, int min, int max[, Card smat, Group mg])
让玩家player[从mg中]选择用于同调c需要的[必须包含smat在内（如果有mg~=nil则忽略此参数）]满足条件的数量为min-max的一组素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>SelectSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectTarget</Content>
		<Description>●Group Duel.SelectTarget(int sel_player, function f, int player, int s, int o, int min, int max, Card ex|nil, ...)
过滤函数，让玩家sel_player选择指定位置满足过滤条件f并且不等于ex
并且可以成为当前正在处理的效果的对象的min-max张卡
第9个参数开始为额外参数
此函数会同时将当前正在处理的连锁的对象设置成选择的卡</Description>
		<Priority>0</Priority>
		<Text>SelectTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectTribute</Content>
		<Description>●Group Duel.SelectTribute(int player, Card c, int min, int max[, Group mg])
让玩家player[从mg中]选择用于通常召唤c的min-max个祭品</Description>
		<Priority>0</Priority>
		<Text>SelectTribute</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectTunerMaterial</Content>
		<Description>●Group Duel.SelectTunerMaterial(int player, Card c, Card tuner, function f1, function f2, int min, int max[, Group mg])
让玩家[从mg中]选择用于同调c需要的满足条件的以tuner作为调整的min-max张卡的一组素材
f1是调整需要满足的过滤条件，f2是调整以外的部分需要满足的过滤条件</Description>
		<Priority>0</Priority>
		<Text>SelectTunerMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectXyzMaterial</Content>
		<Description>●Group Duel.SelectXyzMaterial(int player, Card c, function f, int lv, int min, int max)
让玩家player为超量怪兽c选择超量用等级为lv的min-max个满足条件f的叠放素材</Description>
		<Priority>0</Priority>
		<Text>SelectXyzMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectYesNo</Content>
		<Description>●bool Duel.SelectYesNo(int player, int desc)
让玩家player选择是或否</Description>
		<Priority>0</Priority>
		<Text>SelectYesNo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SendtoDeck</Content>
		<Description>●int Duel.SendtoDeck(Card|Group targets, int player|nil, int seq, int reason)
以reason原因把targets送去玩家player的卡组，返回值是实际被操作的数量
如果player是nil则返回卡的持有者的卡组
如果seq=0，则是返回卡组最顶端；seq=1则是返回卡组最底端；
其余情况则是返回最顶端并且标记需要洗卡组</Description>
		<Priority>0</Priority>
		<Text>SendtoDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SendtoGrave</Content>
		<Description>●int Duel.SendtoGrave(Card|Group targets, int reason)
以reason原因把targets送去墓地，返回值是实际被操作的数量</Description>
		<Priority>0</Priority>
		<Text>SendtoGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SendtoHand</Content>
		<Description>●int Duel.SendtoHand(Card|Group targets, int player|nil, int reason)
以reason原因把targets送去玩家player的手牌，返回值是实际被操作的数量
如果player是nil则返回卡的持有者的手牌</Description>
		<Priority>0</Priority>
		<Text>SendtoHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetChainLimit</Content>
		<Description>●void Duel.SetChainLimit(function f)
设定连锁条件，f的函数原型为 bool f(e,ep,tp)
e表示要限制连锁的效果，ep表示要限制连锁的玩家，tp表示发动该效果的玩家
在cost或者target处理中调用此函数可以限制可以连锁的效果的种类（如超融合）
如果f返回false表示不能连锁，一旦设置连锁条件后发生了新的连锁那么连锁条件将会解除</Description>
		<Priority>0</Priority>
		<Text>SetChainLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetChainLimitTillChainEnd</Content>
		<Description>●void Duel.SetChainLimitTillChainEnd(function f)
功能同Duel.SetChainLimit，但是此函数设定的连锁条件直到连锁结束才会解除</Description>
		<Priority>0</Priority>
		<Text>SetChainLimitTillChainEnd</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCoinResult</Content>
		<Description>●void Duel.SetCoinResult(int res, ... )
强行修改投硬币的结果为res
此函数用于永续的EVENT_TOSS_COIN事件中</Description>
		<Priority>0</Priority>
		<Text>SetCoinResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetDiceResult</Content>
		<Description>●void Duel.SetDiceResult(int res, ...)
强行修改投骰子的结果为res
此函数用于永续的EVENT_TOSS_DICE事件中</Description>
		<Priority>0</Priority>
		<Text>SetDiceResult</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetFusionMaterial</Content>
		<Description>●void Duel.SetFusionMaterial(Group g)
设置g为需要使用的融合素材</Description>
		<Priority>0</Priority>
		<Text>SetFusionMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetLP</Content>
		<Description>●void Duel.SetLP(int player, int lp)
设置玩家player的当前LP为lp</Description>
		<Priority>0</Priority>
		<Text>SetLP</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetOperationInfo</Content>
		<Description>●void Duel.SetOperationInfo(int chainc, int category, Card|Group targets, int count, int target_player, int target_param)
设置当前处理的连锁的操作信息此操作信息包含了效果处理中确定要处理的效果分类
比如潜行狙击手需要设置CATEGORY_DICE，但是不能设置CATEGORY_DESTROY，因为不确定
对于破坏效果，targets需要设置成发动时可能成为连锁的影响对象的卡，
并设置count为发动时确定的要处理的卡的数量
比如黑洞发动时，targets需要设定为场上的所有怪兽，count设置成场上的怪的数量
对于需要移动卡片位置的CATEGORY_SPECIAL_SUMMON,CATEGORY_TOHAND,CATEGORY_TODECK等分类，
如果要处理的卡是确定的（比如取对象），则设置targets为这些卡，count为数量，
如果要处理的卡是不确定的（效果处理时才能确定，一般是不取对象的效果），
	则设置targets为nil，count为预计要处理的卡的数量，
	target_player为预计要处理的卡的持有者（不确定就为0）
	target_param为预计要处理的卡的位置
例如增援：SetOperationInfo(0,CATEGORY_TOHAND,nil,1,tp,LOCATION_DECK)
操作信息用于很多效果的发动的检测，例如星尘龙，王家长眠之谷等</Description>
		<Priority>0</Priority>
		<Text>SetOperationInfo</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetSynchroMaterial</Content>
		<Description>●void Duel.SetSynchroMaterial(Group g)
设置g为需要使用的同调素材</Description>
		<Priority>0</Priority>
		<Text>SetSynchroMaterial</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetTargetCard</Content>
		<Description>●void Duel.SetTargetCard(Card|Group targets)
把当前正在处理的连锁的对象设置成targets
注，这里的对象指的的广义的对象，包括不取对象的效果可能要处理的对象</Description>
		<Priority>0</Priority>
		<Text>SetTargetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetTargetParam</Content>
		<Description>●void Duel.SetTargetParam(integer)
void Duel.SetTargetParam(inte param)
把当前正在处理的连锁的对象参数设置成param</Description>
		<Priority>0</Priority>
		<Text>SetTargetParam</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetTargetPlayer</Content>
		<Description>●void Duel.SetTargetPlayer(int player)
把当前正在处理的连锁的对象玩家设置成player</Description>
		<Priority>0</Priority>
		<Text>SetTargetPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ShuffleDeck</Content>
		<Description>●void Duel.ShuffleDeck(int player)
手动洗切玩家player的卡组
注：会重置洗卡检测的状态</Description>
		<Priority>0</Priority>
		<Text>ShuffleDeck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ShuffleHand</Content>
		<Description>●void Duel.ShuffleHand(int player)
手动洗切玩家player的手卡
注：会重置洗卡检测的状态</Description>
		<Priority>0</Priority>
		<Text>ShuffleHand</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ShuffleSetCard</Content>
		<Description>●void Duel.ShuffleSetCard(Group g)
洗切覆盖在怪兽区域的卡（魔术礼帽）</Description>
		<Priority>0</Priority>
		<Text>ShuffleSetCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SkipPhase</Content>
		<Description>●void Duel.SkipPhase(int player, int phase, int reset_flag, int reset_count)
跳过玩家player的phase阶段，并在特定的阶段后reset，reset参数和效果相同</Description>
		<Priority>0</Priority>
		<Text>SkipPhase</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SortDecktop</Content>
		<Description>●void Duel.SortDecktop(int sort_player, int target_player, int count)
让玩家sort_player对玩家target_player的卡组最上方count张卡进行排序</Description>
		<Priority>0</Priority>
		<Text>SortDecktop</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SpecialSummon</Content>
		<Description>●int Duel.SpecialSummon(Card|Group targets, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos)
让玩家player以sumtype方式，pos表示形式把targets特殊召唤到target_player场上
如果nocheck为true则无视卡的召唤条件如果nolimit为true则无视卡的苏生限制
返回值是特殊召唤成功的卡的数量</Description>
		<Priority>0</Priority>
		<Text>SpecialSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SpecialSummonComplete</Content>
		<Description>●void|int Duel.SpecialSummonComplete()
此函数在确定复数个Duel.SpecialSummonStep调用完毕之后调用，用于触发事件</Description>
		<Priority>0</Priority>
		<Text>SpecialSummonComplete</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SpecialSummonRule</Content>
		<Description>●void Duel.SpecialSummonRule(int player, Card c)
让玩家player对c进行特殊召唤手续</Description>
		<Priority>0</Priority>
		<Text>SpecialSummonRule</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SpecialSummonStep</Content>
		<Description>●bool Duel.SpecialSummonStep(Card c, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos)
此函数是Duel.SpecialSummon的分解过程，只特殊召唤一张卡c
此函数用于一个效果同时特殊召唤多张参数不同的卡
此函数必须和Duel.SpecialSummonComplete一起使用
返回值表示是否特殊召唤成功</Description>
		<Priority>0</Priority>
		<Text>SpecialSummonStep</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SSet</Content>
		<Description>●void|int Duel.SSet(int player, Card|Group targets[, int target_player = player])
让玩家player把targets放置到target_player的魔法陷阱区
若targets为Group，则返回成功操作的数量</Description>
		<Priority>0</Priority>
		<Text>SSet</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Summon</Content>
		<Description>●void Duel.Summon(int player, Card c, bool ignore_count, Effect e|nil[, minc=0])
让玩家以效果e对c进行通常召唤(非set)，至少使用minc个祭品
如果e=nil,那么就按照一般的通常召唤规则进行通常召唤
如果ignore_count=true，则忽略每回合的通常召唤次数限制</Description>
		<Priority>0</Priority>
		<Text>Summon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SwapControl</Content>
		<Description>●bool Duel.SwapControl(Card c1, Card c2[, int reset_phase=0, int reset_count=0])
交换c1与c2的控制权，返回值表示是否成功</Description>
		<Priority>0</Priority>
		<Text>SwapControl</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SwapDeckAndGrave</Content>
		<Description>●void Duel.SwapDeckAndGrave(int player)
现世与冥界的逆转专用。把玩家player的卡组和墓地交换</Description>
		<Priority>0</Priority>
		<Text>SwapDeckAndGrave</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SynchroSummon</Content>
		<Description>●void Duel.SynchroSummon(int player, Card c, Card tuner[, Group mg])
让玩家player以tuner作为调整[mg为素材]对c进行同调召唤手续</Description>
		<Priority>0</Priority>
		<Text>SynchroSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>TossCoin</Content>
		<Description>●... Duel.TossCoin(int player, int count)
让玩家player投count(&lt;=5)次硬币，返回值为count个结果，0或者1.</Description>
		<Priority>0</Priority>
		<Text>TossCoin</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>TossDice</Content>
		<Description>●... Duel.TossDice(int player, int count1[, int count2 = 0])
让玩家player投count1次骰子[，1-player投count2次骰子](count1+count2&lt;=5)
返回值为count1+count2个结果，1-6</Description>
		<Priority>0</Priority>
		<Text>TossDice</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>VenomSwampCheck</Content>
		<Description>●bool Duel.VenomSwampCheck(Effect e, Card c)
蛇毒沼泽专用。把攻击力被其效果变成0的卡片破坏</Description>
		<Priority>0</Priority>
		<Text>VenomSwampCheck</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Win</Content>
		<Description>●void Duel.Win(int player, int win_reason)
当前效果处理完令player以win_reason决斗胜利</Description>
		<Priority>0</Priority>
		<Text>Win</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>XyzSummon</Content>
		<Description>●void Duel.XyzSummon(int player, Card c, Group mg|nil)
让玩家player[以mg为素材]对c进行超量召唤手续</Description>
		<Priority>0</Priority>
		<Text>XyzSummon</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Clone</Content>
		<Description>●Effect Effect.Clone(Effect e)
新建一个效果e的副本</Description>
		<Priority>0</Priority>
		<Text>Clone</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CreateEffect</Content>
		<Description>●Effect Effect.CreateEffect(Card c)
新建一个空效果
并且效果的Owner为c</Description>
		<Priority>0</Priority>
		<Text>CreateEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetActivateLocation</Content>
		<Description>●int Effect.GetActivateLocation(Effect e)
返回效果e的发动区域</Description>
		<Priority>0</Priority>
		<Text>GetActivateLocation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetActiveType</Content>
		<Description>●int Effect.GetActiveType(Effect e)
返回e的效果类型（怪兽·魔法·陷阱）
与发动该效果的卡的类型不一定相同，比如灵摆效果视为魔法卡的效果</Description>
		<Priority>0</Priority>
		<Text>GetActiveType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCategory</Content>
		<Description>●int Effect.GetCategory(Effect e)
返回Category属性</Description>
		<Priority>0</Priority>
		<Text>GetCategory</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCode</Content>
		<Description>●int Effect.GetCode(Effect e)
返回code属性</Description>
		<Priority>0</Priority>
		<Text>GetCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCondition</Content>
		<Description>●function Effect.GetCondition(Effect e)
返回condition属性</Description>
		<Priority>0</Priority>
		<Text>GetCondition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCost</Content>
		<Description>●function Effect.GetCost(Effect e)
返回cost属性</Description>
		<Priority>0</Priority>
		<Text>GetCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetDescription</Content>
		<Description>●int Effect.GetDescription(Effect e)
返回效果描述</Description>
		<Priority>0</Priority>
		<Text>GetDescription</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFieldID</Content>
		<Description>●int Effect.GetFieldID(Effect e)
获取效果e的id</Description>
		<Priority>0</Priority>
		<Text>GetFieldID</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetHandler</Content>
		<Description>●Card Effect.GetHandler(Effect e)
返回效果在哪一张卡上生效(通常是用Card.RegisterEffect注册该效果的卡)</Description>
		<Priority>0</Priority>
		<Text>GetHandler</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetHandlerPlayer</Content>
		<Description>●int Effect.GetHandlerPlayer(Effect e)
返回当前者，一般是Handle的控制者</Description>
		<Priority>0</Priority>
		<Text>GetHandlerPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLabel</Content>
		<Description>●int Effect.GetLabel(Effect e)
返回Label属性</Description>
		<Priority>0</Priority>
		<Text>GetLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetLabelObject</Content>
		<Description>●Card|Group|Effect Effect.GetLabelObject(Effect e)
返回LabelObject属性</Description>
		<Priority>0</Priority>
		<Text>GetLabelObject</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOperation</Content>
		<Description>●function Effect.GetOperation(Effect e)
返回operation属性</Description>
		<Priority>0</Priority>
		<Text>GetOperation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOwner</Content>
		<Description>●Card Effect.GetOwner(Effect e)
返回Owner属性</Description>
		<Priority>0</Priority>
		<Text>GetOwner</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetOwnerPlayer</Content>
		<Description>●int Effect.GetOwnerPlayer(Effect e)
返回OwnerPlayer属性，一般是Owner的控制者</Description>
		<Priority>0</Priority>
		<Text>GetOwnerPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetProperty</Content>
		<Description>●int Effect.GetProperty(Effect e)
返回Property属性</Description>
		<Priority>0</Priority>
		<Text>GetProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetTarget</Content>
		<Description>●function Effect.GetTarget(Effect e)
返回target属性</Description>
		<Priority>0</Priority>
		<Text>GetTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetType</Content>
		<Description>●int Effect.GetType(Effect e)
返回Type属性</Description>
		<Priority>0</Priority>
		<Text>GetType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetValue</Content>
		<Description>●function|int Effect.GetValue(Effect e)
返回value属性</Description>
		<Priority>0</Priority>
		<Text>GetValue</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GlobalEffect</Content>
		<Description>●Effect Effect.GlobalEffect()
新建一个全局效果</Description>
		<Priority>0</Priority>
		<Text>GlobalEffect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsActivatable</Content>
		<Description>●bool Effect.IsActivatable(Effect e, int player)
检查效果e能否由player发动</Description>
		<Priority>0</Priority>
		<Text>IsActivatable</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsActiveType</Content>
		<Description>●bool Effect.IsActiveType(Effect e, int type)
检查e的效果类型（怪兽·魔法·陷阱）是否有type</Description>
		<Priority>0</Priority>
		<Text>IsActiveType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsHasCategory</Content>
		<Description>●bool Effect.IsHasCategory(Effect e, int cate)
检查效果是否含有效果分类cate</Description>
		<Priority>0</Priority>
		<Text>IsHasCategory</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsHasProperty</Content>
		<Description>●bool Effect.IsHasProperty(Effect e, int prop)
检查效果是否含有标志prop</Description>
		<Priority>0</Priority>
		<Text>IsHasProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsHasType</Content>
		<Description>●bool Effect.IsHasType(Effect e, int type)
检查效果是否属于类型type</Description>
		<Priority>0</Priority>
		<Text>IsHasType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Reset</Content>
		<Description>●void Effect.Reset(Effect e)
把效果e重置，重置之后不可以再使用此效果</Description>
		<Priority>0</Priority>
		<Text>Reset</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetAbsoluteRange</Content>
		<Description>●void Effect.SetAbsoluteRange(Effect e, int playerid, int s_range, int o_range)
设置target range属性并设置EFFECT_FLAG_ABSOLUTE_RANGE标志
	playerid != 0 s_range和o_range反转</Description>
		<Priority>0</Priority>
		<Text>SetAbsoluteRange</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCategory</Content>
		<Description>●void Effect.SetCategory(Effect e, int cate)
设置Category属性</Description>
		<Priority>0</Priority>
		<Text>SetCategory</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCode</Content>
		<Description>●void Effect.SetCode(Effect e, int code)
为效果e设置Code属性</Description>
		<Priority>0</Priority>
		<Text>SetCode</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCondition</Content>
		<Description>●void Effect.SetCondition(Effect e, function con_func)
设置Condition属性</Description>
		<Priority>0</Priority>
		<Text>SetCondition</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCost</Content>
		<Description>●void Effect.SetCost(Effect e, function cost_func)
设置Cost属性</Description>
		<Priority>0</Priority>
		<Text>SetCost</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetCountLimit</Content>
		<Description>●void Effect.SetCountLimit(Effect e, int count[, int code=0])
设置一回合可以发动的次数count（仅触发型效果有效），相同的code(不等于0或1时)共用1个次数
code包含以下数值具有特殊的性质
EFFECT_COUNT_CODE_OATH          誓约使用次数
EFFECT_COUNT_CODE_DUEL          决斗中使用次数
EFFECT_COUNT_CODE_SINGLE        同一张卡多个效果公共使用次数（不限制同名卡）</Description>
		<Priority>0</Priority>
		<Text>SetCountLimit</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetDescription</Content>
		<Description>●void Effect.SetDescription(Effect e, int desc)
为效果e设置效果描述</Description>
		<Priority>0</Priority>
		<Text>SetDescription</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetHintTiming</Content>
		<Description>●void Effect.SetHintTiming(Effect e, int s_time[, int o_time=s_time])
设置提示时点</Description>
		<Priority>0</Priority>
		<Text>SetHintTiming</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetLabel</Content>
		<Description>●void Effect.SetLabel(Effect e, int label)
设置Label属性</Description>
		<Priority>0</Priority>
		<Text>SetLabel</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetLabelObject</Content>
		<Description>●void Effect.SetLabelObject(Effect e, Card|Group|Effect labelobject)
设置LabelObject属性</Description>
		<Priority>0</Priority>
		<Text>SetLabelObject</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetOperation</Content>
		<Description>●void Effect.SetOperation(Effect e, function op_func)
设置Operation属性</Description>
		<Priority>0</Priority>
		<Text>SetOperation</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetOwnerPlayer</Content>
		<Description>●void Effect.SetOwnerPlayer(Effect e[, int player])
设置OwnerPlayer属性为player</Description>
		<Priority>0</Priority>
		<Text>SetOwnerPlayer</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetProperty</Content>
		<Description>●void Effect.SetProperty(Effect e, int prop)
设置Property属性</Description>
		<Priority>0</Priority>
		<Text>SetProperty</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetRange</Content>
		<Description>●void Effect.SetRange(Effect e, int range)
为效果e设置Range属性</Description>
		<Priority>0</Priority>
		<Text>SetRange</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetReset</Content>
		<Description>●void Effect.SetReset(Effect e, int reset_flag[, int reset_count=1])
设置reset参数</Description>
		<Priority>0</Priority>
		<Text>SetReset</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetTarget</Content>
		<Description>●void Effect.SetTarget(Effect e, function targ_func)
设置Target属性</Description>
		<Priority>0</Priority>
		<Text>SetTarget</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetTargetRange</Content>
		<Description>●void Effect.SetTargetRange(Effect e, int s_range, int o_range)
为效果e设置Target Range属性
	s_range指影响的我方区域
	o_range值影响的对方区域
	如果property属性中指定了EFFECT_FLAG_ABSOLUTE_RANGE标志，
		那么s_range指玩家1受到影响的区域，o_range指玩家2受到影响的区域
	如果这是一个特殊召唤手续(EFFECT_SPSUMMON_PROC)的效果，
		并且property指定了EFFECT_FLAG_SPSUM_PARAM标志，
		那么s_range表示特殊召唤到的哪个玩家的场地，
	o_range表示可选择的表示形式</Description>
		<Priority>0</Priority>
		<Text>SetTargetRange</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetType</Content>
		<Description>●void Effect.SetType(Effect e, int type)
为效果e设置Type属性</Description>
		<Priority>0</Priority>
		<Text>SetType</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SetValue</Content>
		<Description>●void Effect.SetValue(Effect e, function|int|bool val)
设置Value属性</Description>
		<Priority>0</Priority>
		<Text>SetValue</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>AddCard</Content>
		<Description>●void Group.AddCard(Group g, Card c)
往g中增加c</Description>
		<Priority>0</Priority>
		<Text>AddCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckWithSumEqual</Content>
		<Description>●bool Group.CheckWithSumEqual(Group g, function f, int sum, int min, int max, ...)
子集求和判定函数，f为返回一个interger值的函数
检查g中是否存在一个数量为min-max的子集满足以f对子集的每一个元素求值的和等于sum，从第6个参数开始为额外参数
	比如：g:CheckWithSumEqual(Card.GetSynchroLevel,7,2,99)
	检查g中是否存在一个子集满足子集的同调用等级之和等于7</Description>
		<Priority>0</Priority>
		<Text>CheckWithSumEqual</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CheckWithSumGreater</Content>
		<Description>●bool Group.CheckWithSumGreater(Group g, function f, int sum, ...)
子集求和判定函数之二，f为返回一个interger值的函数
检查g中是否存在一个子集满足以f对子集的每一个元素求值的和刚好大于或者等于sum，从第4个参数开始为额外参数
比如：g:CheckWithSumGreater(Card.GetRitualLevel,8)
	检查g中是否存在一个子集满足子集的仪式用等级之和大于等于8
	注：判定必须是“刚好”大于或者等于
	以等级为例，要使等级合计大于等于8，可以选择LV1+LV7而不可以选择LV1+LV4+LV4</Description>
		<Priority>0</Priority>
		<Text>CheckWithSumGreater</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Clear</Content>
		<Description>●void Group.Clear(Group g)
清空卡片组</Description>
		<Priority>0</Priority>
		<Text>Clear</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Clone</Content>
		<Description>●Group Group.Clone(Group g)
新建卡片组g的副本</Description>
		<Priority>0</Priority>
		<Text>Clone</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>CreateGroup</Content>
		<Description>●Group Group.CreateGroup()
新建一个空的卡片组</Description>
		<Priority>0</Priority>
		<Text>CreateGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>DeleteGroup</Content>
		<Description>●void Group.DeleteGroup(Group g)
删除卡片组g</Description>
		<Priority>0</Priority>
		<Text>DeleteGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Equal</Content>
		<Description>●bool Group.Equal(Group g1, Group g2)
判断g1和g2是否相同</Description>
		<Priority>0</Priority>
		<Text>Equal</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Filter</Content>
		<Description>●Group Group.Filter(Group g, function f, Card ex|nil, ...)
过滤函数，从g中筛选满足筛选条件f并且不等于ex的卡
从第4个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>Filter</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>FilterCount</Content>
		<Description>●int Group.FilterCount(Group g, function f, Card ex|nil, ...)
过滤函数，和Group.Filter基本相同，不同之处在于此函数只返回满足条件的卡的数量</Description>
		<Priority>0</Priority>
		<Text>FilterCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>FilterSelect</Content>
		<Description>●Group Group.FilterSelect(Group g, int player, function f, int min, int max, Card ex|nil, ...)
过滤函数，让玩家player从g中选择min-max张满足筛选条件f并且不等于ex的卡
从第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>FilterSelect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>ForEach</Content>
		<Description>●void Group.ForEach(Group g, function f)
以g中的每一张卡作为参数调用一次f</Description>
		<Priority>0</Priority>
		<Text>ForEach</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>FromCards</Content>
		<Description>●Group Group.FromCards(Card c[, ...])
不定参数，把传入的所有卡组合成一个卡片组并返回</Description>
		<Priority>0</Priority>
		<Text>FromCards</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetClassCount</Content>
		<Description>●int Group.GetClassCount(Group g, function f, ...)
计算g中所有卡的种类数量，f为分类的依据，返回相同的值视为同一种类，从第3个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>GetClassCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetCount</Content>
		<Description>●int Group.GetCount(Group g)
返回g中卡的数量</Description>
		<Priority>0</Priority>
		<Text>GetCount</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetFirst</Content>
		<Description>●Card Group.GetFirst(Group g)
返回g中第一张卡，并重置当前指针到g中第一张卡
如果g中不存在卡则返回nil</Description>
		<Priority>0</Priority>
		<Text>GetFirst</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetMaxGroup</Content>
		<Description>●Group,int Group.GetMaxGroup(Group g, function f, ...)
f为返回一个interger值的函数，从g中筛选出具有最大的f的值的卡
第2个返回值为这个最大值，从第3个参数开始为额外参数
要使用第2个返回值注意检查g非空</Description>
		<Priority>0</Priority>
		<Text>GetMaxGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetMinGroup</Content>
		<Description>●Group,int Group.GetMinGroup(Group g, function f, ...)
f为返回一个interger值的函数，从g中筛选出具有最小的f的值的卡
第2个返回值为这个最小值，从第3个参数开始为额外参数
要使用第2个返回值注意检查g非空</Description>
		<Priority>0</Priority>
		<Text>GetMinGroup</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetNext</Content>
		<Description>●Card Group.GetNext(Group g)
使指针指向下一张卡并返回这张卡，如果不存在则返回nil</Description>
		<Priority>0</Priority>
		<Text>GetNext</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>GetSum</Content>
		<Description>●int Group.GetSum(Group g, function f, ...)
计算g中所有卡的取值的总和，f为为每张卡的取值函数，从第3个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>GetSum</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsContains</Content>
		<Description>●bool Group.IsContains(Group g, Card c)
检查g中是否存在卡片c</Description>
		<Priority>0</Priority>
		<Text>IsContains</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>IsExists</Content>
		<Description>●bool Group.IsExists(Group g, function f, int count, Card ex|nil, ...)
过滤函数，检查g中是否存在至少count张满足筛选条件f并且不等于ex的卡
从第5个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>IsExists</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>KeepAlive</Content>
		<Description>●void Group.KeepAlive(Group g)
让卡片组持续，把卡片组设置为效果的LabelObject需要设置</Description>
		<Priority>0</Priority>
		<Text>KeepAlive</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Merge</Content>
		<Description>●void Group.Merge(Group g1, Group g2)
把g2中的所有卡合并到g1
注：g2本身不会发生变化</Description>
		<Priority>0</Priority>
		<Text>Merge</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RandomSelect</Content>
		<Description>●Group Group.RandomSelect(Group g, int player, int count)
让玩家player从g中随机选择count张卡
因为是随机选择，所以参数player基本无用，由系统随机选取</Description>
		<Priority>0</Priority>
		<Text>RandomSelect</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Remove</Content>
		<Description>●void Group.Remove(Group g, function f, Card ex|nil, ...)
从g中移除满足筛选条件f并且不等于ex的所有卡，第4个参数开始是额外参数</Description>
		<Priority>0</Priority>
		<Text>Remove</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>RemoveCard</Content>
		<Description>●void Group.RemoveCard(Group g, Card c)
把c从g中移除</Description>
		<Priority>0</Priority>
		<Text>RemoveCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SearchCard</Content>
		<Description>●Card Group.SearchCard(Group g, function f, ...)
过滤函数，返回g中满足筛选条件f的第一张卡，从第3个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>SearchCard</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Select</Content>
		<Description>●Group Group.Select(Group g, int player, int min, int max, Card ex|nil)
让玩家player从g中选择min-max张不等于ex的卡</Description>
		<Priority>0</Priority>
		<Text>Select</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectWithSumEqual</Content>
		<Description>●Group Group.SelectWithSumEqual(Group g, int player, function f, int sum, int min, int max, ...)
让玩家player从g中选取一个数量为min-max的子集使子集的特定函数的和等于sum，从第7个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>SelectWithSumEqual</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>SelectWithSumGreater</Content>
		<Description>●Group Group.SelectWithSumGreater(Group g, int player, function f, int sum, ...)
让玩家player从g中选取一个子集使子集的特定函数f的和大于等于sum，从第5个参数开始为额外参数</Description>
		<Priority>0</Priority>
		<Text>SelectWithSumGreater</Text>
	</CompletionItem>
	<CompletionItem>
		<Content>Sub</Content>
		<Description>●void Group.Sub(Group g1, Group g2)
从g1中移除属于g2中的卡
注：g2本身不会发生变化</Description>
		<Priority>0</Priority>
		<Text>Sub</Text>
	</CompletionItem>
</ArrayOfCompletionItem>